
humiditysense.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000018c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000c834  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000005bc  0800c9c8  0800c9c8  0001c9c8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800cf84  0800cf84  000201e4  2**0
                  CONTENTS
  4 .ARM          00000008  0800cf84  0800cf84  0001cf84  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800cf8c  0800cf8c  000201e4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800cf8c  0800cf8c  0001cf8c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800cf90  0800cf90  0001cf90  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e4  20000000  0800cf94  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001be0  200001e4  0800d178  000201e4  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20001dc4  0800d178  00021dc4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201e4  2**0
                  CONTENTS, READONLY
 12 .debug_info   0002223b  00000000  00000000  00020214  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003f6a  00000000  00000000  0004244f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001c98  00000000  00000000  000463c0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001b10  00000000  00000000  00048058  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000053a5  00000000  00000000  00049b68  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001fbe4  00000000  00000000  0004ef0d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000daaa7  00000000  00000000  0006eaf1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00149598  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00008f64  00000000  00000000  001495e8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001e4 	.word	0x200001e4
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800c9ac 	.word	0x0800c9ac

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001e8 	.word	0x200001e8
 80001cc:	0800c9ac 	.word	0x0800c9ac

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2uiz>:
 8000ba8:	004a      	lsls	r2, r1, #1
 8000baa:	d211      	bcs.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bb0:	d211      	bcs.n	8000bd6 <__aeabi_d2uiz+0x2e>
 8000bb2:	d50d      	bpl.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d40e      	bmi.n	8000bdc <__aeabi_d2uiz+0x34>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	fa23 f002 	lsr.w	r0, r3, r2
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bda:	d102      	bne.n	8000be2 <__aeabi_d2uiz+0x3a>
 8000bdc:	f04f 30ff 	mov.w	r0, #4294967295
 8000be0:	4770      	bx	lr
 8000be2:	f04f 0000 	mov.w	r0, #0
 8000be6:	4770      	bx	lr

08000be8 <__aeabi_d2f>:
 8000be8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bec:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bf0:	bf24      	itt	cs
 8000bf2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bf6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bfa:	d90d      	bls.n	8000c18 <__aeabi_d2f+0x30>
 8000bfc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c00:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c04:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c08:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c0c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c10:	bf08      	it	eq
 8000c12:	f020 0001 	biceq.w	r0, r0, #1
 8000c16:	4770      	bx	lr
 8000c18:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c1c:	d121      	bne.n	8000c62 <__aeabi_d2f+0x7a>
 8000c1e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c22:	bfbc      	itt	lt
 8000c24:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c28:	4770      	bxlt	lr
 8000c2a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c2e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c32:	f1c2 0218 	rsb	r2, r2, #24
 8000c36:	f1c2 0c20 	rsb	ip, r2, #32
 8000c3a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c3e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c42:	bf18      	it	ne
 8000c44:	f040 0001 	orrne.w	r0, r0, #1
 8000c48:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c4c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c50:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c54:	ea40 000c 	orr.w	r0, r0, ip
 8000c58:	fa23 f302 	lsr.w	r3, r3, r2
 8000c5c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c60:	e7cc      	b.n	8000bfc <__aeabi_d2f+0x14>
 8000c62:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c66:	d107      	bne.n	8000c78 <__aeabi_d2f+0x90>
 8000c68:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c6c:	bf1e      	ittt	ne
 8000c6e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c72:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c76:	4770      	bxne	lr
 8000c78:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c7c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c80:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c84:	4770      	bx	lr
 8000c86:	bf00      	nop

08000c88 <__aeabi_uldivmod>:
 8000c88:	b953      	cbnz	r3, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8a:	b94a      	cbnz	r2, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8c:	2900      	cmp	r1, #0
 8000c8e:	bf08      	it	eq
 8000c90:	2800      	cmpeq	r0, #0
 8000c92:	bf1c      	itt	ne
 8000c94:	f04f 31ff 	movne.w	r1, #4294967295
 8000c98:	f04f 30ff 	movne.w	r0, #4294967295
 8000c9c:	f000 b9aa 	b.w	8000ff4 <__aeabi_idiv0>
 8000ca0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ca4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ca8:	f000 f83c 	bl	8000d24 <__udivmoddi4>
 8000cac:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cb0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cb4:	b004      	add	sp, #16
 8000cb6:	4770      	bx	lr

08000cb8 <__aeabi_d2lz>:
 8000cb8:	b538      	push	{r3, r4, r5, lr}
 8000cba:	2200      	movs	r2, #0
 8000cbc:	2300      	movs	r3, #0
 8000cbe:	4604      	mov	r4, r0
 8000cc0:	460d      	mov	r5, r1
 8000cc2:	f7ff ff0b 	bl	8000adc <__aeabi_dcmplt>
 8000cc6:	b928      	cbnz	r0, 8000cd4 <__aeabi_d2lz+0x1c>
 8000cc8:	4620      	mov	r0, r4
 8000cca:	4629      	mov	r1, r5
 8000ccc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000cd0:	f000 b80a 	b.w	8000ce8 <__aeabi_d2ulz>
 8000cd4:	4620      	mov	r0, r4
 8000cd6:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000cda:	f000 f805 	bl	8000ce8 <__aeabi_d2ulz>
 8000cde:	4240      	negs	r0, r0
 8000ce0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000ce4:	bd38      	pop	{r3, r4, r5, pc}
 8000ce6:	bf00      	nop

08000ce8 <__aeabi_d2ulz>:
 8000ce8:	b5d0      	push	{r4, r6, r7, lr}
 8000cea:	4b0c      	ldr	r3, [pc, #48]	; (8000d1c <__aeabi_d2ulz+0x34>)
 8000cec:	2200      	movs	r2, #0
 8000cee:	4606      	mov	r6, r0
 8000cf0:	460f      	mov	r7, r1
 8000cf2:	f7ff fc81 	bl	80005f8 <__aeabi_dmul>
 8000cf6:	f7ff ff57 	bl	8000ba8 <__aeabi_d2uiz>
 8000cfa:	4604      	mov	r4, r0
 8000cfc:	f7ff fc02 	bl	8000504 <__aeabi_ui2d>
 8000d00:	4b07      	ldr	r3, [pc, #28]	; (8000d20 <__aeabi_d2ulz+0x38>)
 8000d02:	2200      	movs	r2, #0
 8000d04:	f7ff fc78 	bl	80005f8 <__aeabi_dmul>
 8000d08:	4602      	mov	r2, r0
 8000d0a:	460b      	mov	r3, r1
 8000d0c:	4630      	mov	r0, r6
 8000d0e:	4639      	mov	r1, r7
 8000d10:	f7ff faba 	bl	8000288 <__aeabi_dsub>
 8000d14:	f7ff ff48 	bl	8000ba8 <__aeabi_d2uiz>
 8000d18:	4621      	mov	r1, r4
 8000d1a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d1c:	3df00000 	.word	0x3df00000
 8000d20:	41f00000 	.word	0x41f00000

08000d24 <__udivmoddi4>:
 8000d24:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d28:	9d08      	ldr	r5, [sp, #32]
 8000d2a:	4604      	mov	r4, r0
 8000d2c:	468e      	mov	lr, r1
 8000d2e:	2b00      	cmp	r3, #0
 8000d30:	d14d      	bne.n	8000dce <__udivmoddi4+0xaa>
 8000d32:	428a      	cmp	r2, r1
 8000d34:	4694      	mov	ip, r2
 8000d36:	d969      	bls.n	8000e0c <__udivmoddi4+0xe8>
 8000d38:	fab2 f282 	clz	r2, r2
 8000d3c:	b152      	cbz	r2, 8000d54 <__udivmoddi4+0x30>
 8000d3e:	fa01 f302 	lsl.w	r3, r1, r2
 8000d42:	f1c2 0120 	rsb	r1, r2, #32
 8000d46:	fa20 f101 	lsr.w	r1, r0, r1
 8000d4a:	fa0c fc02 	lsl.w	ip, ip, r2
 8000d4e:	ea41 0e03 	orr.w	lr, r1, r3
 8000d52:	4094      	lsls	r4, r2
 8000d54:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000d58:	0c21      	lsrs	r1, r4, #16
 8000d5a:	fbbe f6f8 	udiv	r6, lr, r8
 8000d5e:	fa1f f78c 	uxth.w	r7, ip
 8000d62:	fb08 e316 	mls	r3, r8, r6, lr
 8000d66:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000d6a:	fb06 f107 	mul.w	r1, r6, r7
 8000d6e:	4299      	cmp	r1, r3
 8000d70:	d90a      	bls.n	8000d88 <__udivmoddi4+0x64>
 8000d72:	eb1c 0303 	adds.w	r3, ip, r3
 8000d76:	f106 30ff 	add.w	r0, r6, #4294967295
 8000d7a:	f080 811f 	bcs.w	8000fbc <__udivmoddi4+0x298>
 8000d7e:	4299      	cmp	r1, r3
 8000d80:	f240 811c 	bls.w	8000fbc <__udivmoddi4+0x298>
 8000d84:	3e02      	subs	r6, #2
 8000d86:	4463      	add	r3, ip
 8000d88:	1a5b      	subs	r3, r3, r1
 8000d8a:	b2a4      	uxth	r4, r4
 8000d8c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000d90:	fb08 3310 	mls	r3, r8, r0, r3
 8000d94:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000d98:	fb00 f707 	mul.w	r7, r0, r7
 8000d9c:	42a7      	cmp	r7, r4
 8000d9e:	d90a      	bls.n	8000db6 <__udivmoddi4+0x92>
 8000da0:	eb1c 0404 	adds.w	r4, ip, r4
 8000da4:	f100 33ff 	add.w	r3, r0, #4294967295
 8000da8:	f080 810a 	bcs.w	8000fc0 <__udivmoddi4+0x29c>
 8000dac:	42a7      	cmp	r7, r4
 8000dae:	f240 8107 	bls.w	8000fc0 <__udivmoddi4+0x29c>
 8000db2:	4464      	add	r4, ip
 8000db4:	3802      	subs	r0, #2
 8000db6:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000dba:	1be4      	subs	r4, r4, r7
 8000dbc:	2600      	movs	r6, #0
 8000dbe:	b11d      	cbz	r5, 8000dc8 <__udivmoddi4+0xa4>
 8000dc0:	40d4      	lsrs	r4, r2
 8000dc2:	2300      	movs	r3, #0
 8000dc4:	e9c5 4300 	strd	r4, r3, [r5]
 8000dc8:	4631      	mov	r1, r6
 8000dca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dce:	428b      	cmp	r3, r1
 8000dd0:	d909      	bls.n	8000de6 <__udivmoddi4+0xc2>
 8000dd2:	2d00      	cmp	r5, #0
 8000dd4:	f000 80ef 	beq.w	8000fb6 <__udivmoddi4+0x292>
 8000dd8:	2600      	movs	r6, #0
 8000dda:	e9c5 0100 	strd	r0, r1, [r5]
 8000dde:	4630      	mov	r0, r6
 8000de0:	4631      	mov	r1, r6
 8000de2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000de6:	fab3 f683 	clz	r6, r3
 8000dea:	2e00      	cmp	r6, #0
 8000dec:	d14a      	bne.n	8000e84 <__udivmoddi4+0x160>
 8000dee:	428b      	cmp	r3, r1
 8000df0:	d302      	bcc.n	8000df8 <__udivmoddi4+0xd4>
 8000df2:	4282      	cmp	r2, r0
 8000df4:	f200 80f9 	bhi.w	8000fea <__udivmoddi4+0x2c6>
 8000df8:	1a84      	subs	r4, r0, r2
 8000dfa:	eb61 0303 	sbc.w	r3, r1, r3
 8000dfe:	2001      	movs	r0, #1
 8000e00:	469e      	mov	lr, r3
 8000e02:	2d00      	cmp	r5, #0
 8000e04:	d0e0      	beq.n	8000dc8 <__udivmoddi4+0xa4>
 8000e06:	e9c5 4e00 	strd	r4, lr, [r5]
 8000e0a:	e7dd      	b.n	8000dc8 <__udivmoddi4+0xa4>
 8000e0c:	b902      	cbnz	r2, 8000e10 <__udivmoddi4+0xec>
 8000e0e:	deff      	udf	#255	; 0xff
 8000e10:	fab2 f282 	clz	r2, r2
 8000e14:	2a00      	cmp	r2, #0
 8000e16:	f040 8092 	bne.w	8000f3e <__udivmoddi4+0x21a>
 8000e1a:	eba1 010c 	sub.w	r1, r1, ip
 8000e1e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e22:	fa1f fe8c 	uxth.w	lr, ip
 8000e26:	2601      	movs	r6, #1
 8000e28:	0c20      	lsrs	r0, r4, #16
 8000e2a:	fbb1 f3f7 	udiv	r3, r1, r7
 8000e2e:	fb07 1113 	mls	r1, r7, r3, r1
 8000e32:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000e36:	fb0e f003 	mul.w	r0, lr, r3
 8000e3a:	4288      	cmp	r0, r1
 8000e3c:	d908      	bls.n	8000e50 <__udivmoddi4+0x12c>
 8000e3e:	eb1c 0101 	adds.w	r1, ip, r1
 8000e42:	f103 38ff 	add.w	r8, r3, #4294967295
 8000e46:	d202      	bcs.n	8000e4e <__udivmoddi4+0x12a>
 8000e48:	4288      	cmp	r0, r1
 8000e4a:	f200 80cb 	bhi.w	8000fe4 <__udivmoddi4+0x2c0>
 8000e4e:	4643      	mov	r3, r8
 8000e50:	1a09      	subs	r1, r1, r0
 8000e52:	b2a4      	uxth	r4, r4
 8000e54:	fbb1 f0f7 	udiv	r0, r1, r7
 8000e58:	fb07 1110 	mls	r1, r7, r0, r1
 8000e5c:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000e60:	fb0e fe00 	mul.w	lr, lr, r0
 8000e64:	45a6      	cmp	lr, r4
 8000e66:	d908      	bls.n	8000e7a <__udivmoddi4+0x156>
 8000e68:	eb1c 0404 	adds.w	r4, ip, r4
 8000e6c:	f100 31ff 	add.w	r1, r0, #4294967295
 8000e70:	d202      	bcs.n	8000e78 <__udivmoddi4+0x154>
 8000e72:	45a6      	cmp	lr, r4
 8000e74:	f200 80bb 	bhi.w	8000fee <__udivmoddi4+0x2ca>
 8000e78:	4608      	mov	r0, r1
 8000e7a:	eba4 040e 	sub.w	r4, r4, lr
 8000e7e:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000e82:	e79c      	b.n	8000dbe <__udivmoddi4+0x9a>
 8000e84:	f1c6 0720 	rsb	r7, r6, #32
 8000e88:	40b3      	lsls	r3, r6
 8000e8a:	fa22 fc07 	lsr.w	ip, r2, r7
 8000e8e:	ea4c 0c03 	orr.w	ip, ip, r3
 8000e92:	fa20 f407 	lsr.w	r4, r0, r7
 8000e96:	fa01 f306 	lsl.w	r3, r1, r6
 8000e9a:	431c      	orrs	r4, r3
 8000e9c:	40f9      	lsrs	r1, r7
 8000e9e:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000ea2:	fa00 f306 	lsl.w	r3, r0, r6
 8000ea6:	fbb1 f8f9 	udiv	r8, r1, r9
 8000eaa:	0c20      	lsrs	r0, r4, #16
 8000eac:	fa1f fe8c 	uxth.w	lr, ip
 8000eb0:	fb09 1118 	mls	r1, r9, r8, r1
 8000eb4:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000eb8:	fb08 f00e 	mul.w	r0, r8, lr
 8000ebc:	4288      	cmp	r0, r1
 8000ebe:	fa02 f206 	lsl.w	r2, r2, r6
 8000ec2:	d90b      	bls.n	8000edc <__udivmoddi4+0x1b8>
 8000ec4:	eb1c 0101 	adds.w	r1, ip, r1
 8000ec8:	f108 3aff 	add.w	sl, r8, #4294967295
 8000ecc:	f080 8088 	bcs.w	8000fe0 <__udivmoddi4+0x2bc>
 8000ed0:	4288      	cmp	r0, r1
 8000ed2:	f240 8085 	bls.w	8000fe0 <__udivmoddi4+0x2bc>
 8000ed6:	f1a8 0802 	sub.w	r8, r8, #2
 8000eda:	4461      	add	r1, ip
 8000edc:	1a09      	subs	r1, r1, r0
 8000ede:	b2a4      	uxth	r4, r4
 8000ee0:	fbb1 f0f9 	udiv	r0, r1, r9
 8000ee4:	fb09 1110 	mls	r1, r9, r0, r1
 8000ee8:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000eec:	fb00 fe0e 	mul.w	lr, r0, lr
 8000ef0:	458e      	cmp	lr, r1
 8000ef2:	d908      	bls.n	8000f06 <__udivmoddi4+0x1e2>
 8000ef4:	eb1c 0101 	adds.w	r1, ip, r1
 8000ef8:	f100 34ff 	add.w	r4, r0, #4294967295
 8000efc:	d26c      	bcs.n	8000fd8 <__udivmoddi4+0x2b4>
 8000efe:	458e      	cmp	lr, r1
 8000f00:	d96a      	bls.n	8000fd8 <__udivmoddi4+0x2b4>
 8000f02:	3802      	subs	r0, #2
 8000f04:	4461      	add	r1, ip
 8000f06:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000f0a:	fba0 9402 	umull	r9, r4, r0, r2
 8000f0e:	eba1 010e 	sub.w	r1, r1, lr
 8000f12:	42a1      	cmp	r1, r4
 8000f14:	46c8      	mov	r8, r9
 8000f16:	46a6      	mov	lr, r4
 8000f18:	d356      	bcc.n	8000fc8 <__udivmoddi4+0x2a4>
 8000f1a:	d053      	beq.n	8000fc4 <__udivmoddi4+0x2a0>
 8000f1c:	b15d      	cbz	r5, 8000f36 <__udivmoddi4+0x212>
 8000f1e:	ebb3 0208 	subs.w	r2, r3, r8
 8000f22:	eb61 010e 	sbc.w	r1, r1, lr
 8000f26:	fa01 f707 	lsl.w	r7, r1, r7
 8000f2a:	fa22 f306 	lsr.w	r3, r2, r6
 8000f2e:	40f1      	lsrs	r1, r6
 8000f30:	431f      	orrs	r7, r3
 8000f32:	e9c5 7100 	strd	r7, r1, [r5]
 8000f36:	2600      	movs	r6, #0
 8000f38:	4631      	mov	r1, r6
 8000f3a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f3e:	f1c2 0320 	rsb	r3, r2, #32
 8000f42:	40d8      	lsrs	r0, r3
 8000f44:	fa0c fc02 	lsl.w	ip, ip, r2
 8000f48:	fa21 f303 	lsr.w	r3, r1, r3
 8000f4c:	4091      	lsls	r1, r2
 8000f4e:	4301      	orrs	r1, r0
 8000f50:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000f54:	fa1f fe8c 	uxth.w	lr, ip
 8000f58:	fbb3 f0f7 	udiv	r0, r3, r7
 8000f5c:	fb07 3610 	mls	r6, r7, r0, r3
 8000f60:	0c0b      	lsrs	r3, r1, #16
 8000f62:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000f66:	fb00 f60e 	mul.w	r6, r0, lr
 8000f6a:	429e      	cmp	r6, r3
 8000f6c:	fa04 f402 	lsl.w	r4, r4, r2
 8000f70:	d908      	bls.n	8000f84 <__udivmoddi4+0x260>
 8000f72:	eb1c 0303 	adds.w	r3, ip, r3
 8000f76:	f100 38ff 	add.w	r8, r0, #4294967295
 8000f7a:	d22f      	bcs.n	8000fdc <__udivmoddi4+0x2b8>
 8000f7c:	429e      	cmp	r6, r3
 8000f7e:	d92d      	bls.n	8000fdc <__udivmoddi4+0x2b8>
 8000f80:	3802      	subs	r0, #2
 8000f82:	4463      	add	r3, ip
 8000f84:	1b9b      	subs	r3, r3, r6
 8000f86:	b289      	uxth	r1, r1
 8000f88:	fbb3 f6f7 	udiv	r6, r3, r7
 8000f8c:	fb07 3316 	mls	r3, r7, r6, r3
 8000f90:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f94:	fb06 f30e 	mul.w	r3, r6, lr
 8000f98:	428b      	cmp	r3, r1
 8000f9a:	d908      	bls.n	8000fae <__udivmoddi4+0x28a>
 8000f9c:	eb1c 0101 	adds.w	r1, ip, r1
 8000fa0:	f106 38ff 	add.w	r8, r6, #4294967295
 8000fa4:	d216      	bcs.n	8000fd4 <__udivmoddi4+0x2b0>
 8000fa6:	428b      	cmp	r3, r1
 8000fa8:	d914      	bls.n	8000fd4 <__udivmoddi4+0x2b0>
 8000faa:	3e02      	subs	r6, #2
 8000fac:	4461      	add	r1, ip
 8000fae:	1ac9      	subs	r1, r1, r3
 8000fb0:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000fb4:	e738      	b.n	8000e28 <__udivmoddi4+0x104>
 8000fb6:	462e      	mov	r6, r5
 8000fb8:	4628      	mov	r0, r5
 8000fba:	e705      	b.n	8000dc8 <__udivmoddi4+0xa4>
 8000fbc:	4606      	mov	r6, r0
 8000fbe:	e6e3      	b.n	8000d88 <__udivmoddi4+0x64>
 8000fc0:	4618      	mov	r0, r3
 8000fc2:	e6f8      	b.n	8000db6 <__udivmoddi4+0x92>
 8000fc4:	454b      	cmp	r3, r9
 8000fc6:	d2a9      	bcs.n	8000f1c <__udivmoddi4+0x1f8>
 8000fc8:	ebb9 0802 	subs.w	r8, r9, r2
 8000fcc:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000fd0:	3801      	subs	r0, #1
 8000fd2:	e7a3      	b.n	8000f1c <__udivmoddi4+0x1f8>
 8000fd4:	4646      	mov	r6, r8
 8000fd6:	e7ea      	b.n	8000fae <__udivmoddi4+0x28a>
 8000fd8:	4620      	mov	r0, r4
 8000fda:	e794      	b.n	8000f06 <__udivmoddi4+0x1e2>
 8000fdc:	4640      	mov	r0, r8
 8000fde:	e7d1      	b.n	8000f84 <__udivmoddi4+0x260>
 8000fe0:	46d0      	mov	r8, sl
 8000fe2:	e77b      	b.n	8000edc <__udivmoddi4+0x1b8>
 8000fe4:	3b02      	subs	r3, #2
 8000fe6:	4461      	add	r1, ip
 8000fe8:	e732      	b.n	8000e50 <__udivmoddi4+0x12c>
 8000fea:	4630      	mov	r0, r6
 8000fec:	e709      	b.n	8000e02 <__udivmoddi4+0xde>
 8000fee:	4464      	add	r4, ip
 8000ff0:	3802      	subs	r0, #2
 8000ff2:	e742      	b.n	8000e7a <__udivmoddi4+0x156>

08000ff4 <__aeabi_idiv0>:
 8000ff4:	4770      	bx	lr
 8000ff6:	bf00      	nop

08000ff8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000ff8:	b580      	push	{r7, lr}
 8000ffa:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000ffc:	f000 fd73 	bl	8001ae6 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001000:	f000 f83a 	bl	8001078 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001004:	f000 f9ac 	bl	8001360 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8001008:	f000 f97a 	bl	8001300 <MX_USART2_UART_Init>
  MX_I2C1_Init();
 800100c:	f000 f896 	bl	800113c <MX_I2C1_Init>
  MX_SPI1_Init();
 8001010:	f000 f8d4 	bl	80011bc <MX_SPI1_Init>
  MX_TIM2_Init();
 8001014:	f000 f910 	bl	8001238 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8001018:	f004 fa3e 	bl	8005498 <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of CheckOutp */
  CheckOutpHandle = osThreadNew(StartCheckOutp, NULL, &CheckOutp_attributes);
 800101c:	4a0d      	ldr	r2, [pc, #52]	; (8001054 <main+0x5c>)
 800101e:	2100      	movs	r1, #0
 8001020:	480d      	ldr	r0, [pc, #52]	; (8001058 <main+0x60>)
 8001022:	f004 fa83 	bl	800552c <osThreadNew>
 8001026:	4603      	mov	r3, r0
 8001028:	4a0c      	ldr	r2, [pc, #48]	; (800105c <main+0x64>)
 800102a:	6013      	str	r3, [r2, #0]

  /* creation of ReadSensor */
  ReadSensorHandle = osThreadNew(StartReadSensor, NULL, &ReadSensor_attributes);
 800102c:	4a0c      	ldr	r2, [pc, #48]	; (8001060 <main+0x68>)
 800102e:	2100      	movs	r1, #0
 8001030:	480c      	ldr	r0, [pc, #48]	; (8001064 <main+0x6c>)
 8001032:	f004 fa7b 	bl	800552c <osThreadNew>
 8001036:	4603      	mov	r3, r0
 8001038:	4a0b      	ldr	r2, [pc, #44]	; (8001068 <main+0x70>)
 800103a:	6013      	str	r3, [r2, #0]

  /* creation of SendData */
  SendDataHandle = osThreadNew(StartSendData, NULL, &SendData_attributes);
 800103c:	4a0b      	ldr	r2, [pc, #44]	; (800106c <main+0x74>)
 800103e:	2100      	movs	r1, #0
 8001040:	480b      	ldr	r0, [pc, #44]	; (8001070 <main+0x78>)
 8001042:	f004 fa73 	bl	800552c <osThreadNew>
 8001046:	4603      	mov	r3, r0
 8001048:	4a0a      	ldr	r2, [pc, #40]	; (8001074 <main+0x7c>)
 800104a:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 800104c:	f004 fa48 	bl	80054e0 <osKernelStart>
  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8001050:	e7fe      	b.n	8001050 <main+0x58>
 8001052:	bf00      	nop
 8001054:	0800ca28 	.word	0x0800ca28
 8001058:	080014cd 	.word	0x080014cd
 800105c:	2000038c 	.word	0x2000038c
 8001060:	0800ca4c 	.word	0x0800ca4c
 8001064:	080014e1 	.word	0x080014e1
 8001068:	20000390 	.word	0x20000390
 800106c:	0800ca70 	.word	0x0800ca70
 8001070:	080014f5 	.word	0x080014f5
 8001074:	20000394 	.word	0x20000394

08001078 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001078:	b580      	push	{r7, lr}
 800107a:	b096      	sub	sp, #88	; 0x58
 800107c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800107e:	f107 0314 	add.w	r3, r7, #20
 8001082:	2244      	movs	r2, #68	; 0x44
 8001084:	2100      	movs	r1, #0
 8001086:	4618      	mov	r0, r3
 8001088:	f007 f8b1 	bl	80081ee <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800108c:	463b      	mov	r3, r7
 800108e:	2200      	movs	r2, #0
 8001090:	601a      	str	r2, [r3, #0]
 8001092:	605a      	str	r2, [r3, #4]
 8001094:	609a      	str	r2, [r3, #8]
 8001096:	60da      	str	r2, [r3, #12]
 8001098:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 800109a:	f44f 7000 	mov.w	r0, #512	; 0x200
 800109e:	f001 fd8b 	bl	8002bb8 <HAL_PWREx_ControlVoltageScaling>
 80010a2:	4603      	mov	r3, r0
 80010a4:	2b00      	cmp	r3, #0
 80010a6:	d001      	beq.n	80010ac <SystemClock_Config+0x34>
  {
    Error_Handler();
 80010a8:	f000 fa3e 	bl	8001528 <Error_Handler>
  }

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 80010ac:	f001 fd66 	bl	8002b7c <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 80010b0:	4b21      	ldr	r3, [pc, #132]	; (8001138 <SystemClock_Config+0xc0>)
 80010b2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80010b6:	4a20      	ldr	r2, [pc, #128]	; (8001138 <SystemClock_Config+0xc0>)
 80010b8:	f023 0318 	bic.w	r3, r3, #24
 80010bc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSE|RCC_OSCILLATORTYPE_MSI;
 80010c0:	2314      	movs	r3, #20
 80010c2:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 80010c4:	2301      	movs	r3, #1
 80010c6:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 80010c8:	2301      	movs	r3, #1
 80010ca:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 80010cc:	2300      	movs	r3, #0
 80010ce:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 80010d0:	2360      	movs	r3, #96	; 0x60
 80010d2:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80010d4:	2302      	movs	r3, #2
 80010d6:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 80010d8:	2301      	movs	r3, #1
 80010da:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 80010dc:	2301      	movs	r3, #1
 80010de:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 16;
 80010e0:	2310      	movs	r3, #16
 80010e2:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 80010e4:	2307      	movs	r3, #7
 80010e6:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80010e8:	2302      	movs	r3, #2
 80010ea:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80010ec:	2302      	movs	r3, #2
 80010ee:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80010f0:	f107 0314 	add.w	r3, r7, #20
 80010f4:	4618      	mov	r0, r3
 80010f6:	f001 fdb5 	bl	8002c64 <HAL_RCC_OscConfig>
 80010fa:	4603      	mov	r3, r0
 80010fc:	2b00      	cmp	r3, #0
 80010fe:	d001      	beq.n	8001104 <SystemClock_Config+0x8c>
  {
    Error_Handler();
 8001100:	f000 fa12 	bl	8001528 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001104:	230f      	movs	r3, #15
 8001106:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001108:	2303      	movs	r3, #3
 800110a:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800110c:	2300      	movs	r3, #0
 800110e:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001110:	2300      	movs	r3, #0
 8001112:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001114:	2300      	movs	r3, #0
 8001116:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8001118:	463b      	mov	r3, r7
 800111a:	2101      	movs	r1, #1
 800111c:	4618      	mov	r0, r3
 800111e:	f002 f9b5 	bl	800348c <HAL_RCC_ClockConfig>
 8001122:	4603      	mov	r3, r0
 8001124:	2b00      	cmp	r3, #0
 8001126:	d001      	beq.n	800112c <SystemClock_Config+0xb4>
  {
    Error_Handler();
 8001128:	f000 f9fe 	bl	8001528 <Error_Handler>
  }

  /** Enable MSI Auto calibration
  */
  HAL_RCCEx_EnableMSIPLLMode();
 800112c:	f002 fdfa 	bl	8003d24 <HAL_RCCEx_EnableMSIPLLMode>
}
 8001130:	bf00      	nop
 8001132:	3758      	adds	r7, #88	; 0x58
 8001134:	46bd      	mov	sp, r7
 8001136:	bd80      	pop	{r7, pc}
 8001138:	40021000 	.word	0x40021000

0800113c <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 800113c:	b580      	push	{r7, lr}
 800113e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001140:	4b1b      	ldr	r3, [pc, #108]	; (80011b0 <MX_I2C1_Init+0x74>)
 8001142:	4a1c      	ldr	r2, [pc, #112]	; (80011b4 <MX_I2C1_Init+0x78>)
 8001144:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00600614;
 8001146:	4b1a      	ldr	r3, [pc, #104]	; (80011b0 <MX_I2C1_Init+0x74>)
 8001148:	4a1b      	ldr	r2, [pc, #108]	; (80011b8 <MX_I2C1_Init+0x7c>)
 800114a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 800114c:	4b18      	ldr	r3, [pc, #96]	; (80011b0 <MX_I2C1_Init+0x74>)
 800114e:	2200      	movs	r2, #0
 8001150:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001152:	4b17      	ldr	r3, [pc, #92]	; (80011b0 <MX_I2C1_Init+0x74>)
 8001154:	2201      	movs	r2, #1
 8001156:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001158:	4b15      	ldr	r3, [pc, #84]	; (80011b0 <MX_I2C1_Init+0x74>)
 800115a:	2200      	movs	r2, #0
 800115c:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 800115e:	4b14      	ldr	r3, [pc, #80]	; (80011b0 <MX_I2C1_Init+0x74>)
 8001160:	2200      	movs	r2, #0
 8001162:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001164:	4b12      	ldr	r3, [pc, #72]	; (80011b0 <MX_I2C1_Init+0x74>)
 8001166:	2200      	movs	r2, #0
 8001168:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800116a:	4b11      	ldr	r3, [pc, #68]	; (80011b0 <MX_I2C1_Init+0x74>)
 800116c:	2200      	movs	r2, #0
 800116e:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001170:	4b0f      	ldr	r3, [pc, #60]	; (80011b0 <MX_I2C1_Init+0x74>)
 8001172:	2200      	movs	r2, #0
 8001174:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001176:	480e      	ldr	r0, [pc, #56]	; (80011b0 <MX_I2C1_Init+0x74>)
 8001178:	f000 ff76 	bl	8002068 <HAL_I2C_Init>
 800117c:	4603      	mov	r3, r0
 800117e:	2b00      	cmp	r3, #0
 8001180:	d001      	beq.n	8001186 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8001182:	f000 f9d1 	bl	8001528 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001186:	2100      	movs	r1, #0
 8001188:	4809      	ldr	r0, [pc, #36]	; (80011b0 <MX_I2C1_Init+0x74>)
 800118a:	f001 fc5f 	bl	8002a4c <HAL_I2CEx_ConfigAnalogFilter>
 800118e:	4603      	mov	r3, r0
 8001190:	2b00      	cmp	r3, #0
 8001192:	d001      	beq.n	8001198 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8001194:	f000 f9c8 	bl	8001528 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8001198:	2100      	movs	r1, #0
 800119a:	4805      	ldr	r0, [pc, #20]	; (80011b0 <MX_I2C1_Init+0x74>)
 800119c:	f001 fca1 	bl	8002ae2 <HAL_I2CEx_ConfigDigitalFilter>
 80011a0:	4603      	mov	r3, r0
 80011a2:	2b00      	cmp	r3, #0
 80011a4:	d001      	beq.n	80011aa <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 80011a6:	f000 f9bf 	bl	8001528 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80011aa:	bf00      	nop
 80011ac:	bd80      	pop	{r7, pc}
 80011ae:	bf00      	nop
 80011b0:	20000204 	.word	0x20000204
 80011b4:	40005400 	.word	0x40005400
 80011b8:	00600614 	.word	0x00600614

080011bc <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80011bc:	b580      	push	{r7, lr}
 80011be:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80011c0:	4b1b      	ldr	r3, [pc, #108]	; (8001230 <MX_SPI1_Init+0x74>)
 80011c2:	4a1c      	ldr	r2, [pc, #112]	; (8001234 <MX_SPI1_Init+0x78>)
 80011c4:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80011c6:	4b1a      	ldr	r3, [pc, #104]	; (8001230 <MX_SPI1_Init+0x74>)
 80011c8:	f44f 7282 	mov.w	r2, #260	; 0x104
 80011cc:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80011ce:	4b18      	ldr	r3, [pc, #96]	; (8001230 <MX_SPI1_Init+0x74>)
 80011d0:	2200      	movs	r2, #0
 80011d2:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80011d4:	4b16      	ldr	r3, [pc, #88]	; (8001230 <MX_SPI1_Init+0x74>)
 80011d6:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 80011da:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80011dc:	4b14      	ldr	r3, [pc, #80]	; (8001230 <MX_SPI1_Init+0x74>)
 80011de:	2200      	movs	r2, #0
 80011e0:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80011e2:	4b13      	ldr	r3, [pc, #76]	; (8001230 <MX_SPI1_Init+0x74>)
 80011e4:	2200      	movs	r2, #0
 80011e6:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80011e8:	4b11      	ldr	r3, [pc, #68]	; (8001230 <MX_SPI1_Init+0x74>)
 80011ea:	f44f 7200 	mov.w	r2, #512	; 0x200
 80011ee:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 80011f0:	4b0f      	ldr	r3, [pc, #60]	; (8001230 <MX_SPI1_Init+0x74>)
 80011f2:	2210      	movs	r2, #16
 80011f4:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80011f6:	4b0e      	ldr	r3, [pc, #56]	; (8001230 <MX_SPI1_Init+0x74>)
 80011f8:	2200      	movs	r2, #0
 80011fa:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80011fc:	4b0c      	ldr	r3, [pc, #48]	; (8001230 <MX_SPI1_Init+0x74>)
 80011fe:	2200      	movs	r2, #0
 8001200:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001202:	4b0b      	ldr	r3, [pc, #44]	; (8001230 <MX_SPI1_Init+0x74>)
 8001204:	2200      	movs	r2, #0
 8001206:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8001208:	4b09      	ldr	r3, [pc, #36]	; (8001230 <MX_SPI1_Init+0x74>)
 800120a:	2207      	movs	r2, #7
 800120c:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 800120e:	4b08      	ldr	r3, [pc, #32]	; (8001230 <MX_SPI1_Init+0x74>)
 8001210:	2200      	movs	r2, #0
 8001212:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8001214:	4b06      	ldr	r3, [pc, #24]	; (8001230 <MX_SPI1_Init+0x74>)
 8001216:	2208      	movs	r2, #8
 8001218:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 800121a:	4805      	ldr	r0, [pc, #20]	; (8001230 <MX_SPI1_Init+0x74>)
 800121c:	f002 fe84 	bl	8003f28 <HAL_SPI_Init>
 8001220:	4603      	mov	r3, r0
 8001222:	2b00      	cmp	r3, #0
 8001224:	d001      	beq.n	800122a <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 8001226:	f000 f97f 	bl	8001528 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 800122a:	bf00      	nop
 800122c:	bd80      	pop	{r7, pc}
 800122e:	bf00      	nop
 8001230:	20000258 	.word	0x20000258
 8001234:	40013000 	.word	0x40013000

08001238 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001238:	b580      	push	{r7, lr}
 800123a:	b08c      	sub	sp, #48	; 0x30
 800123c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800123e:	f107 0320 	add.w	r3, r7, #32
 8001242:	2200      	movs	r2, #0
 8001244:	601a      	str	r2, [r3, #0]
 8001246:	605a      	str	r2, [r3, #4]
 8001248:	609a      	str	r2, [r3, #8]
 800124a:	60da      	str	r2, [r3, #12]
  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 800124c:	f107 030c 	add.w	r3, r7, #12
 8001250:	2200      	movs	r2, #0
 8001252:	601a      	str	r2, [r3, #0]
 8001254:	605a      	str	r2, [r3, #4]
 8001256:	609a      	str	r2, [r3, #8]
 8001258:	60da      	str	r2, [r3, #12]
 800125a:	611a      	str	r2, [r3, #16]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800125c:	463b      	mov	r3, r7
 800125e:	2200      	movs	r2, #0
 8001260:	601a      	str	r2, [r3, #0]
 8001262:	605a      	str	r2, [r3, #4]
 8001264:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001266:	4b25      	ldr	r3, [pc, #148]	; (80012fc <MX_TIM2_Init+0xc4>)
 8001268:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800126c:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 800126e:	4b23      	ldr	r3, [pc, #140]	; (80012fc <MX_TIM2_Init+0xc4>)
 8001270:	2200      	movs	r2, #0
 8001272:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001274:	4b21      	ldr	r3, [pc, #132]	; (80012fc <MX_TIM2_Init+0xc4>)
 8001276:	2200      	movs	r2, #0
 8001278:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 800127a:	4b20      	ldr	r3, [pc, #128]	; (80012fc <MX_TIM2_Init+0xc4>)
 800127c:	f04f 32ff 	mov.w	r2, #4294967295
 8001280:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001282:	4b1e      	ldr	r3, [pc, #120]	; (80012fc <MX_TIM2_Init+0xc4>)
 8001284:	2200      	movs	r2, #0
 8001286:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001288:	4b1c      	ldr	r3, [pc, #112]	; (80012fc <MX_TIM2_Init+0xc4>)
 800128a:	2200      	movs	r2, #0
 800128c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800128e:	481b      	ldr	r0, [pc, #108]	; (80012fc <MX_TIM2_Init+0xc4>)
 8001290:	f002 feed 	bl	800406e <HAL_TIM_Base_Init>
 8001294:	4603      	mov	r3, r0
 8001296:	2b00      	cmp	r3, #0
 8001298:	d001      	beq.n	800129e <MX_TIM2_Init+0x66>
  {
    Error_Handler();
 800129a:	f000 f945 	bl	8001528 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800129e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80012a2:	623b      	str	r3, [r7, #32]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80012a4:	f107 0320 	add.w	r3, r7, #32
 80012a8:	4619      	mov	r1, r3
 80012aa:	4814      	ldr	r0, [pc, #80]	; (80012fc <MX_TIM2_Init+0xc4>)
 80012ac:	f003 f8a9 	bl	8004402 <HAL_TIM_ConfigClockSource>
 80012b0:	4603      	mov	r3, r0
 80012b2:	2b00      	cmp	r3, #0
 80012b4:	d001      	beq.n	80012ba <MX_TIM2_Init+0x82>
  {
    Error_Handler();
 80012b6:	f000 f937 	bl	8001528 <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_DISABLE;
 80012ba:	2300      	movs	r3, #0
 80012bc:	60fb      	str	r3, [r7, #12]
  sSlaveConfig.InputTrigger = TIM_TS_ITR0;
 80012be:	2300      	movs	r3, #0
 80012c0:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_SlaveConfigSynchro(&htim2, &sSlaveConfig) != HAL_OK)
 80012c2:	f107 030c 	add.w	r3, r7, #12
 80012c6:	4619      	mov	r1, r3
 80012c8:	480c      	ldr	r0, [pc, #48]	; (80012fc <MX_TIM2_Init+0xc4>)
 80012ca:	f003 f963 	bl	8004594 <HAL_TIM_SlaveConfigSynchro>
 80012ce:	4603      	mov	r3, r0
 80012d0:	2b00      	cmp	r3, #0
 80012d2:	d001      	beq.n	80012d8 <MX_TIM2_Init+0xa0>
  {
    Error_Handler();
 80012d4:	f000 f928 	bl	8001528 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80012d8:	2300      	movs	r3, #0
 80012da:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80012dc:	2300      	movs	r3, #0
 80012de:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80012e0:	463b      	mov	r3, r7
 80012e2:	4619      	mov	r1, r3
 80012e4:	4805      	ldr	r0, [pc, #20]	; (80012fc <MX_TIM2_Init+0xc4>)
 80012e6:	f003 fb51 	bl	800498c <HAL_TIMEx_MasterConfigSynchronization>
 80012ea:	4603      	mov	r3, r0
 80012ec:	2b00      	cmp	r3, #0
 80012ee:	d001      	beq.n	80012f4 <MX_TIM2_Init+0xbc>
  {
    Error_Handler();
 80012f0:	f000 f91a 	bl	8001528 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80012f4:	bf00      	nop
 80012f6:	3730      	adds	r7, #48	; 0x30
 80012f8:	46bd      	mov	sp, r7
 80012fa:	bd80      	pop	{r7, pc}
 80012fc:	200002bc 	.word	0x200002bc

08001300 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001300:	b580      	push	{r7, lr}
 8001302:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001304:	4b14      	ldr	r3, [pc, #80]	; (8001358 <MX_USART2_UART_Init+0x58>)
 8001306:	4a15      	ldr	r2, [pc, #84]	; (800135c <MX_USART2_UART_Init+0x5c>)
 8001308:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800130a:	4b13      	ldr	r3, [pc, #76]	; (8001358 <MX_USART2_UART_Init+0x58>)
 800130c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001310:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001312:	4b11      	ldr	r3, [pc, #68]	; (8001358 <MX_USART2_UART_Init+0x58>)
 8001314:	2200      	movs	r2, #0
 8001316:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001318:	4b0f      	ldr	r3, [pc, #60]	; (8001358 <MX_USART2_UART_Init+0x58>)
 800131a:	2200      	movs	r2, #0
 800131c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800131e:	4b0e      	ldr	r3, [pc, #56]	; (8001358 <MX_USART2_UART_Init+0x58>)
 8001320:	2200      	movs	r2, #0
 8001322:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001324:	4b0c      	ldr	r3, [pc, #48]	; (8001358 <MX_USART2_UART_Init+0x58>)
 8001326:	220c      	movs	r2, #12
 8001328:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800132a:	4b0b      	ldr	r3, [pc, #44]	; (8001358 <MX_USART2_UART_Init+0x58>)
 800132c:	2200      	movs	r2, #0
 800132e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001330:	4b09      	ldr	r3, [pc, #36]	; (8001358 <MX_USART2_UART_Init+0x58>)
 8001332:	2200      	movs	r2, #0
 8001334:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001336:	4b08      	ldr	r3, [pc, #32]	; (8001358 <MX_USART2_UART_Init+0x58>)
 8001338:	2200      	movs	r2, #0
 800133a:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800133c:	4b06      	ldr	r3, [pc, #24]	; (8001358 <MX_USART2_UART_Init+0x58>)
 800133e:	2200      	movs	r2, #0
 8001340:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001342:	4805      	ldr	r0, [pc, #20]	; (8001358 <MX_USART2_UART_Init+0x58>)
 8001344:	f003 fba6 	bl	8004a94 <HAL_UART_Init>
 8001348:	4603      	mov	r3, r0
 800134a:	2b00      	cmp	r3, #0
 800134c:	d001      	beq.n	8001352 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 800134e:	f000 f8eb 	bl	8001528 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001352:	bf00      	nop
 8001354:	bd80      	pop	{r7, pc}
 8001356:	bf00      	nop
 8001358:	20000308 	.word	0x20000308
 800135c:	40004400 	.word	0x40004400

08001360 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001360:	b580      	push	{r7, lr}
 8001362:	b088      	sub	sp, #32
 8001364:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001366:	f107 030c 	add.w	r3, r7, #12
 800136a:	2200      	movs	r2, #0
 800136c:	601a      	str	r2, [r3, #0]
 800136e:	605a      	str	r2, [r3, #4]
 8001370:	609a      	str	r2, [r3, #8]
 8001372:	60da      	str	r2, [r3, #12]
 8001374:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001376:	4b1d      	ldr	r3, [pc, #116]	; (80013ec <MX_GPIO_Init+0x8c>)
 8001378:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800137a:	4a1c      	ldr	r2, [pc, #112]	; (80013ec <MX_GPIO_Init+0x8c>)
 800137c:	f043 0304 	orr.w	r3, r3, #4
 8001380:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001382:	4b1a      	ldr	r3, [pc, #104]	; (80013ec <MX_GPIO_Init+0x8c>)
 8001384:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001386:	f003 0304 	and.w	r3, r3, #4
 800138a:	60bb      	str	r3, [r7, #8]
 800138c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800138e:	4b17      	ldr	r3, [pc, #92]	; (80013ec <MX_GPIO_Init+0x8c>)
 8001390:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001392:	4a16      	ldr	r2, [pc, #88]	; (80013ec <MX_GPIO_Init+0x8c>)
 8001394:	f043 0301 	orr.w	r3, r3, #1
 8001398:	64d3      	str	r3, [r2, #76]	; 0x4c
 800139a:	4b14      	ldr	r3, [pc, #80]	; (80013ec <MX_GPIO_Init+0x8c>)
 800139c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800139e:	f003 0301 	and.w	r3, r3, #1
 80013a2:	607b      	str	r3, [r7, #4]
 80013a4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80013a6:	4b11      	ldr	r3, [pc, #68]	; (80013ec <MX_GPIO_Init+0x8c>)
 80013a8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80013aa:	4a10      	ldr	r2, [pc, #64]	; (80013ec <MX_GPIO_Init+0x8c>)
 80013ac:	f043 0302 	orr.w	r3, r3, #2
 80013b0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80013b2:	4b0e      	ldr	r3, [pc, #56]	; (80013ec <MX_GPIO_Init+0x8c>)
 80013b4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80013b6:	f003 0302 	and.w	r3, r3, #2
 80013ba:	603b      	str	r3, [r7, #0]
 80013bc:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_RESET);
 80013be:	2200      	movs	r2, #0
 80013c0:	2108      	movs	r1, #8
 80013c2:	480b      	ldr	r0, [pc, #44]	; (80013f0 <MX_GPIO_Init+0x90>)
 80013c4:	f000 fe38 	bl	8002038 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LD3_Pin */
  GPIO_InitStruct.Pin = LD3_Pin;
 80013c8:	2308      	movs	r3, #8
 80013ca:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80013cc:	2301      	movs	r3, #1
 80013ce:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013d0:	2300      	movs	r3, #0
 80013d2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013d4:	2300      	movs	r3, #0
 80013d6:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(LD3_GPIO_Port, &GPIO_InitStruct);
 80013d8:	f107 030c 	add.w	r3, r7, #12
 80013dc:	4619      	mov	r1, r3
 80013de:	4804      	ldr	r0, [pc, #16]	; (80013f0 <MX_GPIO_Init+0x90>)
 80013e0:	f000 fcc0 	bl	8001d64 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80013e4:	bf00      	nop
 80013e6:	3720      	adds	r7, #32
 80013e8:	46bd      	mov	sp, r7
 80013ea:	bd80      	pop	{r7, pc}
 80013ec:	40021000 	.word	0x40021000
 80013f0:	48000400 	.word	0x48000400

080013f4 <ReadSensorData>:

/* USER CODE BEGIN 4 */

void ReadSensorData(void)
{
 80013f4:	b580      	push	{r7, lr}
 80013f6:	b084      	sub	sp, #16
 80013f8:	af02      	add	r7, sp, #8
    uint8_t sensorAddress = 0x40 << 1;  // shift left to account for R/W bit
 80013fa:	2380      	movs	r3, #128	; 0x80
 80013fc:	71fb      	strb	r3, [r7, #7]

    uint8_t readHumidity = 0xF5;
 80013fe:	23f5      	movs	r3, #245	; 0xf5
 8001400:	70fb      	strb	r3, [r7, #3]

    HAL_I2C_Master_Transmit(&hi2c1, sensorAddress, &readHumidity, 1, HAL_MAX_DELAY);
 8001402:	79fb      	ldrb	r3, [r7, #7]
 8001404:	b299      	uxth	r1, r3
 8001406:	1cfa      	adds	r2, r7, #3
 8001408:	f04f 33ff 	mov.w	r3, #4294967295
 800140c:	9300      	str	r3, [sp, #0]
 800140e:	2301      	movs	r3, #1
 8001410:	4817      	ldr	r0, [pc, #92]	; (8001470 <ReadSensorData+0x7c>)
 8001412:	f000 feb9 	bl	8002188 <HAL_I2C_Master_Transmit>
    HAL_Delay(20);
 8001416:	2014      	movs	r0, #20
 8001418:	f000 fb9e 	bl	8001b58 <HAL_Delay>

    uint8_t rawData[2];  // raw data is unreadable by itself, needs 16 bits see below
    HAL_I2C_Master_Receive(&hi2c1, sensorAddress, rawData, 2, HAL_MAX_DELAY);
 800141c:	79fb      	ldrb	r3, [r7, #7]
 800141e:	b299      	uxth	r1, r3
 8001420:	463a      	mov	r2, r7
 8001422:	f04f 33ff 	mov.w	r3, #4294967295
 8001426:	9300      	str	r3, [sp, #0]
 8001428:	2302      	movs	r3, #2
 800142a:	4811      	ldr	r0, [pc, #68]	; (8001470 <ReadSensorData+0x7c>)
 800142c:	f000 ffa0 	bl	8002370 <HAL_I2C_Master_Receive>

    uint16_t rh = (rawData[0] << 8) | rawData[1];
 8001430:	783b      	ldrb	r3, [r7, #0]
 8001432:	021b      	lsls	r3, r3, #8
 8001434:	b21a      	sxth	r2, r3
 8001436:	787b      	ldrb	r3, [r7, #1]
 8001438:	b21b      	sxth	r3, r3
 800143a:	4313      	orrs	r3, r2
 800143c:	b21b      	sxth	r3, r3
 800143e:	80bb      	strh	r3, [r7, #4]
     */




    humidity = -6 + 125 * ((float)rh / 65536);  // Conversion formula from datasheet
 8001440:	88bb      	ldrh	r3, [r7, #4]
 8001442:	ee07 3a90 	vmov	s15, r3
 8001446:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800144a:	eddf 6a0a 	vldr	s13, [pc, #40]	; 8001474 <ReadSensorData+0x80>
 800144e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001452:	ed9f 7a09 	vldr	s14, [pc, #36]	; 8001478 <ReadSensorData+0x84>
 8001456:	ee67 7a87 	vmul.f32	s15, s15, s14
 800145a:	eeb1 7a08 	vmov.f32	s14, #24	; 0x40c00000  6.0
 800145e:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8001462:	4b06      	ldr	r3, [pc, #24]	; (800147c <ReadSensorData+0x88>)
 8001464:	edc3 7a00 	vstr	s15, [r3]
}
 8001468:	bf00      	nop
 800146a:	3708      	adds	r7, #8
 800146c:	46bd      	mov	sp, r7
 800146e:	bd80      	pop	{r7, pc}
 8001470:	20000204 	.word	0x20000204
 8001474:	47800000 	.word	0x47800000
 8001478:	42fa0000 	.word	0x42fa0000
 800147c:	20000200 	.word	0x20000200

08001480 <CheckOutp>:


void CheckOutp(void){
 8001480:	b580      	push	{r7, lr}
 8001482:	b08e      	sub	sp, #56	; 0x38
 8001484:	af00      	add	r7, sp, #0

	  while(1) {

	         char message[50];
	         uint8_t len;
	         len = sprintf(message, "Luftfeuchtigkeit test: %.2f %%\r\n", humidity);
 8001486:	4b0e      	ldr	r3, [pc, #56]	; (80014c0 <CheckOutp+0x40>)
 8001488:	681b      	ldr	r3, [r3, #0]
 800148a:	4618      	mov	r0, r3
 800148c:	f7ff f85c 	bl	8000548 <__aeabi_f2d>
 8001490:	4602      	mov	r2, r0
 8001492:	460b      	mov	r3, r1
 8001494:	1d38      	adds	r0, r7, #4
 8001496:	490b      	ldr	r1, [pc, #44]	; (80014c4 <CheckOutp+0x44>)
 8001498:	f007 fe40 	bl	800911c <siprintf>
 800149c:	4603      	mov	r3, r0
 800149e:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37


	         HAL_UART_Transmit(&huart2, (uint8_t*)message, len, HAL_MAX_DELAY);
 80014a2:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80014a6:	b29a      	uxth	r2, r3
 80014a8:	1d39      	adds	r1, r7, #4
 80014aa:	f04f 33ff 	mov.w	r3, #4294967295
 80014ae:	4806      	ldr	r0, [pc, #24]	; (80014c8 <CheckOutp+0x48>)
 80014b0:	f003 fb3e 	bl	8004b30 <HAL_UART_Transmit>

	         osDelay(1000);
 80014b4:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80014b8:	f004 f8ca 	bl	8005650 <osDelay>
	  while(1) {
 80014bc:	e7e3      	b.n	8001486 <CheckOutp+0x6>
 80014be:	bf00      	nop
 80014c0:	20000200 	.word	0x20000200
 80014c4:	0800c9ec 	.word	0x0800c9ec
 80014c8:	20000308 	.word	0x20000308

080014cc <StartCheckOutp>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartCheckOutp */
void StartCheckOutp(void *argument)
{
 80014cc:	b580      	push	{r7, lr}
 80014ce:	b082      	sub	sp, #8
 80014d0:	af00      	add	r7, sp, #0
 80014d2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
	CheckOutp();
 80014d4:	f7ff ffd4 	bl	8001480 <CheckOutp>
    osDelay(1);
 80014d8:	2001      	movs	r0, #1
 80014da:	f004 f8b9 	bl	8005650 <osDelay>
	CheckOutp();
 80014de:	e7f9      	b.n	80014d4 <StartCheckOutp+0x8>

080014e0 <StartReadSensor>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartReadSensor */
void StartReadSensor(void *argument)
{
 80014e0:	b580      	push	{r7, lr}
 80014e2:	b082      	sub	sp, #8
 80014e4:	af00      	add	r7, sp, #0
 80014e6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartReadSensor */
  /* Infinite loop */
  for(;;)
  {
	ReadSensorData();
 80014e8:	f7ff ff84 	bl	80013f4 <ReadSensorData>
    osDelay(1);
 80014ec:	2001      	movs	r0, #1
 80014ee:	f004 f8af 	bl	8005650 <osDelay>
	ReadSensorData();
 80014f2:	e7f9      	b.n	80014e8 <StartReadSensor+0x8>

080014f4 <StartSendData>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartSendData */
void StartSendData(void *argument)
{
 80014f4:	b580      	push	{r7, lr}
 80014f6:	b082      	sub	sp, #8
 80014f8:	af00      	add	r7, sp, #0
 80014fa:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartSendData */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 80014fc:	2001      	movs	r0, #1
 80014fe:	f004 f8a7 	bl	8005650 <osDelay>
 8001502:	e7fb      	b.n	80014fc <StartSendData+0x8>

08001504 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001504:	b580      	push	{r7, lr}
 8001506:	b082      	sub	sp, #8
 8001508:	af00      	add	r7, sp, #0
 800150a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM15) {
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	681b      	ldr	r3, [r3, #0]
 8001510:	4a04      	ldr	r2, [pc, #16]	; (8001524 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8001512:	4293      	cmp	r3, r2
 8001514:	d101      	bne.n	800151a <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8001516:	f000 faff 	bl	8001b18 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 800151a:	bf00      	nop
 800151c:	3708      	adds	r7, #8
 800151e:	46bd      	mov	sp, r7
 8001520:	bd80      	pop	{r7, pc}
 8001522:	bf00      	nop
 8001524:	40014000 	.word	0x40014000

08001528 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001528:	b480      	push	{r7}
 800152a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800152c:	b672      	cpsid	i
}
 800152e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001530:	e7fe      	b.n	8001530 <Error_Handler+0x8>
	...

08001534 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001534:	b580      	push	{r7, lr}
 8001536:	b082      	sub	sp, #8
 8001538:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800153a:	4b11      	ldr	r3, [pc, #68]	; (8001580 <HAL_MspInit+0x4c>)
 800153c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800153e:	4a10      	ldr	r2, [pc, #64]	; (8001580 <HAL_MspInit+0x4c>)
 8001540:	f043 0301 	orr.w	r3, r3, #1
 8001544:	6613      	str	r3, [r2, #96]	; 0x60
 8001546:	4b0e      	ldr	r3, [pc, #56]	; (8001580 <HAL_MspInit+0x4c>)
 8001548:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800154a:	f003 0301 	and.w	r3, r3, #1
 800154e:	607b      	str	r3, [r7, #4]
 8001550:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001552:	4b0b      	ldr	r3, [pc, #44]	; (8001580 <HAL_MspInit+0x4c>)
 8001554:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001556:	4a0a      	ldr	r2, [pc, #40]	; (8001580 <HAL_MspInit+0x4c>)
 8001558:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800155c:	6593      	str	r3, [r2, #88]	; 0x58
 800155e:	4b08      	ldr	r3, [pc, #32]	; (8001580 <HAL_MspInit+0x4c>)
 8001560:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001562:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001566:	603b      	str	r3, [r7, #0]
 8001568:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800156a:	2200      	movs	r2, #0
 800156c:	210f      	movs	r1, #15
 800156e:	f06f 0001 	mvn.w	r0, #1
 8001572:	f000 fbcd 	bl	8001d10 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001576:	bf00      	nop
 8001578:	3708      	adds	r7, #8
 800157a:	46bd      	mov	sp, r7
 800157c:	bd80      	pop	{r7, pc}
 800157e:	bf00      	nop
 8001580:	40021000 	.word	0x40021000

08001584 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001584:	b580      	push	{r7, lr}
 8001586:	b09e      	sub	sp, #120	; 0x78
 8001588:	af00      	add	r7, sp, #0
 800158a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800158c:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8001590:	2200      	movs	r2, #0
 8001592:	601a      	str	r2, [r3, #0]
 8001594:	605a      	str	r2, [r3, #4]
 8001596:	609a      	str	r2, [r3, #8]
 8001598:	60da      	str	r2, [r3, #12]
 800159a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800159c:	f107 0310 	add.w	r3, r7, #16
 80015a0:	2254      	movs	r2, #84	; 0x54
 80015a2:	2100      	movs	r1, #0
 80015a4:	4618      	mov	r0, r3
 80015a6:	f006 fe22 	bl	80081ee <memset>
  if(hi2c->Instance==I2C1)
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	681b      	ldr	r3, [r3, #0]
 80015ae:	4a1e      	ldr	r2, [pc, #120]	; (8001628 <HAL_I2C_MspInit+0xa4>)
 80015b0:	4293      	cmp	r3, r2
 80015b2:	d135      	bne.n	8001620 <HAL_I2C_MspInit+0x9c>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 80015b4:	2340      	movs	r3, #64	; 0x40
 80015b6:	613b      	str	r3, [r7, #16]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 80015b8:	2300      	movs	r3, #0
 80015ba:	63fb      	str	r3, [r7, #60]	; 0x3c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80015bc:	f107 0310 	add.w	r3, r7, #16
 80015c0:	4618      	mov	r0, r3
 80015c2:	f002 f9b9 	bl	8003938 <HAL_RCCEx_PeriphCLKConfig>
 80015c6:	4603      	mov	r3, r0
 80015c8:	2b00      	cmp	r3, #0
 80015ca:	d001      	beq.n	80015d0 <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 80015cc:	f7ff ffac 	bl	8001528 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80015d0:	4b16      	ldr	r3, [pc, #88]	; (800162c <HAL_I2C_MspInit+0xa8>)
 80015d2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80015d4:	4a15      	ldr	r2, [pc, #84]	; (800162c <HAL_I2C_MspInit+0xa8>)
 80015d6:	f043 0302 	orr.w	r3, r3, #2
 80015da:	64d3      	str	r3, [r2, #76]	; 0x4c
 80015dc:	4b13      	ldr	r3, [pc, #76]	; (800162c <HAL_I2C_MspInit+0xa8>)
 80015de:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80015e0:	f003 0302 	and.w	r3, r3, #2
 80015e4:	60fb      	str	r3, [r7, #12]
 80015e6:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80015e8:	23c0      	movs	r3, #192	; 0xc0
 80015ea:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80015ec:	2312      	movs	r3, #18
 80015ee:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015f0:	2300      	movs	r3, #0
 80015f2:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80015f4:	2303      	movs	r3, #3
 80015f6:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80015f8:	2304      	movs	r3, #4
 80015fa:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80015fc:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8001600:	4619      	mov	r1, r3
 8001602:	480b      	ldr	r0, [pc, #44]	; (8001630 <HAL_I2C_MspInit+0xac>)
 8001604:	f000 fbae 	bl	8001d64 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001608:	4b08      	ldr	r3, [pc, #32]	; (800162c <HAL_I2C_MspInit+0xa8>)
 800160a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800160c:	4a07      	ldr	r2, [pc, #28]	; (800162c <HAL_I2C_MspInit+0xa8>)
 800160e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001612:	6593      	str	r3, [r2, #88]	; 0x58
 8001614:	4b05      	ldr	r3, [pc, #20]	; (800162c <HAL_I2C_MspInit+0xa8>)
 8001616:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001618:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800161c:	60bb      	str	r3, [r7, #8]
 800161e:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8001620:	bf00      	nop
 8001622:	3778      	adds	r7, #120	; 0x78
 8001624:	46bd      	mov	sp, r7
 8001626:	bd80      	pop	{r7, pc}
 8001628:	40005400 	.word	0x40005400
 800162c:	40021000 	.word	0x40021000
 8001630:	48000400 	.word	0x48000400

08001634 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001634:	b580      	push	{r7, lr}
 8001636:	b08a      	sub	sp, #40	; 0x28
 8001638:	af00      	add	r7, sp, #0
 800163a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800163c:	f107 0314 	add.w	r3, r7, #20
 8001640:	2200      	movs	r2, #0
 8001642:	601a      	str	r2, [r3, #0]
 8001644:	605a      	str	r2, [r3, #4]
 8001646:	609a      	str	r2, [r3, #8]
 8001648:	60da      	str	r2, [r3, #12]
 800164a:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	681b      	ldr	r3, [r3, #0]
 8001650:	4a17      	ldr	r2, [pc, #92]	; (80016b0 <HAL_SPI_MspInit+0x7c>)
 8001652:	4293      	cmp	r3, r2
 8001654:	d128      	bne.n	80016a8 <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001656:	4b17      	ldr	r3, [pc, #92]	; (80016b4 <HAL_SPI_MspInit+0x80>)
 8001658:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800165a:	4a16      	ldr	r2, [pc, #88]	; (80016b4 <HAL_SPI_MspInit+0x80>)
 800165c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001660:	6613      	str	r3, [r2, #96]	; 0x60
 8001662:	4b14      	ldr	r3, [pc, #80]	; (80016b4 <HAL_SPI_MspInit+0x80>)
 8001664:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001666:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800166a:	613b      	str	r3, [r7, #16]
 800166c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800166e:	4b11      	ldr	r3, [pc, #68]	; (80016b4 <HAL_SPI_MspInit+0x80>)
 8001670:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001672:	4a10      	ldr	r2, [pc, #64]	; (80016b4 <HAL_SPI_MspInit+0x80>)
 8001674:	f043 0301 	orr.w	r3, r3, #1
 8001678:	64d3      	str	r3, [r2, #76]	; 0x4c
 800167a:	4b0e      	ldr	r3, [pc, #56]	; (80016b4 <HAL_SPI_MspInit+0x80>)
 800167c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800167e:	f003 0301 	and.w	r3, r3, #1
 8001682:	60fb      	str	r3, [r7, #12]
 8001684:	68fb      	ldr	r3, [r7, #12]
    PA4     ------> SPI1_NSS
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8001686:	23f0      	movs	r3, #240	; 0xf0
 8001688:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800168a:	2302      	movs	r3, #2
 800168c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800168e:	2300      	movs	r3, #0
 8001690:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001692:	2303      	movs	r3, #3
 8001694:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001696:	2305      	movs	r3, #5
 8001698:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800169a:	f107 0314 	add.w	r3, r7, #20
 800169e:	4619      	mov	r1, r3
 80016a0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80016a4:	f000 fb5e 	bl	8001d64 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 80016a8:	bf00      	nop
 80016aa:	3728      	adds	r7, #40	; 0x28
 80016ac:	46bd      	mov	sp, r7
 80016ae:	bd80      	pop	{r7, pc}
 80016b0:	40013000 	.word	0x40013000
 80016b4:	40021000 	.word	0x40021000

080016b8 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80016b8:	b480      	push	{r7}
 80016ba:	b085      	sub	sp, #20
 80016bc:	af00      	add	r7, sp, #0
 80016be:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	681b      	ldr	r3, [r3, #0]
 80016c4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80016c8:	d10b      	bne.n	80016e2 <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80016ca:	4b09      	ldr	r3, [pc, #36]	; (80016f0 <HAL_TIM_Base_MspInit+0x38>)
 80016cc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80016ce:	4a08      	ldr	r2, [pc, #32]	; (80016f0 <HAL_TIM_Base_MspInit+0x38>)
 80016d0:	f043 0301 	orr.w	r3, r3, #1
 80016d4:	6593      	str	r3, [r2, #88]	; 0x58
 80016d6:	4b06      	ldr	r3, [pc, #24]	; (80016f0 <HAL_TIM_Base_MspInit+0x38>)
 80016d8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80016da:	f003 0301 	and.w	r3, r3, #1
 80016de:	60fb      	str	r3, [r7, #12]
 80016e0:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 80016e2:	bf00      	nop
 80016e4:	3714      	adds	r7, #20
 80016e6:	46bd      	mov	sp, r7
 80016e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016ec:	4770      	bx	lr
 80016ee:	bf00      	nop
 80016f0:	40021000 	.word	0x40021000

080016f4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80016f4:	b580      	push	{r7, lr}
 80016f6:	b09e      	sub	sp, #120	; 0x78
 80016f8:	af00      	add	r7, sp, #0
 80016fa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80016fc:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8001700:	2200      	movs	r2, #0
 8001702:	601a      	str	r2, [r3, #0]
 8001704:	605a      	str	r2, [r3, #4]
 8001706:	609a      	str	r2, [r3, #8]
 8001708:	60da      	str	r2, [r3, #12]
 800170a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800170c:	f107 0310 	add.w	r3, r7, #16
 8001710:	2254      	movs	r2, #84	; 0x54
 8001712:	2100      	movs	r1, #0
 8001714:	4618      	mov	r0, r3
 8001716:	f006 fd6a 	bl	80081ee <memset>
  if(huart->Instance==USART2)
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	681b      	ldr	r3, [r3, #0]
 800171e:	4a28      	ldr	r2, [pc, #160]	; (80017c0 <HAL_UART_MspInit+0xcc>)
 8001720:	4293      	cmp	r3, r2
 8001722:	d148      	bne.n	80017b6 <HAL_UART_MspInit+0xc2>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8001724:	2302      	movs	r3, #2
 8001726:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8001728:	2300      	movs	r3, #0
 800172a:	637b      	str	r3, [r7, #52]	; 0x34
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800172c:	f107 0310 	add.w	r3, r7, #16
 8001730:	4618      	mov	r0, r3
 8001732:	f002 f901 	bl	8003938 <HAL_RCCEx_PeriphCLKConfig>
 8001736:	4603      	mov	r3, r0
 8001738:	2b00      	cmp	r3, #0
 800173a:	d001      	beq.n	8001740 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 800173c:	f7ff fef4 	bl	8001528 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001740:	4b20      	ldr	r3, [pc, #128]	; (80017c4 <HAL_UART_MspInit+0xd0>)
 8001742:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001744:	4a1f      	ldr	r2, [pc, #124]	; (80017c4 <HAL_UART_MspInit+0xd0>)
 8001746:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800174a:	6593      	str	r3, [r2, #88]	; 0x58
 800174c:	4b1d      	ldr	r3, [pc, #116]	; (80017c4 <HAL_UART_MspInit+0xd0>)
 800174e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001750:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001754:	60fb      	str	r3, [r7, #12]
 8001756:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001758:	4b1a      	ldr	r3, [pc, #104]	; (80017c4 <HAL_UART_MspInit+0xd0>)
 800175a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800175c:	4a19      	ldr	r2, [pc, #100]	; (80017c4 <HAL_UART_MspInit+0xd0>)
 800175e:	f043 0301 	orr.w	r3, r3, #1
 8001762:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001764:	4b17      	ldr	r3, [pc, #92]	; (80017c4 <HAL_UART_MspInit+0xd0>)
 8001766:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001768:	f003 0301 	and.w	r3, r3, #1
 800176c:	60bb      	str	r3, [r7, #8]
 800176e:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA15 (JTDI)     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = VCP_TX_Pin;
 8001770:	2304      	movs	r3, #4
 8001772:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001774:	2302      	movs	r3, #2
 8001776:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001778:	2300      	movs	r3, #0
 800177a:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800177c:	2303      	movs	r3, #3
 800177e:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001780:	2307      	movs	r3, #7
 8001782:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(VCP_TX_GPIO_Port, &GPIO_InitStruct);
 8001784:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8001788:	4619      	mov	r1, r3
 800178a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800178e:	f000 fae9 	bl	8001d64 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = VCP_RX_Pin;
 8001792:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001796:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001798:	2302      	movs	r3, #2
 800179a:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800179c:	2300      	movs	r3, #0
 800179e:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80017a0:	2303      	movs	r3, #3
 80017a2:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Alternate = GPIO_AF3_USART2;
 80017a4:	2303      	movs	r3, #3
 80017a6:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(VCP_RX_GPIO_Port, &GPIO_InitStruct);
 80017a8:	f107 0364 	add.w	r3, r7, #100	; 0x64
 80017ac:	4619      	mov	r1, r3
 80017ae:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80017b2:	f000 fad7 	bl	8001d64 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80017b6:	bf00      	nop
 80017b8:	3778      	adds	r7, #120	; 0x78
 80017ba:	46bd      	mov	sp, r7
 80017bc:	bd80      	pop	{r7, pc}
 80017be:	bf00      	nop
 80017c0:	40004400 	.word	0x40004400
 80017c4:	40021000 	.word	0x40021000

080017c8 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80017c8:	b580      	push	{r7, lr}
 80017ca:	b08c      	sub	sp, #48	; 0x30
 80017cc:	af00      	add	r7, sp, #0
 80017ce:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock;

  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status = HAL_OK;
 80017d0:	2300      	movs	r3, #0
 80017d2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

  /* Enable TIM15 clock */
  __HAL_RCC_TIM15_CLK_ENABLE();
 80017d6:	4b2e      	ldr	r3, [pc, #184]	; (8001890 <HAL_InitTick+0xc8>)
 80017d8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80017da:	4a2d      	ldr	r2, [pc, #180]	; (8001890 <HAL_InitTick+0xc8>)
 80017dc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80017e0:	6613      	str	r3, [r2, #96]	; 0x60
 80017e2:	4b2b      	ldr	r3, [pc, #172]	; (8001890 <HAL_InitTick+0xc8>)
 80017e4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80017e6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80017ea:	60bb      	str	r3, [r7, #8]
 80017ec:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80017ee:	f107 020c 	add.w	r2, r7, #12
 80017f2:	f107 0310 	add.w	r3, r7, #16
 80017f6:	4611      	mov	r1, r2
 80017f8:	4618      	mov	r0, r3
 80017fa:	f002 f80b 	bl	8003814 <HAL_RCC_GetClockConfig>

  /* Compute TIM15 clock */
      uwTimclock = HAL_RCC_GetPCLK2Freq();
 80017fe:	f001 fff3 	bl	80037e8 <HAL_RCC_GetPCLK2Freq>
 8001802:	62b8      	str	r0, [r7, #40]	; 0x28

  /* Compute the prescaler value to have TIM15 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001804:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001806:	4a23      	ldr	r2, [pc, #140]	; (8001894 <HAL_InitTick+0xcc>)
 8001808:	fba2 2303 	umull	r2, r3, r2, r3
 800180c:	0c9b      	lsrs	r3, r3, #18
 800180e:	3b01      	subs	r3, #1
 8001810:	627b      	str	r3, [r7, #36]	; 0x24

  /* Initialize TIM15 */
  htim15.Instance = TIM15;
 8001812:	4b21      	ldr	r3, [pc, #132]	; (8001898 <HAL_InitTick+0xd0>)
 8001814:	4a21      	ldr	r2, [pc, #132]	; (800189c <HAL_InitTick+0xd4>)
 8001816:	601a      	str	r2, [r3, #0]
  + Period = [(TIM15CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim15.Init.Period = (1000000U / 1000U) - 1U;
 8001818:	4b1f      	ldr	r3, [pc, #124]	; (8001898 <HAL_InitTick+0xd0>)
 800181a:	f240 32e7 	movw	r2, #999	; 0x3e7
 800181e:	60da      	str	r2, [r3, #12]
  htim15.Init.Prescaler = uwPrescalerValue;
 8001820:	4a1d      	ldr	r2, [pc, #116]	; (8001898 <HAL_InitTick+0xd0>)
 8001822:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001824:	6053      	str	r3, [r2, #4]
  htim15.Init.ClockDivision = 0;
 8001826:	4b1c      	ldr	r3, [pc, #112]	; (8001898 <HAL_InitTick+0xd0>)
 8001828:	2200      	movs	r2, #0
 800182a:	611a      	str	r2, [r3, #16]
  htim15.Init.CounterMode = TIM_COUNTERMODE_UP;
 800182c:	4b1a      	ldr	r3, [pc, #104]	; (8001898 <HAL_InitTick+0xd0>)
 800182e:	2200      	movs	r2, #0
 8001830:	609a      	str	r2, [r3, #8]
  htim15.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001832:	4b19      	ldr	r3, [pc, #100]	; (8001898 <HAL_InitTick+0xd0>)
 8001834:	2200      	movs	r2, #0
 8001836:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim15);
 8001838:	4817      	ldr	r0, [pc, #92]	; (8001898 <HAL_InitTick+0xd0>)
 800183a:	f002 fc18 	bl	800406e <HAL_TIM_Base_Init>
 800183e:	4603      	mov	r3, r0
 8001840:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  if (status == HAL_OK)
 8001844:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8001848:	2b00      	cmp	r3, #0
 800184a:	d11b      	bne.n	8001884 <HAL_InitTick+0xbc>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim15);
 800184c:	4812      	ldr	r0, [pc, #72]	; (8001898 <HAL_InitTick+0xd0>)
 800184e:	f002 fc65 	bl	800411c <HAL_TIM_Base_Start_IT>
 8001852:	4603      	mov	r3, r0
 8001854:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    if (status == HAL_OK)
 8001858:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800185c:	2b00      	cmp	r3, #0
 800185e:	d111      	bne.n	8001884 <HAL_InitTick+0xbc>
    {
    /* Enable the TIM15 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_BRK_TIM15_IRQn);
 8001860:	2018      	movs	r0, #24
 8001862:	f000 fa71 	bl	8001d48 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	2b0f      	cmp	r3, #15
 800186a:	d808      	bhi.n	800187e <HAL_InitTick+0xb6>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_BRK_TIM15_IRQn, TickPriority, 0U);
 800186c:	2200      	movs	r2, #0
 800186e:	6879      	ldr	r1, [r7, #4]
 8001870:	2018      	movs	r0, #24
 8001872:	f000 fa4d 	bl	8001d10 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001876:	4a0a      	ldr	r2, [pc, #40]	; (80018a0 <HAL_InitTick+0xd8>)
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	6013      	str	r3, [r2, #0]
 800187c:	e002      	b.n	8001884 <HAL_InitTick+0xbc>
      }
      else
      {
        status = HAL_ERROR;
 800187e:	2301      	movs	r3, #1
 8001880:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 8001884:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8001888:	4618      	mov	r0, r3
 800188a:	3730      	adds	r7, #48	; 0x30
 800188c:	46bd      	mov	sp, r7
 800188e:	bd80      	pop	{r7, pc}
 8001890:	40021000 	.word	0x40021000
 8001894:	431bde83 	.word	0x431bde83
 8001898:	20000398 	.word	0x20000398
 800189c:	40014000 	.word	0x40014000
 80018a0:	20000004 	.word	0x20000004

080018a4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80018a4:	b480      	push	{r7}
 80018a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80018a8:	e7fe      	b.n	80018a8 <NMI_Handler+0x4>

080018aa <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80018aa:	b480      	push	{r7}
 80018ac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80018ae:	e7fe      	b.n	80018ae <HardFault_Handler+0x4>

080018b0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80018b0:	b480      	push	{r7}
 80018b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80018b4:	e7fe      	b.n	80018b4 <MemManage_Handler+0x4>

080018b6 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80018b6:	b480      	push	{r7}
 80018b8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80018ba:	e7fe      	b.n	80018ba <BusFault_Handler+0x4>

080018bc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80018bc:	b480      	push	{r7}
 80018be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80018c0:	e7fe      	b.n	80018c0 <UsageFault_Handler+0x4>

080018c2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80018c2:	b480      	push	{r7}
 80018c4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80018c6:	bf00      	nop
 80018c8:	46bd      	mov	sp, r7
 80018ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018ce:	4770      	bx	lr

080018d0 <TIM1_BRK_TIM15_IRQHandler>:

/**
  * @brief This function handles TIM1 break interrupt and TIM15 global interrupt.
  */
void TIM1_BRK_TIM15_IRQHandler(void)
{
 80018d0:	b580      	push	{r7, lr}
 80018d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_TIM15_IRQn 0 */

  /* USER CODE END TIM1_BRK_TIM15_IRQn 0 */
  HAL_TIM_IRQHandler(&htim15);
 80018d4:	4802      	ldr	r0, [pc, #8]	; (80018e0 <TIM1_BRK_TIM15_IRQHandler+0x10>)
 80018d6:	f002 fc75 	bl	80041c4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_TIM15_IRQn 1 */

  /* USER CODE END TIM1_BRK_TIM15_IRQn 1 */
}
 80018da:	bf00      	nop
 80018dc:	bd80      	pop	{r7, pc}
 80018de:	bf00      	nop
 80018e0:	20000398 	.word	0x20000398

080018e4 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80018e4:	b480      	push	{r7}
 80018e6:	af00      	add	r7, sp, #0
  return 1;
 80018e8:	2301      	movs	r3, #1
}
 80018ea:	4618      	mov	r0, r3
 80018ec:	46bd      	mov	sp, r7
 80018ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018f2:	4770      	bx	lr

080018f4 <_kill>:

int _kill(int pid, int sig)
{
 80018f4:	b580      	push	{r7, lr}
 80018f6:	b082      	sub	sp, #8
 80018f8:	af00      	add	r7, sp, #0
 80018fa:	6078      	str	r0, [r7, #4]
 80018fc:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80018fe:	f006 fb45 	bl	8007f8c <__errno>
 8001902:	4603      	mov	r3, r0
 8001904:	2216      	movs	r2, #22
 8001906:	601a      	str	r2, [r3, #0]
  return -1;
 8001908:	f04f 33ff 	mov.w	r3, #4294967295
}
 800190c:	4618      	mov	r0, r3
 800190e:	3708      	adds	r7, #8
 8001910:	46bd      	mov	sp, r7
 8001912:	bd80      	pop	{r7, pc}

08001914 <_exit>:

void _exit (int status)
{
 8001914:	b580      	push	{r7, lr}
 8001916:	b082      	sub	sp, #8
 8001918:	af00      	add	r7, sp, #0
 800191a:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 800191c:	f04f 31ff 	mov.w	r1, #4294967295
 8001920:	6878      	ldr	r0, [r7, #4]
 8001922:	f7ff ffe7 	bl	80018f4 <_kill>
  while (1) {}    /* Make sure we hang here */
 8001926:	e7fe      	b.n	8001926 <_exit+0x12>

08001928 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001928:	b580      	push	{r7, lr}
 800192a:	b086      	sub	sp, #24
 800192c:	af00      	add	r7, sp, #0
 800192e:	60f8      	str	r0, [r7, #12]
 8001930:	60b9      	str	r1, [r7, #8]
 8001932:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001934:	2300      	movs	r3, #0
 8001936:	617b      	str	r3, [r7, #20]
 8001938:	e00a      	b.n	8001950 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800193a:	f3af 8000 	nop.w
 800193e:	4601      	mov	r1, r0
 8001940:	68bb      	ldr	r3, [r7, #8]
 8001942:	1c5a      	adds	r2, r3, #1
 8001944:	60ba      	str	r2, [r7, #8]
 8001946:	b2ca      	uxtb	r2, r1
 8001948:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800194a:	697b      	ldr	r3, [r7, #20]
 800194c:	3301      	adds	r3, #1
 800194e:	617b      	str	r3, [r7, #20]
 8001950:	697a      	ldr	r2, [r7, #20]
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	429a      	cmp	r2, r3
 8001956:	dbf0      	blt.n	800193a <_read+0x12>
  }

  return len;
 8001958:	687b      	ldr	r3, [r7, #4]
}
 800195a:	4618      	mov	r0, r3
 800195c:	3718      	adds	r7, #24
 800195e:	46bd      	mov	sp, r7
 8001960:	bd80      	pop	{r7, pc}

08001962 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001962:	b580      	push	{r7, lr}
 8001964:	b086      	sub	sp, #24
 8001966:	af00      	add	r7, sp, #0
 8001968:	60f8      	str	r0, [r7, #12]
 800196a:	60b9      	str	r1, [r7, #8]
 800196c:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800196e:	2300      	movs	r3, #0
 8001970:	617b      	str	r3, [r7, #20]
 8001972:	e009      	b.n	8001988 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001974:	68bb      	ldr	r3, [r7, #8]
 8001976:	1c5a      	adds	r2, r3, #1
 8001978:	60ba      	str	r2, [r7, #8]
 800197a:	781b      	ldrb	r3, [r3, #0]
 800197c:	4618      	mov	r0, r3
 800197e:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001982:	697b      	ldr	r3, [r7, #20]
 8001984:	3301      	adds	r3, #1
 8001986:	617b      	str	r3, [r7, #20]
 8001988:	697a      	ldr	r2, [r7, #20]
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	429a      	cmp	r2, r3
 800198e:	dbf1      	blt.n	8001974 <_write+0x12>
  }
  return len;
 8001990:	687b      	ldr	r3, [r7, #4]
}
 8001992:	4618      	mov	r0, r3
 8001994:	3718      	adds	r7, #24
 8001996:	46bd      	mov	sp, r7
 8001998:	bd80      	pop	{r7, pc}

0800199a <_close>:

int _close(int file)
{
 800199a:	b480      	push	{r7}
 800199c:	b083      	sub	sp, #12
 800199e:	af00      	add	r7, sp, #0
 80019a0:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80019a2:	f04f 33ff 	mov.w	r3, #4294967295
}
 80019a6:	4618      	mov	r0, r3
 80019a8:	370c      	adds	r7, #12
 80019aa:	46bd      	mov	sp, r7
 80019ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019b0:	4770      	bx	lr

080019b2 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80019b2:	b480      	push	{r7}
 80019b4:	b083      	sub	sp, #12
 80019b6:	af00      	add	r7, sp, #0
 80019b8:	6078      	str	r0, [r7, #4]
 80019ba:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80019bc:	683b      	ldr	r3, [r7, #0]
 80019be:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80019c2:	605a      	str	r2, [r3, #4]
  return 0;
 80019c4:	2300      	movs	r3, #0
}
 80019c6:	4618      	mov	r0, r3
 80019c8:	370c      	adds	r7, #12
 80019ca:	46bd      	mov	sp, r7
 80019cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019d0:	4770      	bx	lr

080019d2 <_isatty>:

int _isatty(int file)
{
 80019d2:	b480      	push	{r7}
 80019d4:	b083      	sub	sp, #12
 80019d6:	af00      	add	r7, sp, #0
 80019d8:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80019da:	2301      	movs	r3, #1
}
 80019dc:	4618      	mov	r0, r3
 80019de:	370c      	adds	r7, #12
 80019e0:	46bd      	mov	sp, r7
 80019e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019e6:	4770      	bx	lr

080019e8 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80019e8:	b480      	push	{r7}
 80019ea:	b085      	sub	sp, #20
 80019ec:	af00      	add	r7, sp, #0
 80019ee:	60f8      	str	r0, [r7, #12]
 80019f0:	60b9      	str	r1, [r7, #8]
 80019f2:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80019f4:	2300      	movs	r3, #0
}
 80019f6:	4618      	mov	r0, r3
 80019f8:	3714      	adds	r7, #20
 80019fa:	46bd      	mov	sp, r7
 80019fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a00:	4770      	bx	lr
	...

08001a04 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001a04:	b580      	push	{r7, lr}
 8001a06:	b086      	sub	sp, #24
 8001a08:	af00      	add	r7, sp, #0
 8001a0a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001a0c:	4a14      	ldr	r2, [pc, #80]	; (8001a60 <_sbrk+0x5c>)
 8001a0e:	4b15      	ldr	r3, [pc, #84]	; (8001a64 <_sbrk+0x60>)
 8001a10:	1ad3      	subs	r3, r2, r3
 8001a12:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001a14:	697b      	ldr	r3, [r7, #20]
 8001a16:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001a18:	4b13      	ldr	r3, [pc, #76]	; (8001a68 <_sbrk+0x64>)
 8001a1a:	681b      	ldr	r3, [r3, #0]
 8001a1c:	2b00      	cmp	r3, #0
 8001a1e:	d102      	bne.n	8001a26 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001a20:	4b11      	ldr	r3, [pc, #68]	; (8001a68 <_sbrk+0x64>)
 8001a22:	4a12      	ldr	r2, [pc, #72]	; (8001a6c <_sbrk+0x68>)
 8001a24:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001a26:	4b10      	ldr	r3, [pc, #64]	; (8001a68 <_sbrk+0x64>)
 8001a28:	681a      	ldr	r2, [r3, #0]
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	4413      	add	r3, r2
 8001a2e:	693a      	ldr	r2, [r7, #16]
 8001a30:	429a      	cmp	r2, r3
 8001a32:	d207      	bcs.n	8001a44 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001a34:	f006 faaa 	bl	8007f8c <__errno>
 8001a38:	4603      	mov	r3, r0
 8001a3a:	220c      	movs	r2, #12
 8001a3c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001a3e:	f04f 33ff 	mov.w	r3, #4294967295
 8001a42:	e009      	b.n	8001a58 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001a44:	4b08      	ldr	r3, [pc, #32]	; (8001a68 <_sbrk+0x64>)
 8001a46:	681b      	ldr	r3, [r3, #0]
 8001a48:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001a4a:	4b07      	ldr	r3, [pc, #28]	; (8001a68 <_sbrk+0x64>)
 8001a4c:	681a      	ldr	r2, [r3, #0]
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	4413      	add	r3, r2
 8001a52:	4a05      	ldr	r2, [pc, #20]	; (8001a68 <_sbrk+0x64>)
 8001a54:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001a56:	68fb      	ldr	r3, [r7, #12]
}
 8001a58:	4618      	mov	r0, r3
 8001a5a:	3718      	adds	r7, #24
 8001a5c:	46bd      	mov	sp, r7
 8001a5e:	bd80      	pop	{r7, pc}
 8001a60:	20010000 	.word	0x20010000
 8001a64:	00000400 	.word	0x00000400
 8001a68:	200003e4 	.word	0x200003e4
 8001a6c:	20001dc8 	.word	0x20001dc8

08001a70 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8001a70:	b480      	push	{r7}
 8001a72:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8001a74:	4b06      	ldr	r3, [pc, #24]	; (8001a90 <SystemInit+0x20>)
 8001a76:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001a7a:	4a05      	ldr	r2, [pc, #20]	; (8001a90 <SystemInit+0x20>)
 8001a7c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001a80:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8001a84:	bf00      	nop
 8001a86:	46bd      	mov	sp, r7
 8001a88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a8c:	4770      	bx	lr
 8001a8e:	bf00      	nop
 8001a90:	e000ed00 	.word	0xe000ed00

08001a94 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8001a94:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001acc <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001a98:	f7ff ffea 	bl	8001a70 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001a9c:	480c      	ldr	r0, [pc, #48]	; (8001ad0 <LoopForever+0x6>)
  ldr r1, =_edata
 8001a9e:	490d      	ldr	r1, [pc, #52]	; (8001ad4 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001aa0:	4a0d      	ldr	r2, [pc, #52]	; (8001ad8 <LoopForever+0xe>)
  movs r3, #0
 8001aa2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001aa4:	e002      	b.n	8001aac <LoopCopyDataInit>

08001aa6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001aa6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001aa8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001aaa:	3304      	adds	r3, #4

08001aac <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001aac:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001aae:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001ab0:	d3f9      	bcc.n	8001aa6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001ab2:	4a0a      	ldr	r2, [pc, #40]	; (8001adc <LoopForever+0x12>)
  ldr r4, =_ebss
 8001ab4:	4c0a      	ldr	r4, [pc, #40]	; (8001ae0 <LoopForever+0x16>)
  movs r3, #0
 8001ab6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001ab8:	e001      	b.n	8001abe <LoopFillZerobss>

08001aba <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001aba:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001abc:	3204      	adds	r2, #4

08001abe <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001abe:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001ac0:	d3fb      	bcc.n	8001aba <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001ac2:	f006 fb5f 	bl	8008184 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001ac6:	f7ff fa97 	bl	8000ff8 <main>

08001aca <LoopForever>:

LoopForever:
    b LoopForever
 8001aca:	e7fe      	b.n	8001aca <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8001acc:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8001ad0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001ad4:	200001e4 	.word	0x200001e4
  ldr r2, =_sidata
 8001ad8:	0800cf94 	.word	0x0800cf94
  ldr r2, =_sbss
 8001adc:	200001e4 	.word	0x200001e4
  ldr r4, =_ebss
 8001ae0:	20001dc4 	.word	0x20001dc4

08001ae4 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001ae4:	e7fe      	b.n	8001ae4 <ADC1_IRQHandler>

08001ae6 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001ae6:	b580      	push	{r7, lr}
 8001ae8:	b082      	sub	sp, #8
 8001aea:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001aec:	2300      	movs	r3, #0
 8001aee:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001af0:	2003      	movs	r0, #3
 8001af2:	f000 f902 	bl	8001cfa <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001af6:	200f      	movs	r0, #15
 8001af8:	f7ff fe66 	bl	80017c8 <HAL_InitTick>
 8001afc:	4603      	mov	r3, r0
 8001afe:	2b00      	cmp	r3, #0
 8001b00:	d002      	beq.n	8001b08 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8001b02:	2301      	movs	r3, #1
 8001b04:	71fb      	strb	r3, [r7, #7]
 8001b06:	e001      	b.n	8001b0c <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001b08:	f7ff fd14 	bl	8001534 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001b0c:	79fb      	ldrb	r3, [r7, #7]
}
 8001b0e:	4618      	mov	r0, r3
 8001b10:	3708      	adds	r7, #8
 8001b12:	46bd      	mov	sp, r7
 8001b14:	bd80      	pop	{r7, pc}
	...

08001b18 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001b18:	b480      	push	{r7}
 8001b1a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001b1c:	4b06      	ldr	r3, [pc, #24]	; (8001b38 <HAL_IncTick+0x20>)
 8001b1e:	781b      	ldrb	r3, [r3, #0]
 8001b20:	461a      	mov	r2, r3
 8001b22:	4b06      	ldr	r3, [pc, #24]	; (8001b3c <HAL_IncTick+0x24>)
 8001b24:	681b      	ldr	r3, [r3, #0]
 8001b26:	4413      	add	r3, r2
 8001b28:	4a04      	ldr	r2, [pc, #16]	; (8001b3c <HAL_IncTick+0x24>)
 8001b2a:	6013      	str	r3, [r2, #0]
}
 8001b2c:	bf00      	nop
 8001b2e:	46bd      	mov	sp, r7
 8001b30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b34:	4770      	bx	lr
 8001b36:	bf00      	nop
 8001b38:	20000008 	.word	0x20000008
 8001b3c:	200003e8 	.word	0x200003e8

08001b40 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001b40:	b480      	push	{r7}
 8001b42:	af00      	add	r7, sp, #0
  return uwTick;
 8001b44:	4b03      	ldr	r3, [pc, #12]	; (8001b54 <HAL_GetTick+0x14>)
 8001b46:	681b      	ldr	r3, [r3, #0]
}
 8001b48:	4618      	mov	r0, r3
 8001b4a:	46bd      	mov	sp, r7
 8001b4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b50:	4770      	bx	lr
 8001b52:	bf00      	nop
 8001b54:	200003e8 	.word	0x200003e8

08001b58 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001b58:	b580      	push	{r7, lr}
 8001b5a:	b084      	sub	sp, #16
 8001b5c:	af00      	add	r7, sp, #0
 8001b5e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001b60:	f7ff ffee 	bl	8001b40 <HAL_GetTick>
 8001b64:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001b6a:	68fb      	ldr	r3, [r7, #12]
 8001b6c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001b70:	d005      	beq.n	8001b7e <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8001b72:	4b0a      	ldr	r3, [pc, #40]	; (8001b9c <HAL_Delay+0x44>)
 8001b74:	781b      	ldrb	r3, [r3, #0]
 8001b76:	461a      	mov	r2, r3
 8001b78:	68fb      	ldr	r3, [r7, #12]
 8001b7a:	4413      	add	r3, r2
 8001b7c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001b7e:	bf00      	nop
 8001b80:	f7ff ffde 	bl	8001b40 <HAL_GetTick>
 8001b84:	4602      	mov	r2, r0
 8001b86:	68bb      	ldr	r3, [r7, #8]
 8001b88:	1ad3      	subs	r3, r2, r3
 8001b8a:	68fa      	ldr	r2, [r7, #12]
 8001b8c:	429a      	cmp	r2, r3
 8001b8e:	d8f7      	bhi.n	8001b80 <HAL_Delay+0x28>
  {
  }
}
 8001b90:	bf00      	nop
 8001b92:	bf00      	nop
 8001b94:	3710      	adds	r7, #16
 8001b96:	46bd      	mov	sp, r7
 8001b98:	bd80      	pop	{r7, pc}
 8001b9a:	bf00      	nop
 8001b9c:	20000008 	.word	0x20000008

08001ba0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001ba0:	b480      	push	{r7}
 8001ba2:	b085      	sub	sp, #20
 8001ba4:	af00      	add	r7, sp, #0
 8001ba6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	f003 0307 	and.w	r3, r3, #7
 8001bae:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001bb0:	4b0c      	ldr	r3, [pc, #48]	; (8001be4 <__NVIC_SetPriorityGrouping+0x44>)
 8001bb2:	68db      	ldr	r3, [r3, #12]
 8001bb4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001bb6:	68ba      	ldr	r2, [r7, #8]
 8001bb8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001bbc:	4013      	ands	r3, r2
 8001bbe:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001bc0:	68fb      	ldr	r3, [r7, #12]
 8001bc2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001bc4:	68bb      	ldr	r3, [r7, #8]
 8001bc6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001bc8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001bcc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001bd0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001bd2:	4a04      	ldr	r2, [pc, #16]	; (8001be4 <__NVIC_SetPriorityGrouping+0x44>)
 8001bd4:	68bb      	ldr	r3, [r7, #8]
 8001bd6:	60d3      	str	r3, [r2, #12]
}
 8001bd8:	bf00      	nop
 8001bda:	3714      	adds	r7, #20
 8001bdc:	46bd      	mov	sp, r7
 8001bde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001be2:	4770      	bx	lr
 8001be4:	e000ed00 	.word	0xe000ed00

08001be8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001be8:	b480      	push	{r7}
 8001bea:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001bec:	4b04      	ldr	r3, [pc, #16]	; (8001c00 <__NVIC_GetPriorityGrouping+0x18>)
 8001bee:	68db      	ldr	r3, [r3, #12]
 8001bf0:	0a1b      	lsrs	r3, r3, #8
 8001bf2:	f003 0307 	and.w	r3, r3, #7
}
 8001bf6:	4618      	mov	r0, r3
 8001bf8:	46bd      	mov	sp, r7
 8001bfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bfe:	4770      	bx	lr
 8001c00:	e000ed00 	.word	0xe000ed00

08001c04 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001c04:	b480      	push	{r7}
 8001c06:	b083      	sub	sp, #12
 8001c08:	af00      	add	r7, sp, #0
 8001c0a:	4603      	mov	r3, r0
 8001c0c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001c0e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c12:	2b00      	cmp	r3, #0
 8001c14:	db0b      	blt.n	8001c2e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001c16:	79fb      	ldrb	r3, [r7, #7]
 8001c18:	f003 021f 	and.w	r2, r3, #31
 8001c1c:	4907      	ldr	r1, [pc, #28]	; (8001c3c <__NVIC_EnableIRQ+0x38>)
 8001c1e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c22:	095b      	lsrs	r3, r3, #5
 8001c24:	2001      	movs	r0, #1
 8001c26:	fa00 f202 	lsl.w	r2, r0, r2
 8001c2a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001c2e:	bf00      	nop
 8001c30:	370c      	adds	r7, #12
 8001c32:	46bd      	mov	sp, r7
 8001c34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c38:	4770      	bx	lr
 8001c3a:	bf00      	nop
 8001c3c:	e000e100 	.word	0xe000e100

08001c40 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001c40:	b480      	push	{r7}
 8001c42:	b083      	sub	sp, #12
 8001c44:	af00      	add	r7, sp, #0
 8001c46:	4603      	mov	r3, r0
 8001c48:	6039      	str	r1, [r7, #0]
 8001c4a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001c4c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c50:	2b00      	cmp	r3, #0
 8001c52:	db0a      	blt.n	8001c6a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001c54:	683b      	ldr	r3, [r7, #0]
 8001c56:	b2da      	uxtb	r2, r3
 8001c58:	490c      	ldr	r1, [pc, #48]	; (8001c8c <__NVIC_SetPriority+0x4c>)
 8001c5a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c5e:	0112      	lsls	r2, r2, #4
 8001c60:	b2d2      	uxtb	r2, r2
 8001c62:	440b      	add	r3, r1
 8001c64:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001c68:	e00a      	b.n	8001c80 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001c6a:	683b      	ldr	r3, [r7, #0]
 8001c6c:	b2da      	uxtb	r2, r3
 8001c6e:	4908      	ldr	r1, [pc, #32]	; (8001c90 <__NVIC_SetPriority+0x50>)
 8001c70:	79fb      	ldrb	r3, [r7, #7]
 8001c72:	f003 030f 	and.w	r3, r3, #15
 8001c76:	3b04      	subs	r3, #4
 8001c78:	0112      	lsls	r2, r2, #4
 8001c7a:	b2d2      	uxtb	r2, r2
 8001c7c:	440b      	add	r3, r1
 8001c7e:	761a      	strb	r2, [r3, #24]
}
 8001c80:	bf00      	nop
 8001c82:	370c      	adds	r7, #12
 8001c84:	46bd      	mov	sp, r7
 8001c86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c8a:	4770      	bx	lr
 8001c8c:	e000e100 	.word	0xe000e100
 8001c90:	e000ed00 	.word	0xe000ed00

08001c94 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001c94:	b480      	push	{r7}
 8001c96:	b089      	sub	sp, #36	; 0x24
 8001c98:	af00      	add	r7, sp, #0
 8001c9a:	60f8      	str	r0, [r7, #12]
 8001c9c:	60b9      	str	r1, [r7, #8]
 8001c9e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001ca0:	68fb      	ldr	r3, [r7, #12]
 8001ca2:	f003 0307 	and.w	r3, r3, #7
 8001ca6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001ca8:	69fb      	ldr	r3, [r7, #28]
 8001caa:	f1c3 0307 	rsb	r3, r3, #7
 8001cae:	2b04      	cmp	r3, #4
 8001cb0:	bf28      	it	cs
 8001cb2:	2304      	movcs	r3, #4
 8001cb4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001cb6:	69fb      	ldr	r3, [r7, #28]
 8001cb8:	3304      	adds	r3, #4
 8001cba:	2b06      	cmp	r3, #6
 8001cbc:	d902      	bls.n	8001cc4 <NVIC_EncodePriority+0x30>
 8001cbe:	69fb      	ldr	r3, [r7, #28]
 8001cc0:	3b03      	subs	r3, #3
 8001cc2:	e000      	b.n	8001cc6 <NVIC_EncodePriority+0x32>
 8001cc4:	2300      	movs	r3, #0
 8001cc6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001cc8:	f04f 32ff 	mov.w	r2, #4294967295
 8001ccc:	69bb      	ldr	r3, [r7, #24]
 8001cce:	fa02 f303 	lsl.w	r3, r2, r3
 8001cd2:	43da      	mvns	r2, r3
 8001cd4:	68bb      	ldr	r3, [r7, #8]
 8001cd6:	401a      	ands	r2, r3
 8001cd8:	697b      	ldr	r3, [r7, #20]
 8001cda:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001cdc:	f04f 31ff 	mov.w	r1, #4294967295
 8001ce0:	697b      	ldr	r3, [r7, #20]
 8001ce2:	fa01 f303 	lsl.w	r3, r1, r3
 8001ce6:	43d9      	mvns	r1, r3
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001cec:	4313      	orrs	r3, r2
         );
}
 8001cee:	4618      	mov	r0, r3
 8001cf0:	3724      	adds	r7, #36	; 0x24
 8001cf2:	46bd      	mov	sp, r7
 8001cf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cf8:	4770      	bx	lr

08001cfa <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001cfa:	b580      	push	{r7, lr}
 8001cfc:	b082      	sub	sp, #8
 8001cfe:	af00      	add	r7, sp, #0
 8001d00:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001d02:	6878      	ldr	r0, [r7, #4]
 8001d04:	f7ff ff4c 	bl	8001ba0 <__NVIC_SetPriorityGrouping>
}
 8001d08:	bf00      	nop
 8001d0a:	3708      	adds	r7, #8
 8001d0c:	46bd      	mov	sp, r7
 8001d0e:	bd80      	pop	{r7, pc}

08001d10 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001d10:	b580      	push	{r7, lr}
 8001d12:	b086      	sub	sp, #24
 8001d14:	af00      	add	r7, sp, #0
 8001d16:	4603      	mov	r3, r0
 8001d18:	60b9      	str	r1, [r7, #8]
 8001d1a:	607a      	str	r2, [r7, #4]
 8001d1c:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001d1e:	2300      	movs	r3, #0
 8001d20:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001d22:	f7ff ff61 	bl	8001be8 <__NVIC_GetPriorityGrouping>
 8001d26:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001d28:	687a      	ldr	r2, [r7, #4]
 8001d2a:	68b9      	ldr	r1, [r7, #8]
 8001d2c:	6978      	ldr	r0, [r7, #20]
 8001d2e:	f7ff ffb1 	bl	8001c94 <NVIC_EncodePriority>
 8001d32:	4602      	mov	r2, r0
 8001d34:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001d38:	4611      	mov	r1, r2
 8001d3a:	4618      	mov	r0, r3
 8001d3c:	f7ff ff80 	bl	8001c40 <__NVIC_SetPriority>
}
 8001d40:	bf00      	nop
 8001d42:	3718      	adds	r7, #24
 8001d44:	46bd      	mov	sp, r7
 8001d46:	bd80      	pop	{r7, pc}

08001d48 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001d48:	b580      	push	{r7, lr}
 8001d4a:	b082      	sub	sp, #8
 8001d4c:	af00      	add	r7, sp, #0
 8001d4e:	4603      	mov	r3, r0
 8001d50:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001d52:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d56:	4618      	mov	r0, r3
 8001d58:	f7ff ff54 	bl	8001c04 <__NVIC_EnableIRQ>
}
 8001d5c:	bf00      	nop
 8001d5e:	3708      	adds	r7, #8
 8001d60:	46bd      	mov	sp, r7
 8001d62:	bd80      	pop	{r7, pc}

08001d64 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001d64:	b480      	push	{r7}
 8001d66:	b087      	sub	sp, #28
 8001d68:	af00      	add	r7, sp, #0
 8001d6a:	6078      	str	r0, [r7, #4]
 8001d6c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001d6e:	2300      	movs	r3, #0
 8001d70:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001d72:	e148      	b.n	8002006 <HAL_GPIO_Init+0x2a2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001d74:	683b      	ldr	r3, [r7, #0]
 8001d76:	681a      	ldr	r2, [r3, #0]
 8001d78:	2101      	movs	r1, #1
 8001d7a:	697b      	ldr	r3, [r7, #20]
 8001d7c:	fa01 f303 	lsl.w	r3, r1, r3
 8001d80:	4013      	ands	r3, r2
 8001d82:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001d84:	68fb      	ldr	r3, [r7, #12]
 8001d86:	2b00      	cmp	r3, #0
 8001d88:	f000 813a 	beq.w	8002000 <HAL_GPIO_Init+0x29c>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001d8c:	683b      	ldr	r3, [r7, #0]
 8001d8e:	685b      	ldr	r3, [r3, #4]
 8001d90:	f003 0303 	and.w	r3, r3, #3
 8001d94:	2b01      	cmp	r3, #1
 8001d96:	d005      	beq.n	8001da4 <HAL_GPIO_Init+0x40>
 8001d98:	683b      	ldr	r3, [r7, #0]
 8001d9a:	685b      	ldr	r3, [r3, #4]
 8001d9c:	f003 0303 	and.w	r3, r3, #3
 8001da0:	2b02      	cmp	r3, #2
 8001da2:	d130      	bne.n	8001e06 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	689b      	ldr	r3, [r3, #8]
 8001da8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8001daa:	697b      	ldr	r3, [r7, #20]
 8001dac:	005b      	lsls	r3, r3, #1
 8001dae:	2203      	movs	r2, #3
 8001db0:	fa02 f303 	lsl.w	r3, r2, r3
 8001db4:	43db      	mvns	r3, r3
 8001db6:	693a      	ldr	r2, [r7, #16]
 8001db8:	4013      	ands	r3, r2
 8001dba:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001dbc:	683b      	ldr	r3, [r7, #0]
 8001dbe:	68da      	ldr	r2, [r3, #12]
 8001dc0:	697b      	ldr	r3, [r7, #20]
 8001dc2:	005b      	lsls	r3, r3, #1
 8001dc4:	fa02 f303 	lsl.w	r3, r2, r3
 8001dc8:	693a      	ldr	r2, [r7, #16]
 8001dca:	4313      	orrs	r3, r2
 8001dcc:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	693a      	ldr	r2, [r7, #16]
 8001dd2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	685b      	ldr	r3, [r3, #4]
 8001dd8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001dda:	2201      	movs	r2, #1
 8001ddc:	697b      	ldr	r3, [r7, #20]
 8001dde:	fa02 f303 	lsl.w	r3, r2, r3
 8001de2:	43db      	mvns	r3, r3
 8001de4:	693a      	ldr	r2, [r7, #16]
 8001de6:	4013      	ands	r3, r2
 8001de8:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001dea:	683b      	ldr	r3, [r7, #0]
 8001dec:	685b      	ldr	r3, [r3, #4]
 8001dee:	091b      	lsrs	r3, r3, #4
 8001df0:	f003 0201 	and.w	r2, r3, #1
 8001df4:	697b      	ldr	r3, [r7, #20]
 8001df6:	fa02 f303 	lsl.w	r3, r2, r3
 8001dfa:	693a      	ldr	r2, [r7, #16]
 8001dfc:	4313      	orrs	r3, r2
 8001dfe:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	693a      	ldr	r2, [r7, #16]
 8001e04:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001e06:	683b      	ldr	r3, [r7, #0]
 8001e08:	685b      	ldr	r3, [r3, #4]
 8001e0a:	f003 0303 	and.w	r3, r3, #3
 8001e0e:	2b03      	cmp	r3, #3
 8001e10:	d017      	beq.n	8001e42 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	68db      	ldr	r3, [r3, #12]
 8001e16:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001e18:	697b      	ldr	r3, [r7, #20]
 8001e1a:	005b      	lsls	r3, r3, #1
 8001e1c:	2203      	movs	r2, #3
 8001e1e:	fa02 f303 	lsl.w	r3, r2, r3
 8001e22:	43db      	mvns	r3, r3
 8001e24:	693a      	ldr	r2, [r7, #16]
 8001e26:	4013      	ands	r3, r2
 8001e28:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001e2a:	683b      	ldr	r3, [r7, #0]
 8001e2c:	689a      	ldr	r2, [r3, #8]
 8001e2e:	697b      	ldr	r3, [r7, #20]
 8001e30:	005b      	lsls	r3, r3, #1
 8001e32:	fa02 f303 	lsl.w	r3, r2, r3
 8001e36:	693a      	ldr	r2, [r7, #16]
 8001e38:	4313      	orrs	r3, r2
 8001e3a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	693a      	ldr	r2, [r7, #16]
 8001e40:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001e42:	683b      	ldr	r3, [r7, #0]
 8001e44:	685b      	ldr	r3, [r3, #4]
 8001e46:	f003 0303 	and.w	r3, r3, #3
 8001e4a:	2b02      	cmp	r3, #2
 8001e4c:	d123      	bne.n	8001e96 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001e4e:	697b      	ldr	r3, [r7, #20]
 8001e50:	08da      	lsrs	r2, r3, #3
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	3208      	adds	r2, #8
 8001e56:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001e5a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001e5c:	697b      	ldr	r3, [r7, #20]
 8001e5e:	f003 0307 	and.w	r3, r3, #7
 8001e62:	009b      	lsls	r3, r3, #2
 8001e64:	220f      	movs	r2, #15
 8001e66:	fa02 f303 	lsl.w	r3, r2, r3
 8001e6a:	43db      	mvns	r3, r3
 8001e6c:	693a      	ldr	r2, [r7, #16]
 8001e6e:	4013      	ands	r3, r2
 8001e70:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001e72:	683b      	ldr	r3, [r7, #0]
 8001e74:	691a      	ldr	r2, [r3, #16]
 8001e76:	697b      	ldr	r3, [r7, #20]
 8001e78:	f003 0307 	and.w	r3, r3, #7
 8001e7c:	009b      	lsls	r3, r3, #2
 8001e7e:	fa02 f303 	lsl.w	r3, r2, r3
 8001e82:	693a      	ldr	r2, [r7, #16]
 8001e84:	4313      	orrs	r3, r2
 8001e86:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001e88:	697b      	ldr	r3, [r7, #20]
 8001e8a:	08da      	lsrs	r2, r3, #3
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	3208      	adds	r2, #8
 8001e90:	6939      	ldr	r1, [r7, #16]
 8001e92:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	681b      	ldr	r3, [r3, #0]
 8001e9a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001e9c:	697b      	ldr	r3, [r7, #20]
 8001e9e:	005b      	lsls	r3, r3, #1
 8001ea0:	2203      	movs	r2, #3
 8001ea2:	fa02 f303 	lsl.w	r3, r2, r3
 8001ea6:	43db      	mvns	r3, r3
 8001ea8:	693a      	ldr	r2, [r7, #16]
 8001eaa:	4013      	ands	r3, r2
 8001eac:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001eae:	683b      	ldr	r3, [r7, #0]
 8001eb0:	685b      	ldr	r3, [r3, #4]
 8001eb2:	f003 0203 	and.w	r2, r3, #3
 8001eb6:	697b      	ldr	r3, [r7, #20]
 8001eb8:	005b      	lsls	r3, r3, #1
 8001eba:	fa02 f303 	lsl.w	r3, r2, r3
 8001ebe:	693a      	ldr	r2, [r7, #16]
 8001ec0:	4313      	orrs	r3, r2
 8001ec2:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	693a      	ldr	r2, [r7, #16]
 8001ec8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001eca:	683b      	ldr	r3, [r7, #0]
 8001ecc:	685b      	ldr	r3, [r3, #4]
 8001ece:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001ed2:	2b00      	cmp	r3, #0
 8001ed4:	f000 8094 	beq.w	8002000 <HAL_GPIO_Init+0x29c>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001ed8:	4b52      	ldr	r3, [pc, #328]	; (8002024 <HAL_GPIO_Init+0x2c0>)
 8001eda:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001edc:	4a51      	ldr	r2, [pc, #324]	; (8002024 <HAL_GPIO_Init+0x2c0>)
 8001ede:	f043 0301 	orr.w	r3, r3, #1
 8001ee2:	6613      	str	r3, [r2, #96]	; 0x60
 8001ee4:	4b4f      	ldr	r3, [pc, #316]	; (8002024 <HAL_GPIO_Init+0x2c0>)
 8001ee6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001ee8:	f003 0301 	and.w	r3, r3, #1
 8001eec:	60bb      	str	r3, [r7, #8]
 8001eee:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001ef0:	4a4d      	ldr	r2, [pc, #308]	; (8002028 <HAL_GPIO_Init+0x2c4>)
 8001ef2:	697b      	ldr	r3, [r7, #20]
 8001ef4:	089b      	lsrs	r3, r3, #2
 8001ef6:	3302      	adds	r3, #2
 8001ef8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001efc:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001efe:	697b      	ldr	r3, [r7, #20]
 8001f00:	f003 0303 	and.w	r3, r3, #3
 8001f04:	009b      	lsls	r3, r3, #2
 8001f06:	220f      	movs	r2, #15
 8001f08:	fa02 f303 	lsl.w	r3, r2, r3
 8001f0c:	43db      	mvns	r3, r3
 8001f0e:	693a      	ldr	r2, [r7, #16]
 8001f10:	4013      	ands	r3, r2
 8001f12:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8001f1a:	d00d      	beq.n	8001f38 <HAL_GPIO_Init+0x1d4>
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	4a43      	ldr	r2, [pc, #268]	; (800202c <HAL_GPIO_Init+0x2c8>)
 8001f20:	4293      	cmp	r3, r2
 8001f22:	d007      	beq.n	8001f34 <HAL_GPIO_Init+0x1d0>
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	4a42      	ldr	r2, [pc, #264]	; (8002030 <HAL_GPIO_Init+0x2cc>)
 8001f28:	4293      	cmp	r3, r2
 8001f2a:	d101      	bne.n	8001f30 <HAL_GPIO_Init+0x1cc>
 8001f2c:	2302      	movs	r3, #2
 8001f2e:	e004      	b.n	8001f3a <HAL_GPIO_Init+0x1d6>
 8001f30:	2307      	movs	r3, #7
 8001f32:	e002      	b.n	8001f3a <HAL_GPIO_Init+0x1d6>
 8001f34:	2301      	movs	r3, #1
 8001f36:	e000      	b.n	8001f3a <HAL_GPIO_Init+0x1d6>
 8001f38:	2300      	movs	r3, #0
 8001f3a:	697a      	ldr	r2, [r7, #20]
 8001f3c:	f002 0203 	and.w	r2, r2, #3
 8001f40:	0092      	lsls	r2, r2, #2
 8001f42:	4093      	lsls	r3, r2
 8001f44:	693a      	ldr	r2, [r7, #16]
 8001f46:	4313      	orrs	r3, r2
 8001f48:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001f4a:	4937      	ldr	r1, [pc, #220]	; (8002028 <HAL_GPIO_Init+0x2c4>)
 8001f4c:	697b      	ldr	r3, [r7, #20]
 8001f4e:	089b      	lsrs	r3, r3, #2
 8001f50:	3302      	adds	r3, #2
 8001f52:	693a      	ldr	r2, [r7, #16]
 8001f54:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001f58:	4b36      	ldr	r3, [pc, #216]	; (8002034 <HAL_GPIO_Init+0x2d0>)
 8001f5a:	689b      	ldr	r3, [r3, #8]
 8001f5c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001f5e:	68fb      	ldr	r3, [r7, #12]
 8001f60:	43db      	mvns	r3, r3
 8001f62:	693a      	ldr	r2, [r7, #16]
 8001f64:	4013      	ands	r3, r2
 8001f66:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001f68:	683b      	ldr	r3, [r7, #0]
 8001f6a:	685b      	ldr	r3, [r3, #4]
 8001f6c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001f70:	2b00      	cmp	r3, #0
 8001f72:	d003      	beq.n	8001f7c <HAL_GPIO_Init+0x218>
        {
          temp |= iocurrent;
 8001f74:	693a      	ldr	r2, [r7, #16]
 8001f76:	68fb      	ldr	r3, [r7, #12]
 8001f78:	4313      	orrs	r3, r2
 8001f7a:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001f7c:	4a2d      	ldr	r2, [pc, #180]	; (8002034 <HAL_GPIO_Init+0x2d0>)
 8001f7e:	693b      	ldr	r3, [r7, #16]
 8001f80:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8001f82:	4b2c      	ldr	r3, [pc, #176]	; (8002034 <HAL_GPIO_Init+0x2d0>)
 8001f84:	68db      	ldr	r3, [r3, #12]
 8001f86:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001f88:	68fb      	ldr	r3, [r7, #12]
 8001f8a:	43db      	mvns	r3, r3
 8001f8c:	693a      	ldr	r2, [r7, #16]
 8001f8e:	4013      	ands	r3, r2
 8001f90:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001f92:	683b      	ldr	r3, [r7, #0]
 8001f94:	685b      	ldr	r3, [r3, #4]
 8001f96:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001f9a:	2b00      	cmp	r3, #0
 8001f9c:	d003      	beq.n	8001fa6 <HAL_GPIO_Init+0x242>
        {
          temp |= iocurrent;
 8001f9e:	693a      	ldr	r2, [r7, #16]
 8001fa0:	68fb      	ldr	r3, [r7, #12]
 8001fa2:	4313      	orrs	r3, r2
 8001fa4:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001fa6:	4a23      	ldr	r2, [pc, #140]	; (8002034 <HAL_GPIO_Init+0x2d0>)
 8001fa8:	693b      	ldr	r3, [r7, #16]
 8001faa:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8001fac:	4b21      	ldr	r3, [pc, #132]	; (8002034 <HAL_GPIO_Init+0x2d0>)
 8001fae:	685b      	ldr	r3, [r3, #4]
 8001fb0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001fb2:	68fb      	ldr	r3, [r7, #12]
 8001fb4:	43db      	mvns	r3, r3
 8001fb6:	693a      	ldr	r2, [r7, #16]
 8001fb8:	4013      	ands	r3, r2
 8001fba:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001fbc:	683b      	ldr	r3, [r7, #0]
 8001fbe:	685b      	ldr	r3, [r3, #4]
 8001fc0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001fc4:	2b00      	cmp	r3, #0
 8001fc6:	d003      	beq.n	8001fd0 <HAL_GPIO_Init+0x26c>
        {
          temp |= iocurrent;
 8001fc8:	693a      	ldr	r2, [r7, #16]
 8001fca:	68fb      	ldr	r3, [r7, #12]
 8001fcc:	4313      	orrs	r3, r2
 8001fce:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001fd0:	4a18      	ldr	r2, [pc, #96]	; (8002034 <HAL_GPIO_Init+0x2d0>)
 8001fd2:	693b      	ldr	r3, [r7, #16]
 8001fd4:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8001fd6:	4b17      	ldr	r3, [pc, #92]	; (8002034 <HAL_GPIO_Init+0x2d0>)
 8001fd8:	681b      	ldr	r3, [r3, #0]
 8001fda:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001fdc:	68fb      	ldr	r3, [r7, #12]
 8001fde:	43db      	mvns	r3, r3
 8001fe0:	693a      	ldr	r2, [r7, #16]
 8001fe2:	4013      	ands	r3, r2
 8001fe4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001fe6:	683b      	ldr	r3, [r7, #0]
 8001fe8:	685b      	ldr	r3, [r3, #4]
 8001fea:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001fee:	2b00      	cmp	r3, #0
 8001ff0:	d003      	beq.n	8001ffa <HAL_GPIO_Init+0x296>
        {
          temp |= iocurrent;
 8001ff2:	693a      	ldr	r2, [r7, #16]
 8001ff4:	68fb      	ldr	r3, [r7, #12]
 8001ff6:	4313      	orrs	r3, r2
 8001ff8:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001ffa:	4a0e      	ldr	r2, [pc, #56]	; (8002034 <HAL_GPIO_Init+0x2d0>)
 8001ffc:	693b      	ldr	r3, [r7, #16]
 8001ffe:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8002000:	697b      	ldr	r3, [r7, #20]
 8002002:	3301      	adds	r3, #1
 8002004:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002006:	683b      	ldr	r3, [r7, #0]
 8002008:	681a      	ldr	r2, [r3, #0]
 800200a:	697b      	ldr	r3, [r7, #20]
 800200c:	fa22 f303 	lsr.w	r3, r2, r3
 8002010:	2b00      	cmp	r3, #0
 8002012:	f47f aeaf 	bne.w	8001d74 <HAL_GPIO_Init+0x10>
  }
}
 8002016:	bf00      	nop
 8002018:	bf00      	nop
 800201a:	371c      	adds	r7, #28
 800201c:	46bd      	mov	sp, r7
 800201e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002022:	4770      	bx	lr
 8002024:	40021000 	.word	0x40021000
 8002028:	40010000 	.word	0x40010000
 800202c:	48000400 	.word	0x48000400
 8002030:	48000800 	.word	0x48000800
 8002034:	40010400 	.word	0x40010400

08002038 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002038:	b480      	push	{r7}
 800203a:	b083      	sub	sp, #12
 800203c:	af00      	add	r7, sp, #0
 800203e:	6078      	str	r0, [r7, #4]
 8002040:	460b      	mov	r3, r1
 8002042:	807b      	strh	r3, [r7, #2]
 8002044:	4613      	mov	r3, r2
 8002046:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002048:	787b      	ldrb	r3, [r7, #1]
 800204a:	2b00      	cmp	r3, #0
 800204c:	d003      	beq.n	8002056 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800204e:	887a      	ldrh	r2, [r7, #2]
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002054:	e002      	b.n	800205c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002056:	887a      	ldrh	r2, [r7, #2]
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	629a      	str	r2, [r3, #40]	; 0x28
}
 800205c:	bf00      	nop
 800205e:	370c      	adds	r7, #12
 8002060:	46bd      	mov	sp, r7
 8002062:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002066:	4770      	bx	lr

08002068 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002068:	b580      	push	{r7, lr}
 800206a:	b082      	sub	sp, #8
 800206c:	af00      	add	r7, sp, #0
 800206e:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	2b00      	cmp	r3, #0
 8002074:	d101      	bne.n	800207a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002076:	2301      	movs	r3, #1
 8002078:	e081      	b.n	800217e <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002080:	b2db      	uxtb	r3, r3
 8002082:	2b00      	cmp	r3, #0
 8002084:	d106      	bne.n	8002094 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	2200      	movs	r2, #0
 800208a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800208e:	6878      	ldr	r0, [r7, #4]
 8002090:	f7ff fa78 	bl	8001584 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	2224      	movs	r2, #36	; 0x24
 8002098:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	681b      	ldr	r3, [r3, #0]
 80020a0:	681a      	ldr	r2, [r3, #0]
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	681b      	ldr	r3, [r3, #0]
 80020a6:	f022 0201 	bic.w	r2, r2, #1
 80020aa:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	685a      	ldr	r2, [r3, #4]
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	681b      	ldr	r3, [r3, #0]
 80020b4:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80020b8:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	681b      	ldr	r3, [r3, #0]
 80020be:	689a      	ldr	r2, [r3, #8]
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	681b      	ldr	r3, [r3, #0]
 80020c4:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80020c8:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	68db      	ldr	r3, [r3, #12]
 80020ce:	2b01      	cmp	r3, #1
 80020d0:	d107      	bne.n	80020e2 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	689a      	ldr	r2, [r3, #8]
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	681b      	ldr	r3, [r3, #0]
 80020da:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80020de:	609a      	str	r2, [r3, #8]
 80020e0:	e006      	b.n	80020f0 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	689a      	ldr	r2, [r3, #8]
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	681b      	ldr	r3, [r3, #0]
 80020ea:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 80020ee:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	68db      	ldr	r3, [r3, #12]
 80020f4:	2b02      	cmp	r3, #2
 80020f6:	d104      	bne.n	8002102 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	681b      	ldr	r3, [r3, #0]
 80020fc:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002100:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	681b      	ldr	r3, [r3, #0]
 8002106:	685b      	ldr	r3, [r3, #4]
 8002108:	687a      	ldr	r2, [r7, #4]
 800210a:	6812      	ldr	r2, [r2, #0]
 800210c:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002110:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002114:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	681b      	ldr	r3, [r3, #0]
 800211a:	68da      	ldr	r2, [r3, #12]
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	681b      	ldr	r3, [r3, #0]
 8002120:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002124:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	691a      	ldr	r2, [r3, #16]
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	695b      	ldr	r3, [r3, #20]
 800212e:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	699b      	ldr	r3, [r3, #24]
 8002136:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	681b      	ldr	r3, [r3, #0]
 800213c:	430a      	orrs	r2, r1
 800213e:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	69d9      	ldr	r1, [r3, #28]
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	6a1a      	ldr	r2, [r3, #32]
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	681b      	ldr	r3, [r3, #0]
 800214c:	430a      	orrs	r2, r1
 800214e:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	681b      	ldr	r3, [r3, #0]
 8002154:	681a      	ldr	r2, [r3, #0]
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	681b      	ldr	r3, [r3, #0]
 800215a:	f042 0201 	orr.w	r2, r2, #1
 800215e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	2200      	movs	r2, #0
 8002164:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	2220      	movs	r2, #32
 800216a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	2200      	movs	r2, #0
 8002172:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	2200      	movs	r2, #0
 8002178:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 800217c:	2300      	movs	r3, #0
}
 800217e:	4618      	mov	r0, r3
 8002180:	3708      	adds	r7, #8
 8002182:	46bd      	mov	sp, r7
 8002184:	bd80      	pop	{r7, pc}
	...

08002188 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 8002188:	b580      	push	{r7, lr}
 800218a:	b088      	sub	sp, #32
 800218c:	af02      	add	r7, sp, #8
 800218e:	60f8      	str	r0, [r7, #12]
 8002190:	607a      	str	r2, [r7, #4]
 8002192:	461a      	mov	r2, r3
 8002194:	460b      	mov	r3, r1
 8002196:	817b      	strh	r3, [r7, #10]
 8002198:	4613      	mov	r3, r2
 800219a:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 800219c:	68fb      	ldr	r3, [r7, #12]
 800219e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80021a2:	b2db      	uxtb	r3, r3
 80021a4:	2b20      	cmp	r3, #32
 80021a6:	f040 80da 	bne.w	800235e <HAL_I2C_Master_Transmit+0x1d6>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80021aa:	68fb      	ldr	r3, [r7, #12]
 80021ac:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80021b0:	2b01      	cmp	r3, #1
 80021b2:	d101      	bne.n	80021b8 <HAL_I2C_Master_Transmit+0x30>
 80021b4:	2302      	movs	r3, #2
 80021b6:	e0d3      	b.n	8002360 <HAL_I2C_Master_Transmit+0x1d8>
 80021b8:	68fb      	ldr	r3, [r7, #12]
 80021ba:	2201      	movs	r2, #1
 80021bc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80021c0:	f7ff fcbe 	bl	8001b40 <HAL_GetTick>
 80021c4:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80021c6:	697b      	ldr	r3, [r7, #20]
 80021c8:	9300      	str	r3, [sp, #0]
 80021ca:	2319      	movs	r3, #25
 80021cc:	2201      	movs	r2, #1
 80021ce:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80021d2:	68f8      	ldr	r0, [r7, #12]
 80021d4:	f000 f9e6 	bl	80025a4 <I2C_WaitOnFlagUntilTimeout>
 80021d8:	4603      	mov	r3, r0
 80021da:	2b00      	cmp	r3, #0
 80021dc:	d001      	beq.n	80021e2 <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 80021de:	2301      	movs	r3, #1
 80021e0:	e0be      	b.n	8002360 <HAL_I2C_Master_Transmit+0x1d8>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80021e2:	68fb      	ldr	r3, [r7, #12]
 80021e4:	2221      	movs	r2, #33	; 0x21
 80021e6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 80021ea:	68fb      	ldr	r3, [r7, #12]
 80021ec:	2210      	movs	r2, #16
 80021ee:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80021f2:	68fb      	ldr	r3, [r7, #12]
 80021f4:	2200      	movs	r2, #0
 80021f6:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80021f8:	68fb      	ldr	r3, [r7, #12]
 80021fa:	687a      	ldr	r2, [r7, #4]
 80021fc:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 80021fe:	68fb      	ldr	r3, [r7, #12]
 8002200:	893a      	ldrh	r2, [r7, #8]
 8002202:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8002204:	68fb      	ldr	r3, [r7, #12]
 8002206:	2200      	movs	r2, #0
 8002208:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800220a:	68fb      	ldr	r3, [r7, #12]
 800220c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800220e:	b29b      	uxth	r3, r3
 8002210:	2bff      	cmp	r3, #255	; 0xff
 8002212:	d90e      	bls.n	8002232 <HAL_I2C_Master_Transmit+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8002214:	68fb      	ldr	r3, [r7, #12]
 8002216:	22ff      	movs	r2, #255	; 0xff
 8002218:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800221a:	68fb      	ldr	r3, [r7, #12]
 800221c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800221e:	b2da      	uxtb	r2, r3
 8002220:	8979      	ldrh	r1, [r7, #10]
 8002222:	4b51      	ldr	r3, [pc, #324]	; (8002368 <HAL_I2C_Master_Transmit+0x1e0>)
 8002224:	9300      	str	r3, [sp, #0]
 8002226:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800222a:	68f8      	ldr	r0, [r7, #12]
 800222c:	f000 fbdc 	bl	80029e8 <I2C_TransferConfig>
 8002230:	e06c      	b.n	800230c <HAL_I2C_Master_Transmit+0x184>
                         I2C_GENERATE_START_WRITE);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8002232:	68fb      	ldr	r3, [r7, #12]
 8002234:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002236:	b29a      	uxth	r2, r3
 8002238:	68fb      	ldr	r3, [r7, #12]
 800223a:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800223c:	68fb      	ldr	r3, [r7, #12]
 800223e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002240:	b2da      	uxtb	r2, r3
 8002242:	8979      	ldrh	r1, [r7, #10]
 8002244:	4b48      	ldr	r3, [pc, #288]	; (8002368 <HAL_I2C_Master_Transmit+0x1e0>)
 8002246:	9300      	str	r3, [sp, #0]
 8002248:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800224c:	68f8      	ldr	r0, [r7, #12]
 800224e:	f000 fbcb 	bl	80029e8 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 8002252:	e05b      	b.n	800230c <HAL_I2C_Master_Transmit+0x184>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002254:	697a      	ldr	r2, [r7, #20]
 8002256:	6a39      	ldr	r1, [r7, #32]
 8002258:	68f8      	ldr	r0, [r7, #12]
 800225a:	f000 f9e3 	bl	8002624 <I2C_WaitOnTXISFlagUntilTimeout>
 800225e:	4603      	mov	r3, r0
 8002260:	2b00      	cmp	r3, #0
 8002262:	d001      	beq.n	8002268 <HAL_I2C_Master_Transmit+0xe0>
      {
        return HAL_ERROR;
 8002264:	2301      	movs	r3, #1
 8002266:	e07b      	b.n	8002360 <HAL_I2C_Master_Transmit+0x1d8>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8002268:	68fb      	ldr	r3, [r7, #12]
 800226a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800226c:	781a      	ldrb	r2, [r3, #0]
 800226e:	68fb      	ldr	r3, [r7, #12]
 8002270:	681b      	ldr	r3, [r3, #0]
 8002272:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002274:	68fb      	ldr	r3, [r7, #12]
 8002276:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002278:	1c5a      	adds	r2, r3, #1
 800227a:	68fb      	ldr	r3, [r7, #12]
 800227c:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 800227e:	68fb      	ldr	r3, [r7, #12]
 8002280:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002282:	b29b      	uxth	r3, r3
 8002284:	3b01      	subs	r3, #1
 8002286:	b29a      	uxth	r2, r3
 8002288:	68fb      	ldr	r3, [r7, #12]
 800228a:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 800228c:	68fb      	ldr	r3, [r7, #12]
 800228e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002290:	3b01      	subs	r3, #1
 8002292:	b29a      	uxth	r2, r3
 8002294:	68fb      	ldr	r3, [r7, #12]
 8002296:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8002298:	68fb      	ldr	r3, [r7, #12]
 800229a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800229c:	b29b      	uxth	r3, r3
 800229e:	2b00      	cmp	r3, #0
 80022a0:	d034      	beq.n	800230c <HAL_I2C_Master_Transmit+0x184>
 80022a2:	68fb      	ldr	r3, [r7, #12]
 80022a4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80022a6:	2b00      	cmp	r3, #0
 80022a8:	d130      	bne.n	800230c <HAL_I2C_Master_Transmit+0x184>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80022aa:	697b      	ldr	r3, [r7, #20]
 80022ac:	9300      	str	r3, [sp, #0]
 80022ae:	6a3b      	ldr	r3, [r7, #32]
 80022b0:	2200      	movs	r2, #0
 80022b2:	2180      	movs	r1, #128	; 0x80
 80022b4:	68f8      	ldr	r0, [r7, #12]
 80022b6:	f000 f975 	bl	80025a4 <I2C_WaitOnFlagUntilTimeout>
 80022ba:	4603      	mov	r3, r0
 80022bc:	2b00      	cmp	r3, #0
 80022be:	d001      	beq.n	80022c4 <HAL_I2C_Master_Transmit+0x13c>
        {
          return HAL_ERROR;
 80022c0:	2301      	movs	r3, #1
 80022c2:	e04d      	b.n	8002360 <HAL_I2C_Master_Transmit+0x1d8>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80022c4:	68fb      	ldr	r3, [r7, #12]
 80022c6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80022c8:	b29b      	uxth	r3, r3
 80022ca:	2bff      	cmp	r3, #255	; 0xff
 80022cc:	d90e      	bls.n	80022ec <HAL_I2C_Master_Transmit+0x164>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80022ce:	68fb      	ldr	r3, [r7, #12]
 80022d0:	22ff      	movs	r2, #255	; 0xff
 80022d2:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80022d4:	68fb      	ldr	r3, [r7, #12]
 80022d6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80022d8:	b2da      	uxtb	r2, r3
 80022da:	8979      	ldrh	r1, [r7, #10]
 80022dc:	2300      	movs	r3, #0
 80022de:	9300      	str	r3, [sp, #0]
 80022e0:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80022e4:	68f8      	ldr	r0, [r7, #12]
 80022e6:	f000 fb7f 	bl	80029e8 <I2C_TransferConfig>
 80022ea:	e00f      	b.n	800230c <HAL_I2C_Master_Transmit+0x184>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80022ec:	68fb      	ldr	r3, [r7, #12]
 80022ee:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80022f0:	b29a      	uxth	r2, r3
 80022f2:	68fb      	ldr	r3, [r7, #12]
 80022f4:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80022f6:	68fb      	ldr	r3, [r7, #12]
 80022f8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80022fa:	b2da      	uxtb	r2, r3
 80022fc:	8979      	ldrh	r1, [r7, #10]
 80022fe:	2300      	movs	r3, #0
 8002300:	9300      	str	r3, [sp, #0]
 8002302:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002306:	68f8      	ldr	r0, [r7, #12]
 8002308:	f000 fb6e 	bl	80029e8 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 800230c:	68fb      	ldr	r3, [r7, #12]
 800230e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002310:	b29b      	uxth	r3, r3
 8002312:	2b00      	cmp	r3, #0
 8002314:	d19e      	bne.n	8002254 <HAL_I2C_Master_Transmit+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002316:	697a      	ldr	r2, [r7, #20]
 8002318:	6a39      	ldr	r1, [r7, #32]
 800231a:	68f8      	ldr	r0, [r7, #12]
 800231c:	f000 f9c2 	bl	80026a4 <I2C_WaitOnSTOPFlagUntilTimeout>
 8002320:	4603      	mov	r3, r0
 8002322:	2b00      	cmp	r3, #0
 8002324:	d001      	beq.n	800232a <HAL_I2C_Master_Transmit+0x1a2>
    {
      return HAL_ERROR;
 8002326:	2301      	movs	r3, #1
 8002328:	e01a      	b.n	8002360 <HAL_I2C_Master_Transmit+0x1d8>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800232a:	68fb      	ldr	r3, [r7, #12]
 800232c:	681b      	ldr	r3, [r3, #0]
 800232e:	2220      	movs	r2, #32
 8002330:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002332:	68fb      	ldr	r3, [r7, #12]
 8002334:	681b      	ldr	r3, [r3, #0]
 8002336:	6859      	ldr	r1, [r3, #4]
 8002338:	68fb      	ldr	r3, [r7, #12]
 800233a:	681a      	ldr	r2, [r3, #0]
 800233c:	4b0b      	ldr	r3, [pc, #44]	; (800236c <HAL_I2C_Master_Transmit+0x1e4>)
 800233e:	400b      	ands	r3, r1
 8002340:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8002342:	68fb      	ldr	r3, [r7, #12]
 8002344:	2220      	movs	r2, #32
 8002346:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800234a:	68fb      	ldr	r3, [r7, #12]
 800234c:	2200      	movs	r2, #0
 800234e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002352:	68fb      	ldr	r3, [r7, #12]
 8002354:	2200      	movs	r2, #0
 8002356:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800235a:	2300      	movs	r3, #0
 800235c:	e000      	b.n	8002360 <HAL_I2C_Master_Transmit+0x1d8>
  }
  else
  {
    return HAL_BUSY;
 800235e:	2302      	movs	r3, #2
  }
}
 8002360:	4618      	mov	r0, r3
 8002362:	3718      	adds	r7, #24
 8002364:	46bd      	mov	sp, r7
 8002366:	bd80      	pop	{r7, pc}
 8002368:	80002000 	.word	0x80002000
 800236c:	fe00e800 	.word	0xfe00e800

08002370 <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                         uint16_t Size, uint32_t Timeout)
{
 8002370:	b580      	push	{r7, lr}
 8002372:	b088      	sub	sp, #32
 8002374:	af02      	add	r7, sp, #8
 8002376:	60f8      	str	r0, [r7, #12]
 8002378:	607a      	str	r2, [r7, #4]
 800237a:	461a      	mov	r2, r3
 800237c:	460b      	mov	r3, r1
 800237e:	817b      	strh	r3, [r7, #10]
 8002380:	4613      	mov	r3, r2
 8002382:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002384:	68fb      	ldr	r3, [r7, #12]
 8002386:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800238a:	b2db      	uxtb	r3, r3
 800238c:	2b20      	cmp	r3, #32
 800238e:	f040 80db 	bne.w	8002548 <HAL_I2C_Master_Receive+0x1d8>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002392:	68fb      	ldr	r3, [r7, #12]
 8002394:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002398:	2b01      	cmp	r3, #1
 800239a:	d101      	bne.n	80023a0 <HAL_I2C_Master_Receive+0x30>
 800239c:	2302      	movs	r3, #2
 800239e:	e0d4      	b.n	800254a <HAL_I2C_Master_Receive+0x1da>
 80023a0:	68fb      	ldr	r3, [r7, #12]
 80023a2:	2201      	movs	r2, #1
 80023a4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80023a8:	f7ff fbca 	bl	8001b40 <HAL_GetTick>
 80023ac:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80023ae:	697b      	ldr	r3, [r7, #20]
 80023b0:	9300      	str	r3, [sp, #0]
 80023b2:	2319      	movs	r3, #25
 80023b4:	2201      	movs	r2, #1
 80023b6:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80023ba:	68f8      	ldr	r0, [r7, #12]
 80023bc:	f000 f8f2 	bl	80025a4 <I2C_WaitOnFlagUntilTimeout>
 80023c0:	4603      	mov	r3, r0
 80023c2:	2b00      	cmp	r3, #0
 80023c4:	d001      	beq.n	80023ca <HAL_I2C_Master_Receive+0x5a>
    {
      return HAL_ERROR;
 80023c6:	2301      	movs	r3, #1
 80023c8:	e0bf      	b.n	800254a <HAL_I2C_Master_Receive+0x1da>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80023ca:	68fb      	ldr	r3, [r7, #12]
 80023cc:	2222      	movs	r2, #34	; 0x22
 80023ce:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 80023d2:	68fb      	ldr	r3, [r7, #12]
 80023d4:	2210      	movs	r2, #16
 80023d6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80023da:	68fb      	ldr	r3, [r7, #12]
 80023dc:	2200      	movs	r2, #0
 80023de:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80023e0:	68fb      	ldr	r3, [r7, #12]
 80023e2:	687a      	ldr	r2, [r7, #4]
 80023e4:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 80023e6:	68fb      	ldr	r3, [r7, #12]
 80023e8:	893a      	ldrh	r2, [r7, #8]
 80023ea:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 80023ec:	68fb      	ldr	r3, [r7, #12]
 80023ee:	2200      	movs	r2, #0
 80023f0:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80023f2:	68fb      	ldr	r3, [r7, #12]
 80023f4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80023f6:	b29b      	uxth	r3, r3
 80023f8:	2bff      	cmp	r3, #255	; 0xff
 80023fa:	d90e      	bls.n	800241a <HAL_I2C_Master_Receive+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80023fc:	68fb      	ldr	r3, [r7, #12]
 80023fe:	22ff      	movs	r2, #255	; 0xff
 8002400:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8002402:	68fb      	ldr	r3, [r7, #12]
 8002404:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002406:	b2da      	uxtb	r2, r3
 8002408:	8979      	ldrh	r1, [r7, #10]
 800240a:	4b52      	ldr	r3, [pc, #328]	; (8002554 <HAL_I2C_Master_Receive+0x1e4>)
 800240c:	9300      	str	r3, [sp, #0]
 800240e:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002412:	68f8      	ldr	r0, [r7, #12]
 8002414:	f000 fae8 	bl	80029e8 <I2C_TransferConfig>
 8002418:	e06d      	b.n	80024f6 <HAL_I2C_Master_Receive+0x186>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800241a:	68fb      	ldr	r3, [r7, #12]
 800241c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800241e:	b29a      	uxth	r2, r3
 8002420:	68fb      	ldr	r3, [r7, #12]
 8002422:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002424:	68fb      	ldr	r3, [r7, #12]
 8002426:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002428:	b2da      	uxtb	r2, r3
 800242a:	8979      	ldrh	r1, [r7, #10]
 800242c:	4b49      	ldr	r3, [pc, #292]	; (8002554 <HAL_I2C_Master_Receive+0x1e4>)
 800242e:	9300      	str	r3, [sp, #0]
 8002430:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002434:	68f8      	ldr	r0, [r7, #12]
 8002436:	f000 fad7 	bl	80029e8 <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);
    }

    while (hi2c->XferCount > 0U)
 800243a:	e05c      	b.n	80024f6 <HAL_I2C_Master_Receive+0x186>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800243c:	697a      	ldr	r2, [r7, #20]
 800243e:	6a39      	ldr	r1, [r7, #32]
 8002440:	68f8      	ldr	r0, [r7, #12]
 8002442:	f000 f96b 	bl	800271c <I2C_WaitOnRXNEFlagUntilTimeout>
 8002446:	4603      	mov	r3, r0
 8002448:	2b00      	cmp	r3, #0
 800244a:	d001      	beq.n	8002450 <HAL_I2C_Master_Receive+0xe0>
      {
        return HAL_ERROR;
 800244c:	2301      	movs	r3, #1
 800244e:	e07c      	b.n	800254a <HAL_I2C_Master_Receive+0x1da>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8002450:	68fb      	ldr	r3, [r7, #12]
 8002452:	681b      	ldr	r3, [r3, #0]
 8002454:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002456:	68fb      	ldr	r3, [r7, #12]
 8002458:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800245a:	b2d2      	uxtb	r2, r2
 800245c:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800245e:	68fb      	ldr	r3, [r7, #12]
 8002460:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002462:	1c5a      	adds	r2, r3, #1
 8002464:	68fb      	ldr	r3, [r7, #12]
 8002466:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8002468:	68fb      	ldr	r3, [r7, #12]
 800246a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800246c:	3b01      	subs	r3, #1
 800246e:	b29a      	uxth	r2, r3
 8002470:	68fb      	ldr	r3, [r7, #12]
 8002472:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8002474:	68fb      	ldr	r3, [r7, #12]
 8002476:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002478:	b29b      	uxth	r3, r3
 800247a:	3b01      	subs	r3, #1
 800247c:	b29a      	uxth	r2, r3
 800247e:	68fb      	ldr	r3, [r7, #12]
 8002480:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8002482:	68fb      	ldr	r3, [r7, #12]
 8002484:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002486:	b29b      	uxth	r3, r3
 8002488:	2b00      	cmp	r3, #0
 800248a:	d034      	beq.n	80024f6 <HAL_I2C_Master_Receive+0x186>
 800248c:	68fb      	ldr	r3, [r7, #12]
 800248e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002490:	2b00      	cmp	r3, #0
 8002492:	d130      	bne.n	80024f6 <HAL_I2C_Master_Receive+0x186>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8002494:	697b      	ldr	r3, [r7, #20]
 8002496:	9300      	str	r3, [sp, #0]
 8002498:	6a3b      	ldr	r3, [r7, #32]
 800249a:	2200      	movs	r2, #0
 800249c:	2180      	movs	r1, #128	; 0x80
 800249e:	68f8      	ldr	r0, [r7, #12]
 80024a0:	f000 f880 	bl	80025a4 <I2C_WaitOnFlagUntilTimeout>
 80024a4:	4603      	mov	r3, r0
 80024a6:	2b00      	cmp	r3, #0
 80024a8:	d001      	beq.n	80024ae <HAL_I2C_Master_Receive+0x13e>
        {
          return HAL_ERROR;
 80024aa:	2301      	movs	r3, #1
 80024ac:	e04d      	b.n	800254a <HAL_I2C_Master_Receive+0x1da>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80024ae:	68fb      	ldr	r3, [r7, #12]
 80024b0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80024b2:	b29b      	uxth	r3, r3
 80024b4:	2bff      	cmp	r3, #255	; 0xff
 80024b6:	d90e      	bls.n	80024d6 <HAL_I2C_Master_Receive+0x166>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80024b8:	68fb      	ldr	r3, [r7, #12]
 80024ba:	22ff      	movs	r2, #255	; 0xff
 80024bc:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80024be:	68fb      	ldr	r3, [r7, #12]
 80024c0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80024c2:	b2da      	uxtb	r2, r3
 80024c4:	8979      	ldrh	r1, [r7, #10]
 80024c6:	2300      	movs	r3, #0
 80024c8:	9300      	str	r3, [sp, #0]
 80024ca:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80024ce:	68f8      	ldr	r0, [r7, #12]
 80024d0:	f000 fa8a 	bl	80029e8 <I2C_TransferConfig>
 80024d4:	e00f      	b.n	80024f6 <HAL_I2C_Master_Receive+0x186>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80024d6:	68fb      	ldr	r3, [r7, #12]
 80024d8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80024da:	b29a      	uxth	r2, r3
 80024dc:	68fb      	ldr	r3, [r7, #12]
 80024de:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80024e0:	68fb      	ldr	r3, [r7, #12]
 80024e2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80024e4:	b2da      	uxtb	r2, r3
 80024e6:	8979      	ldrh	r1, [r7, #10]
 80024e8:	2300      	movs	r3, #0
 80024ea:	9300      	str	r3, [sp, #0]
 80024ec:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80024f0:	68f8      	ldr	r0, [r7, #12]
 80024f2:	f000 fa79 	bl	80029e8 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 80024f6:	68fb      	ldr	r3, [r7, #12]
 80024f8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80024fa:	b29b      	uxth	r3, r3
 80024fc:	2b00      	cmp	r3, #0
 80024fe:	d19d      	bne.n	800243c <HAL_I2C_Master_Receive+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002500:	697a      	ldr	r2, [r7, #20]
 8002502:	6a39      	ldr	r1, [r7, #32]
 8002504:	68f8      	ldr	r0, [r7, #12]
 8002506:	f000 f8cd 	bl	80026a4 <I2C_WaitOnSTOPFlagUntilTimeout>
 800250a:	4603      	mov	r3, r0
 800250c:	2b00      	cmp	r3, #0
 800250e:	d001      	beq.n	8002514 <HAL_I2C_Master_Receive+0x1a4>
    {
      return HAL_ERROR;
 8002510:	2301      	movs	r3, #1
 8002512:	e01a      	b.n	800254a <HAL_I2C_Master_Receive+0x1da>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002514:	68fb      	ldr	r3, [r7, #12]
 8002516:	681b      	ldr	r3, [r3, #0]
 8002518:	2220      	movs	r2, #32
 800251a:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800251c:	68fb      	ldr	r3, [r7, #12]
 800251e:	681b      	ldr	r3, [r3, #0]
 8002520:	6859      	ldr	r1, [r3, #4]
 8002522:	68fb      	ldr	r3, [r7, #12]
 8002524:	681a      	ldr	r2, [r3, #0]
 8002526:	4b0c      	ldr	r3, [pc, #48]	; (8002558 <HAL_I2C_Master_Receive+0x1e8>)
 8002528:	400b      	ands	r3, r1
 800252a:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800252c:	68fb      	ldr	r3, [r7, #12]
 800252e:	2220      	movs	r2, #32
 8002530:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8002534:	68fb      	ldr	r3, [r7, #12]
 8002536:	2200      	movs	r2, #0
 8002538:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800253c:	68fb      	ldr	r3, [r7, #12]
 800253e:	2200      	movs	r2, #0
 8002540:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002544:	2300      	movs	r3, #0
 8002546:	e000      	b.n	800254a <HAL_I2C_Master_Receive+0x1da>
  }
  else
  {
    return HAL_BUSY;
 8002548:	2302      	movs	r3, #2
  }
}
 800254a:	4618      	mov	r0, r3
 800254c:	3718      	adds	r7, #24
 800254e:	46bd      	mov	sp, r7
 8002550:	bd80      	pop	{r7, pc}
 8002552:	bf00      	nop
 8002554:	80002400 	.word	0x80002400
 8002558:	fe00e800 	.word	0xfe00e800

0800255c <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 800255c:	b480      	push	{r7}
 800255e:	b083      	sub	sp, #12
 8002560:	af00      	add	r7, sp, #0
 8002562:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	681b      	ldr	r3, [r3, #0]
 8002568:	699b      	ldr	r3, [r3, #24]
 800256a:	f003 0302 	and.w	r3, r3, #2
 800256e:	2b02      	cmp	r3, #2
 8002570:	d103      	bne.n	800257a <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	681b      	ldr	r3, [r3, #0]
 8002576:	2200      	movs	r2, #0
 8002578:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	681b      	ldr	r3, [r3, #0]
 800257e:	699b      	ldr	r3, [r3, #24]
 8002580:	f003 0301 	and.w	r3, r3, #1
 8002584:	2b01      	cmp	r3, #1
 8002586:	d007      	beq.n	8002598 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	681b      	ldr	r3, [r3, #0]
 800258c:	699a      	ldr	r2, [r3, #24]
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	681b      	ldr	r3, [r3, #0]
 8002592:	f042 0201 	orr.w	r2, r2, #1
 8002596:	619a      	str	r2, [r3, #24]
  }
}
 8002598:	bf00      	nop
 800259a:	370c      	adds	r7, #12
 800259c:	46bd      	mov	sp, r7
 800259e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025a2:	4770      	bx	lr

080025a4 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 80025a4:	b580      	push	{r7, lr}
 80025a6:	b084      	sub	sp, #16
 80025a8:	af00      	add	r7, sp, #0
 80025aa:	60f8      	str	r0, [r7, #12]
 80025ac:	60b9      	str	r1, [r7, #8]
 80025ae:	603b      	str	r3, [r7, #0]
 80025b0:	4613      	mov	r3, r2
 80025b2:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80025b4:	e022      	b.n	80025fc <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80025b6:	683b      	ldr	r3, [r7, #0]
 80025b8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80025bc:	d01e      	beq.n	80025fc <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80025be:	f7ff fabf 	bl	8001b40 <HAL_GetTick>
 80025c2:	4602      	mov	r2, r0
 80025c4:	69bb      	ldr	r3, [r7, #24]
 80025c6:	1ad3      	subs	r3, r2, r3
 80025c8:	683a      	ldr	r2, [r7, #0]
 80025ca:	429a      	cmp	r2, r3
 80025cc:	d302      	bcc.n	80025d4 <I2C_WaitOnFlagUntilTimeout+0x30>
 80025ce:	683b      	ldr	r3, [r7, #0]
 80025d0:	2b00      	cmp	r3, #0
 80025d2:	d113      	bne.n	80025fc <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80025d4:	68fb      	ldr	r3, [r7, #12]
 80025d6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80025d8:	f043 0220 	orr.w	r2, r3, #32
 80025dc:	68fb      	ldr	r3, [r7, #12]
 80025de:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80025e0:	68fb      	ldr	r3, [r7, #12]
 80025e2:	2220      	movs	r2, #32
 80025e4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80025e8:	68fb      	ldr	r3, [r7, #12]
 80025ea:	2200      	movs	r2, #0
 80025ec:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80025f0:	68fb      	ldr	r3, [r7, #12]
 80025f2:	2200      	movs	r2, #0
 80025f4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 80025f8:	2301      	movs	r3, #1
 80025fa:	e00f      	b.n	800261c <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80025fc:	68fb      	ldr	r3, [r7, #12]
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	699a      	ldr	r2, [r3, #24]
 8002602:	68bb      	ldr	r3, [r7, #8]
 8002604:	4013      	ands	r3, r2
 8002606:	68ba      	ldr	r2, [r7, #8]
 8002608:	429a      	cmp	r2, r3
 800260a:	bf0c      	ite	eq
 800260c:	2301      	moveq	r3, #1
 800260e:	2300      	movne	r3, #0
 8002610:	b2db      	uxtb	r3, r3
 8002612:	461a      	mov	r2, r3
 8002614:	79fb      	ldrb	r3, [r7, #7]
 8002616:	429a      	cmp	r2, r3
 8002618:	d0cd      	beq.n	80025b6 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800261a:	2300      	movs	r3, #0
}
 800261c:	4618      	mov	r0, r3
 800261e:	3710      	adds	r7, #16
 8002620:	46bd      	mov	sp, r7
 8002622:	bd80      	pop	{r7, pc}

08002624 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8002624:	b580      	push	{r7, lr}
 8002626:	b084      	sub	sp, #16
 8002628:	af00      	add	r7, sp, #0
 800262a:	60f8      	str	r0, [r7, #12]
 800262c:	60b9      	str	r1, [r7, #8]
 800262e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8002630:	e02c      	b.n	800268c <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8002632:	687a      	ldr	r2, [r7, #4]
 8002634:	68b9      	ldr	r1, [r7, #8]
 8002636:	68f8      	ldr	r0, [r7, #12]
 8002638:	f000 f8ea 	bl	8002810 <I2C_IsErrorOccurred>
 800263c:	4603      	mov	r3, r0
 800263e:	2b00      	cmp	r3, #0
 8002640:	d001      	beq.n	8002646 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8002642:	2301      	movs	r3, #1
 8002644:	e02a      	b.n	800269c <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002646:	68bb      	ldr	r3, [r7, #8]
 8002648:	f1b3 3fff 	cmp.w	r3, #4294967295
 800264c:	d01e      	beq.n	800268c <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800264e:	f7ff fa77 	bl	8001b40 <HAL_GetTick>
 8002652:	4602      	mov	r2, r0
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	1ad3      	subs	r3, r2, r3
 8002658:	68ba      	ldr	r2, [r7, #8]
 800265a:	429a      	cmp	r2, r3
 800265c:	d302      	bcc.n	8002664 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 800265e:	68bb      	ldr	r3, [r7, #8]
 8002660:	2b00      	cmp	r3, #0
 8002662:	d113      	bne.n	800268c <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002664:	68fb      	ldr	r3, [r7, #12]
 8002666:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002668:	f043 0220 	orr.w	r2, r3, #32
 800266c:	68fb      	ldr	r3, [r7, #12]
 800266e:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8002670:	68fb      	ldr	r3, [r7, #12]
 8002672:	2220      	movs	r2, #32
 8002674:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002678:	68fb      	ldr	r3, [r7, #12]
 800267a:	2200      	movs	r2, #0
 800267c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002680:	68fb      	ldr	r3, [r7, #12]
 8002682:	2200      	movs	r2, #0
 8002684:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8002688:	2301      	movs	r3, #1
 800268a:	e007      	b.n	800269c <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800268c:	68fb      	ldr	r3, [r7, #12]
 800268e:	681b      	ldr	r3, [r3, #0]
 8002690:	699b      	ldr	r3, [r3, #24]
 8002692:	f003 0302 	and.w	r3, r3, #2
 8002696:	2b02      	cmp	r3, #2
 8002698:	d1cb      	bne.n	8002632 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800269a:	2300      	movs	r3, #0
}
 800269c:	4618      	mov	r0, r3
 800269e:	3710      	adds	r7, #16
 80026a0:	46bd      	mov	sp, r7
 80026a2:	bd80      	pop	{r7, pc}

080026a4 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80026a4:	b580      	push	{r7, lr}
 80026a6:	b084      	sub	sp, #16
 80026a8:	af00      	add	r7, sp, #0
 80026aa:	60f8      	str	r0, [r7, #12]
 80026ac:	60b9      	str	r1, [r7, #8]
 80026ae:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80026b0:	e028      	b.n	8002704 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80026b2:	687a      	ldr	r2, [r7, #4]
 80026b4:	68b9      	ldr	r1, [r7, #8]
 80026b6:	68f8      	ldr	r0, [r7, #12]
 80026b8:	f000 f8aa 	bl	8002810 <I2C_IsErrorOccurred>
 80026bc:	4603      	mov	r3, r0
 80026be:	2b00      	cmp	r3, #0
 80026c0:	d001      	beq.n	80026c6 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80026c2:	2301      	movs	r3, #1
 80026c4:	e026      	b.n	8002714 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80026c6:	f7ff fa3b 	bl	8001b40 <HAL_GetTick>
 80026ca:	4602      	mov	r2, r0
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	1ad3      	subs	r3, r2, r3
 80026d0:	68ba      	ldr	r2, [r7, #8]
 80026d2:	429a      	cmp	r2, r3
 80026d4:	d302      	bcc.n	80026dc <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 80026d6:	68bb      	ldr	r3, [r7, #8]
 80026d8:	2b00      	cmp	r3, #0
 80026da:	d113      	bne.n	8002704 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80026dc:	68fb      	ldr	r3, [r7, #12]
 80026de:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80026e0:	f043 0220 	orr.w	r2, r3, #32
 80026e4:	68fb      	ldr	r3, [r7, #12]
 80026e6:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 80026e8:	68fb      	ldr	r3, [r7, #12]
 80026ea:	2220      	movs	r2, #32
 80026ec:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80026f0:	68fb      	ldr	r3, [r7, #12]
 80026f2:	2200      	movs	r2, #0
 80026f4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80026f8:	68fb      	ldr	r3, [r7, #12]
 80026fa:	2200      	movs	r2, #0
 80026fc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8002700:	2301      	movs	r3, #1
 8002702:	e007      	b.n	8002714 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002704:	68fb      	ldr	r3, [r7, #12]
 8002706:	681b      	ldr	r3, [r3, #0]
 8002708:	699b      	ldr	r3, [r3, #24]
 800270a:	f003 0320 	and.w	r3, r3, #32
 800270e:	2b20      	cmp	r3, #32
 8002710:	d1cf      	bne.n	80026b2 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8002712:	2300      	movs	r3, #0
}
 8002714:	4618      	mov	r0, r3
 8002716:	3710      	adds	r7, #16
 8002718:	46bd      	mov	sp, r7
 800271a:	bd80      	pop	{r7, pc}

0800271c <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 800271c:	b580      	push	{r7, lr}
 800271e:	b084      	sub	sp, #16
 8002720:	af00      	add	r7, sp, #0
 8002722:	60f8      	str	r0, [r7, #12]
 8002724:	60b9      	str	r1, [r7, #8]
 8002726:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8002728:	e064      	b.n	80027f4 <I2C_WaitOnRXNEFlagUntilTimeout+0xd8>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800272a:	687a      	ldr	r2, [r7, #4]
 800272c:	68b9      	ldr	r1, [r7, #8]
 800272e:	68f8      	ldr	r0, [r7, #12]
 8002730:	f000 f86e 	bl	8002810 <I2C_IsErrorOccurred>
 8002734:	4603      	mov	r3, r0
 8002736:	2b00      	cmp	r3, #0
 8002738:	d001      	beq.n	800273e <I2C_WaitOnRXNEFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800273a:	2301      	movs	r3, #1
 800273c:	e062      	b.n	8002804 <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
    }

    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800273e:	68fb      	ldr	r3, [r7, #12]
 8002740:	681b      	ldr	r3, [r3, #0]
 8002742:	699b      	ldr	r3, [r3, #24]
 8002744:	f003 0320 	and.w	r3, r3, #32
 8002748:	2b20      	cmp	r3, #32
 800274a:	d138      	bne.n	80027be <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 800274c:	68fb      	ldr	r3, [r7, #12]
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	699b      	ldr	r3, [r3, #24]
 8002752:	f003 0304 	and.w	r3, r3, #4
 8002756:	2b04      	cmp	r3, #4
 8002758:	d105      	bne.n	8002766 <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
 800275a:	68fb      	ldr	r3, [r7, #12]
 800275c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800275e:	2b00      	cmp	r3, #0
 8002760:	d001      	beq.n	8002766 <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        return HAL_OK;
 8002762:	2300      	movs	r3, #0
 8002764:	e04e      	b.n	8002804 <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
      }
      else
      {
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002766:	68fb      	ldr	r3, [r7, #12]
 8002768:	681b      	ldr	r3, [r3, #0]
 800276a:	699b      	ldr	r3, [r3, #24]
 800276c:	f003 0310 	and.w	r3, r3, #16
 8002770:	2b10      	cmp	r3, #16
 8002772:	d107      	bne.n	8002784 <I2C_WaitOnRXNEFlagUntilTimeout+0x68>
        {
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002774:	68fb      	ldr	r3, [r7, #12]
 8002776:	681b      	ldr	r3, [r3, #0]
 8002778:	2210      	movs	r2, #16
 800277a:	61da      	str	r2, [r3, #28]
          hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 800277c:	68fb      	ldr	r3, [r7, #12]
 800277e:	2204      	movs	r2, #4
 8002780:	645a      	str	r2, [r3, #68]	; 0x44
 8002782:	e002      	b.n	800278a <I2C_WaitOnRXNEFlagUntilTimeout+0x6e>
        }
        else
        {
          hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002784:	68fb      	ldr	r3, [r7, #12]
 8002786:	2200      	movs	r2, #0
 8002788:	645a      	str	r2, [r3, #68]	; 0x44
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800278a:	68fb      	ldr	r3, [r7, #12]
 800278c:	681b      	ldr	r3, [r3, #0]
 800278e:	2220      	movs	r2, #32
 8002790:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 8002792:	68fb      	ldr	r3, [r7, #12]
 8002794:	681b      	ldr	r3, [r3, #0]
 8002796:	6859      	ldr	r1, [r3, #4]
 8002798:	68fb      	ldr	r3, [r7, #12]
 800279a:	681a      	ldr	r2, [r3, #0]
 800279c:	4b1b      	ldr	r3, [pc, #108]	; (800280c <I2C_WaitOnRXNEFlagUntilTimeout+0xf0>)
 800279e:	400b      	ands	r3, r1
 80027a0:	6053      	str	r3, [r2, #4]

        hi2c->State = HAL_I2C_STATE_READY;
 80027a2:	68fb      	ldr	r3, [r7, #12]
 80027a4:	2220      	movs	r2, #32
 80027a6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80027aa:	68fb      	ldr	r3, [r7, #12]
 80027ac:	2200      	movs	r2, #0
 80027ae:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80027b2:	68fb      	ldr	r3, [r7, #12]
 80027b4:	2200      	movs	r2, #0
 80027b6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 80027ba:	2301      	movs	r3, #1
 80027bc:	e022      	b.n	8002804 <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
      }
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80027be:	f7ff f9bf 	bl	8001b40 <HAL_GetTick>
 80027c2:	4602      	mov	r2, r0
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	1ad3      	subs	r3, r2, r3
 80027c8:	68ba      	ldr	r2, [r7, #8]
 80027ca:	429a      	cmp	r2, r3
 80027cc:	d302      	bcc.n	80027d4 <I2C_WaitOnRXNEFlagUntilTimeout+0xb8>
 80027ce:	68bb      	ldr	r3, [r7, #8]
 80027d0:	2b00      	cmp	r3, #0
 80027d2:	d10f      	bne.n	80027f4 <I2C_WaitOnRXNEFlagUntilTimeout+0xd8>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80027d4:	68fb      	ldr	r3, [r7, #12]
 80027d6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80027d8:	f043 0220 	orr.w	r2, r3, #32
 80027dc:	68fb      	ldr	r3, [r7, #12]
 80027de:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 80027e0:	68fb      	ldr	r3, [r7, #12]
 80027e2:	2220      	movs	r2, #32
 80027e4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80027e8:	68fb      	ldr	r3, [r7, #12]
 80027ea:	2200      	movs	r2, #0
 80027ec:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 80027f0:	2301      	movs	r3, #1
 80027f2:	e007      	b.n	8002804 <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80027f4:	68fb      	ldr	r3, [r7, #12]
 80027f6:	681b      	ldr	r3, [r3, #0]
 80027f8:	699b      	ldr	r3, [r3, #24]
 80027fa:	f003 0304 	and.w	r3, r3, #4
 80027fe:	2b04      	cmp	r3, #4
 8002800:	d193      	bne.n	800272a <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8002802:	2300      	movs	r3, #0
}
 8002804:	4618      	mov	r0, r3
 8002806:	3710      	adds	r7, #16
 8002808:	46bd      	mov	sp, r7
 800280a:	bd80      	pop	{r7, pc}
 800280c:	fe00e800 	.word	0xfe00e800

08002810 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002810:	b580      	push	{r7, lr}
 8002812:	b08a      	sub	sp, #40	; 0x28
 8002814:	af00      	add	r7, sp, #0
 8002816:	60f8      	str	r0, [r7, #12]
 8002818:	60b9      	str	r1, [r7, #8]
 800281a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800281c:	2300      	movs	r3, #0
 800281e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8002822:	68fb      	ldr	r3, [r7, #12]
 8002824:	681b      	ldr	r3, [r3, #0]
 8002826:	699b      	ldr	r3, [r3, #24]
 8002828:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 800282a:	2300      	movs	r3, #0
 800282c:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8002832:	69bb      	ldr	r3, [r7, #24]
 8002834:	f003 0310 	and.w	r3, r3, #16
 8002838:	2b00      	cmp	r3, #0
 800283a:	d075      	beq.n	8002928 <I2C_IsErrorOccurred+0x118>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800283c:	68fb      	ldr	r3, [r7, #12]
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	2210      	movs	r2, #16
 8002842:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8002844:	e056      	b.n	80028f4 <I2C_IsErrorOccurred+0xe4>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8002846:	68bb      	ldr	r3, [r7, #8]
 8002848:	f1b3 3fff 	cmp.w	r3, #4294967295
 800284c:	d052      	beq.n	80028f4 <I2C_IsErrorOccurred+0xe4>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800284e:	f7ff f977 	bl	8001b40 <HAL_GetTick>
 8002852:	4602      	mov	r2, r0
 8002854:	69fb      	ldr	r3, [r7, #28]
 8002856:	1ad3      	subs	r3, r2, r3
 8002858:	68ba      	ldr	r2, [r7, #8]
 800285a:	429a      	cmp	r2, r3
 800285c:	d302      	bcc.n	8002864 <I2C_IsErrorOccurred+0x54>
 800285e:	68bb      	ldr	r3, [r7, #8]
 8002860:	2b00      	cmp	r3, #0
 8002862:	d147      	bne.n	80028f4 <I2C_IsErrorOccurred+0xe4>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8002864:	68fb      	ldr	r3, [r7, #12]
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	685b      	ldr	r3, [r3, #4]
 800286a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800286e:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8002870:	68fb      	ldr	r3, [r7, #12]
 8002872:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8002876:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8002878:	68fb      	ldr	r3, [r7, #12]
 800287a:	681b      	ldr	r3, [r3, #0]
 800287c:	699b      	ldr	r3, [r3, #24]
 800287e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002882:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002886:	d12e      	bne.n	80028e6 <I2C_IsErrorOccurred+0xd6>
 8002888:	697b      	ldr	r3, [r7, #20]
 800288a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800288e:	d02a      	beq.n	80028e6 <I2C_IsErrorOccurred+0xd6>
              (tmp1 != I2C_CR2_STOP) && \
 8002890:	7cfb      	ldrb	r3, [r7, #19]
 8002892:	2b20      	cmp	r3, #32
 8002894:	d027      	beq.n	80028e6 <I2C_IsErrorOccurred+0xd6>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8002896:	68fb      	ldr	r3, [r7, #12]
 8002898:	681b      	ldr	r3, [r3, #0]
 800289a:	685a      	ldr	r2, [r3, #4]
 800289c:	68fb      	ldr	r3, [r7, #12]
 800289e:	681b      	ldr	r3, [r3, #0]
 80028a0:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80028a4:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 80028a6:	f7ff f94b 	bl	8001b40 <HAL_GetTick>
 80028aa:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80028ac:	e01b      	b.n	80028e6 <I2C_IsErrorOccurred+0xd6>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 80028ae:	f7ff f947 	bl	8001b40 <HAL_GetTick>
 80028b2:	4602      	mov	r2, r0
 80028b4:	69fb      	ldr	r3, [r7, #28]
 80028b6:	1ad3      	subs	r3, r2, r3
 80028b8:	2b19      	cmp	r3, #25
 80028ba:	d914      	bls.n	80028e6 <I2C_IsErrorOccurred+0xd6>
            {
              hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80028bc:	68fb      	ldr	r3, [r7, #12]
 80028be:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80028c0:	f043 0220 	orr.w	r2, r3, #32
 80028c4:	68fb      	ldr	r3, [r7, #12]
 80028c6:	645a      	str	r2, [r3, #68]	; 0x44
              hi2c->State = HAL_I2C_STATE_READY;
 80028c8:	68fb      	ldr	r3, [r7, #12]
 80028ca:	2220      	movs	r2, #32
 80028cc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
              hi2c->Mode = HAL_I2C_MODE_NONE;
 80028d0:	68fb      	ldr	r3, [r7, #12]
 80028d2:	2200      	movs	r2, #0
 80028d4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 80028d8:	68fb      	ldr	r3, [r7, #12]
 80028da:	2200      	movs	r2, #0
 80028dc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

              status = HAL_ERROR;
 80028e0:	2301      	movs	r3, #1
 80028e2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80028e6:	68fb      	ldr	r3, [r7, #12]
 80028e8:	681b      	ldr	r3, [r3, #0]
 80028ea:	699b      	ldr	r3, [r3, #24]
 80028ec:	f003 0320 	and.w	r3, r3, #32
 80028f0:	2b20      	cmp	r3, #32
 80028f2:	d1dc      	bne.n	80028ae <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80028f4:	68fb      	ldr	r3, [r7, #12]
 80028f6:	681b      	ldr	r3, [r3, #0]
 80028f8:	699b      	ldr	r3, [r3, #24]
 80028fa:	f003 0320 	and.w	r3, r3, #32
 80028fe:	2b20      	cmp	r3, #32
 8002900:	d003      	beq.n	800290a <I2C_IsErrorOccurred+0xfa>
 8002902:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002906:	2b00      	cmp	r3, #0
 8002908:	d09d      	beq.n	8002846 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 800290a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800290e:	2b00      	cmp	r3, #0
 8002910:	d103      	bne.n	800291a <I2C_IsErrorOccurred+0x10a>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002912:	68fb      	ldr	r3, [r7, #12]
 8002914:	681b      	ldr	r3, [r3, #0]
 8002916:	2220      	movs	r2, #32
 8002918:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 800291a:	6a3b      	ldr	r3, [r7, #32]
 800291c:	f043 0304 	orr.w	r3, r3, #4
 8002920:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8002922:	2301      	movs	r3, #1
 8002924:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8002928:	68fb      	ldr	r3, [r7, #12]
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	699b      	ldr	r3, [r3, #24]
 800292e:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8002930:	69bb      	ldr	r3, [r7, #24]
 8002932:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002936:	2b00      	cmp	r3, #0
 8002938:	d00b      	beq.n	8002952 <I2C_IsErrorOccurred+0x142>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 800293a:	6a3b      	ldr	r3, [r7, #32]
 800293c:	f043 0301 	orr.w	r3, r3, #1
 8002940:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8002942:	68fb      	ldr	r3, [r7, #12]
 8002944:	681b      	ldr	r3, [r3, #0]
 8002946:	f44f 7280 	mov.w	r2, #256	; 0x100
 800294a:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800294c:	2301      	movs	r3, #1
 800294e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8002952:	69bb      	ldr	r3, [r7, #24]
 8002954:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002958:	2b00      	cmp	r3, #0
 800295a:	d00b      	beq.n	8002974 <I2C_IsErrorOccurred+0x164>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 800295c:	6a3b      	ldr	r3, [r7, #32]
 800295e:	f043 0308 	orr.w	r3, r3, #8
 8002962:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8002964:	68fb      	ldr	r3, [r7, #12]
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800296c:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800296e:	2301      	movs	r3, #1
 8002970:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8002974:	69bb      	ldr	r3, [r7, #24]
 8002976:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800297a:	2b00      	cmp	r3, #0
 800297c:	d00b      	beq.n	8002996 <I2C_IsErrorOccurred+0x186>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 800297e:	6a3b      	ldr	r3, [r7, #32]
 8002980:	f043 0302 	orr.w	r3, r3, #2
 8002984:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8002986:	68fb      	ldr	r3, [r7, #12]
 8002988:	681b      	ldr	r3, [r3, #0]
 800298a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800298e:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8002990:	2301      	movs	r3, #1
 8002992:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 8002996:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800299a:	2b00      	cmp	r3, #0
 800299c:	d01c      	beq.n	80029d8 <I2C_IsErrorOccurred+0x1c8>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 800299e:	68f8      	ldr	r0, [r7, #12]
 80029a0:	f7ff fddc 	bl	800255c <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80029a4:	68fb      	ldr	r3, [r7, #12]
 80029a6:	681b      	ldr	r3, [r3, #0]
 80029a8:	6859      	ldr	r1, [r3, #4]
 80029aa:	68fb      	ldr	r3, [r7, #12]
 80029ac:	681a      	ldr	r2, [r3, #0]
 80029ae:	4b0d      	ldr	r3, [pc, #52]	; (80029e4 <I2C_IsErrorOccurred+0x1d4>)
 80029b0:	400b      	ands	r3, r1
 80029b2:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 80029b4:	68fb      	ldr	r3, [r7, #12]
 80029b6:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80029b8:	6a3b      	ldr	r3, [r7, #32]
 80029ba:	431a      	orrs	r2, r3
 80029bc:	68fb      	ldr	r3, [r7, #12]
 80029be:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 80029c0:	68fb      	ldr	r3, [r7, #12]
 80029c2:	2220      	movs	r2, #32
 80029c4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80029c8:	68fb      	ldr	r3, [r7, #12]
 80029ca:	2200      	movs	r2, #0
 80029cc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80029d0:	68fb      	ldr	r3, [r7, #12]
 80029d2:	2200      	movs	r2, #0
 80029d4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 80029d8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 80029dc:	4618      	mov	r0, r3
 80029de:	3728      	adds	r7, #40	; 0x28
 80029e0:	46bd      	mov	sp, r7
 80029e2:	bd80      	pop	{r7, pc}
 80029e4:	fe00e800 	.word	0xfe00e800

080029e8 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 80029e8:	b480      	push	{r7}
 80029ea:	b087      	sub	sp, #28
 80029ec:	af00      	add	r7, sp, #0
 80029ee:	60f8      	str	r0, [r7, #12]
 80029f0:	607b      	str	r3, [r7, #4]
 80029f2:	460b      	mov	r3, r1
 80029f4:	817b      	strh	r3, [r7, #10]
 80029f6:	4613      	mov	r3, r2
 80029f8:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80029fa:	897b      	ldrh	r3, [r7, #10]
 80029fc:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8002a00:	7a7b      	ldrb	r3, [r7, #9]
 8002a02:	041b      	lsls	r3, r3, #16
 8002a04:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8002a08:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8002a0e:	6a3b      	ldr	r3, [r7, #32]
 8002a10:	4313      	orrs	r3, r2
 8002a12:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8002a16:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8002a18:	68fb      	ldr	r3, [r7, #12]
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	685a      	ldr	r2, [r3, #4]
 8002a1e:	6a3b      	ldr	r3, [r7, #32]
 8002a20:	0d5b      	lsrs	r3, r3, #21
 8002a22:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8002a26:	4b08      	ldr	r3, [pc, #32]	; (8002a48 <I2C_TransferConfig+0x60>)
 8002a28:	430b      	orrs	r3, r1
 8002a2a:	43db      	mvns	r3, r3
 8002a2c:	ea02 0103 	and.w	r1, r2, r3
 8002a30:	68fb      	ldr	r3, [r7, #12]
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	697a      	ldr	r2, [r7, #20]
 8002a36:	430a      	orrs	r2, r1
 8002a38:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8002a3a:	bf00      	nop
 8002a3c:	371c      	adds	r7, #28
 8002a3e:	46bd      	mov	sp, r7
 8002a40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a44:	4770      	bx	lr
 8002a46:	bf00      	nop
 8002a48:	03ff63ff 	.word	0x03ff63ff

08002a4c <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8002a4c:	b480      	push	{r7}
 8002a4e:	b083      	sub	sp, #12
 8002a50:	af00      	add	r7, sp, #0
 8002a52:	6078      	str	r0, [r7, #4]
 8002a54:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002a5c:	b2db      	uxtb	r3, r3
 8002a5e:	2b20      	cmp	r3, #32
 8002a60:	d138      	bne.n	8002ad4 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002a68:	2b01      	cmp	r3, #1
 8002a6a:	d101      	bne.n	8002a70 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8002a6c:	2302      	movs	r3, #2
 8002a6e:	e032      	b.n	8002ad6 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	2201      	movs	r2, #1
 8002a74:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	2224      	movs	r2, #36	; 0x24
 8002a7c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	681a      	ldr	r2, [r3, #0]
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	f022 0201 	bic.w	r2, r2, #1
 8002a8e:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	681b      	ldr	r3, [r3, #0]
 8002a94:	681a      	ldr	r2, [r3, #0]
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	681b      	ldr	r3, [r3, #0]
 8002a9a:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8002a9e:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	681b      	ldr	r3, [r3, #0]
 8002aa4:	6819      	ldr	r1, [r3, #0]
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	681b      	ldr	r3, [r3, #0]
 8002aaa:	683a      	ldr	r2, [r7, #0]
 8002aac:	430a      	orrs	r2, r1
 8002aae:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	681b      	ldr	r3, [r3, #0]
 8002ab4:	681a      	ldr	r2, [r3, #0]
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	681b      	ldr	r3, [r3, #0]
 8002aba:	f042 0201 	orr.w	r2, r2, #1
 8002abe:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	2220      	movs	r2, #32
 8002ac4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	2200      	movs	r2, #0
 8002acc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002ad0:	2300      	movs	r3, #0
 8002ad2:	e000      	b.n	8002ad6 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8002ad4:	2302      	movs	r3, #2
  }
}
 8002ad6:	4618      	mov	r0, r3
 8002ad8:	370c      	adds	r7, #12
 8002ada:	46bd      	mov	sp, r7
 8002adc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ae0:	4770      	bx	lr

08002ae2 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8002ae2:	b480      	push	{r7}
 8002ae4:	b085      	sub	sp, #20
 8002ae6:	af00      	add	r7, sp, #0
 8002ae8:	6078      	str	r0, [r7, #4]
 8002aea:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002af2:	b2db      	uxtb	r3, r3
 8002af4:	2b20      	cmp	r3, #32
 8002af6:	d139      	bne.n	8002b6c <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002afe:	2b01      	cmp	r3, #1
 8002b00:	d101      	bne.n	8002b06 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8002b02:	2302      	movs	r3, #2
 8002b04:	e033      	b.n	8002b6e <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	2201      	movs	r2, #1
 8002b0a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	2224      	movs	r2, #36	; 0x24
 8002b12:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	681b      	ldr	r3, [r3, #0]
 8002b1a:	681a      	ldr	r2, [r3, #0]
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	681b      	ldr	r3, [r3, #0]
 8002b20:	f022 0201 	bic.w	r2, r2, #1
 8002b24:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	681b      	ldr	r3, [r3, #0]
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8002b2e:	68fb      	ldr	r3, [r7, #12]
 8002b30:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8002b34:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8002b36:	683b      	ldr	r3, [r7, #0]
 8002b38:	021b      	lsls	r3, r3, #8
 8002b3a:	68fa      	ldr	r2, [r7, #12]
 8002b3c:	4313      	orrs	r3, r2
 8002b3e:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	68fa      	ldr	r2, [r7, #12]
 8002b46:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	681b      	ldr	r3, [r3, #0]
 8002b4c:	681a      	ldr	r2, [r3, #0]
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	681b      	ldr	r3, [r3, #0]
 8002b52:	f042 0201 	orr.w	r2, r2, #1
 8002b56:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	2220      	movs	r2, #32
 8002b5c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	2200      	movs	r2, #0
 8002b64:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002b68:	2300      	movs	r3, #0
 8002b6a:	e000      	b.n	8002b6e <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8002b6c:	2302      	movs	r3, #2
  }
}
 8002b6e:	4618      	mov	r0, r3
 8002b70:	3714      	adds	r7, #20
 8002b72:	46bd      	mov	sp, r7
 8002b74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b78:	4770      	bx	lr
	...

08002b7c <HAL_PWR_EnableBkUpAccess>:
  * @note  LSEON bit that switches on and off the LSE crystal belongs as well to the
  *        back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8002b7c:	b480      	push	{r7}
 8002b7e:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002b80:	4b05      	ldr	r3, [pc, #20]	; (8002b98 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8002b82:	681b      	ldr	r3, [r3, #0]
 8002b84:	4a04      	ldr	r2, [pc, #16]	; (8002b98 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8002b86:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002b8a:	6013      	str	r3, [r2, #0]
}
 8002b8c:	bf00      	nop
 8002b8e:	46bd      	mov	sp, r7
 8002b90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b94:	4770      	bx	lr
 8002b96:	bf00      	nop
 8002b98:	40007000 	.word	0x40007000

08002b9c <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8002b9c:	b480      	push	{r7}
 8002b9e:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8002ba0:	4b04      	ldr	r3, [pc, #16]	; (8002bb4 <HAL_PWREx_GetVoltageRange+0x18>)
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8002ba8:	4618      	mov	r0, r3
 8002baa:	46bd      	mov	sp, r7
 8002bac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bb0:	4770      	bx	lr
 8002bb2:	bf00      	nop
 8002bb4:	40007000 	.word	0x40007000

08002bb8 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8002bb8:	b480      	push	{r7}
 8002bba:	b085      	sub	sp, #20
 8002bbc:	af00      	add	r7, sp, #0
 8002bbe:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002bc6:	d130      	bne.n	8002c2a <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8002bc8:	4b23      	ldr	r3, [pc, #140]	; (8002c58 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8002bd0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002bd4:	d038      	beq.n	8002c48 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8002bd6:	4b20      	ldr	r3, [pc, #128]	; (8002c58 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002bd8:	681b      	ldr	r3, [r3, #0]
 8002bda:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002bde:	4a1e      	ldr	r2, [pc, #120]	; (8002c58 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002be0:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002be4:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8002be6:	4b1d      	ldr	r3, [pc, #116]	; (8002c5c <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	2232      	movs	r2, #50	; 0x32
 8002bec:	fb02 f303 	mul.w	r3, r2, r3
 8002bf0:	4a1b      	ldr	r2, [pc, #108]	; (8002c60 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8002bf2:	fba2 2303 	umull	r2, r3, r2, r3
 8002bf6:	0c9b      	lsrs	r3, r3, #18
 8002bf8:	3301      	adds	r3, #1
 8002bfa:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002bfc:	e002      	b.n	8002c04 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8002bfe:	68fb      	ldr	r3, [r7, #12]
 8002c00:	3b01      	subs	r3, #1
 8002c02:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002c04:	4b14      	ldr	r3, [pc, #80]	; (8002c58 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002c06:	695b      	ldr	r3, [r3, #20]
 8002c08:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002c0c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002c10:	d102      	bne.n	8002c18 <HAL_PWREx_ControlVoltageScaling+0x60>
 8002c12:	68fb      	ldr	r3, [r7, #12]
 8002c14:	2b00      	cmp	r3, #0
 8002c16:	d1f2      	bne.n	8002bfe <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002c18:	4b0f      	ldr	r3, [pc, #60]	; (8002c58 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002c1a:	695b      	ldr	r3, [r3, #20]
 8002c1c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002c20:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002c24:	d110      	bne.n	8002c48 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8002c26:	2303      	movs	r3, #3
 8002c28:	e00f      	b.n	8002c4a <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8002c2a:	4b0b      	ldr	r3, [pc, #44]	; (8002c58 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002c2c:	681b      	ldr	r3, [r3, #0]
 8002c2e:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8002c32:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002c36:	d007      	beq.n	8002c48 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8002c38:	4b07      	ldr	r3, [pc, #28]	; (8002c58 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002c3a:	681b      	ldr	r3, [r3, #0]
 8002c3c:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002c40:	4a05      	ldr	r2, [pc, #20]	; (8002c58 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002c42:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002c46:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8002c48:	2300      	movs	r3, #0
}
 8002c4a:	4618      	mov	r0, r3
 8002c4c:	3714      	adds	r7, #20
 8002c4e:	46bd      	mov	sp, r7
 8002c50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c54:	4770      	bx	lr
 8002c56:	bf00      	nop
 8002c58:	40007000 	.word	0x40007000
 8002c5c:	20000000 	.word	0x20000000
 8002c60:	431bde83 	.word	0x431bde83

08002c64 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002c64:	b580      	push	{r7, lr}
 8002c66:	b088      	sub	sp, #32
 8002c68:	af00      	add	r7, sp, #0
 8002c6a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	2b00      	cmp	r3, #0
 8002c70:	d102      	bne.n	8002c78 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8002c72:	2301      	movs	r3, #1
 8002c74:	f000 bc02 	b.w	800347c <HAL_RCC_OscConfig+0x818>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002c78:	4b96      	ldr	r3, [pc, #600]	; (8002ed4 <HAL_RCC_OscConfig+0x270>)
 8002c7a:	689b      	ldr	r3, [r3, #8]
 8002c7c:	f003 030c 	and.w	r3, r3, #12
 8002c80:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002c82:	4b94      	ldr	r3, [pc, #592]	; (8002ed4 <HAL_RCC_OscConfig+0x270>)
 8002c84:	68db      	ldr	r3, [r3, #12]
 8002c86:	f003 0303 	and.w	r3, r3, #3
 8002c8a:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	f003 0310 	and.w	r3, r3, #16
 8002c94:	2b00      	cmp	r3, #0
 8002c96:	f000 80e4 	beq.w	8002e62 <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002c9a:	69bb      	ldr	r3, [r7, #24]
 8002c9c:	2b00      	cmp	r3, #0
 8002c9e:	d007      	beq.n	8002cb0 <HAL_RCC_OscConfig+0x4c>
 8002ca0:	69bb      	ldr	r3, [r7, #24]
 8002ca2:	2b0c      	cmp	r3, #12
 8002ca4:	f040 808b 	bne.w	8002dbe <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8002ca8:	697b      	ldr	r3, [r7, #20]
 8002caa:	2b01      	cmp	r3, #1
 8002cac:	f040 8087 	bne.w	8002dbe <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002cb0:	4b88      	ldr	r3, [pc, #544]	; (8002ed4 <HAL_RCC_OscConfig+0x270>)
 8002cb2:	681b      	ldr	r3, [r3, #0]
 8002cb4:	f003 0302 	and.w	r3, r3, #2
 8002cb8:	2b00      	cmp	r3, #0
 8002cba:	d005      	beq.n	8002cc8 <HAL_RCC_OscConfig+0x64>
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	699b      	ldr	r3, [r3, #24]
 8002cc0:	2b00      	cmp	r3, #0
 8002cc2:	d101      	bne.n	8002cc8 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 8002cc4:	2301      	movs	r3, #1
 8002cc6:	e3d9      	b.n	800347c <HAL_RCC_OscConfig+0x818>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	6a1a      	ldr	r2, [r3, #32]
 8002ccc:	4b81      	ldr	r3, [pc, #516]	; (8002ed4 <HAL_RCC_OscConfig+0x270>)
 8002cce:	681b      	ldr	r3, [r3, #0]
 8002cd0:	f003 0308 	and.w	r3, r3, #8
 8002cd4:	2b00      	cmp	r3, #0
 8002cd6:	d004      	beq.n	8002ce2 <HAL_RCC_OscConfig+0x7e>
 8002cd8:	4b7e      	ldr	r3, [pc, #504]	; (8002ed4 <HAL_RCC_OscConfig+0x270>)
 8002cda:	681b      	ldr	r3, [r3, #0]
 8002cdc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002ce0:	e005      	b.n	8002cee <HAL_RCC_OscConfig+0x8a>
 8002ce2:	4b7c      	ldr	r3, [pc, #496]	; (8002ed4 <HAL_RCC_OscConfig+0x270>)
 8002ce4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002ce8:	091b      	lsrs	r3, r3, #4
 8002cea:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002cee:	4293      	cmp	r3, r2
 8002cf0:	d223      	bcs.n	8002d3a <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	6a1b      	ldr	r3, [r3, #32]
 8002cf6:	4618      	mov	r0, r3
 8002cf8:	f000 fdbe 	bl	8003878 <RCC_SetFlashLatencyFromMSIRange>
 8002cfc:	4603      	mov	r3, r0
 8002cfe:	2b00      	cmp	r3, #0
 8002d00:	d001      	beq.n	8002d06 <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 8002d02:	2301      	movs	r3, #1
 8002d04:	e3ba      	b.n	800347c <HAL_RCC_OscConfig+0x818>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002d06:	4b73      	ldr	r3, [pc, #460]	; (8002ed4 <HAL_RCC_OscConfig+0x270>)
 8002d08:	681b      	ldr	r3, [r3, #0]
 8002d0a:	4a72      	ldr	r2, [pc, #456]	; (8002ed4 <HAL_RCC_OscConfig+0x270>)
 8002d0c:	f043 0308 	orr.w	r3, r3, #8
 8002d10:	6013      	str	r3, [r2, #0]
 8002d12:	4b70      	ldr	r3, [pc, #448]	; (8002ed4 <HAL_RCC_OscConfig+0x270>)
 8002d14:	681b      	ldr	r3, [r3, #0]
 8002d16:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	6a1b      	ldr	r3, [r3, #32]
 8002d1e:	496d      	ldr	r1, [pc, #436]	; (8002ed4 <HAL_RCC_OscConfig+0x270>)
 8002d20:	4313      	orrs	r3, r2
 8002d22:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002d24:	4b6b      	ldr	r3, [pc, #428]	; (8002ed4 <HAL_RCC_OscConfig+0x270>)
 8002d26:	685b      	ldr	r3, [r3, #4]
 8002d28:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	69db      	ldr	r3, [r3, #28]
 8002d30:	021b      	lsls	r3, r3, #8
 8002d32:	4968      	ldr	r1, [pc, #416]	; (8002ed4 <HAL_RCC_OscConfig+0x270>)
 8002d34:	4313      	orrs	r3, r2
 8002d36:	604b      	str	r3, [r1, #4]
 8002d38:	e025      	b.n	8002d86 <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002d3a:	4b66      	ldr	r3, [pc, #408]	; (8002ed4 <HAL_RCC_OscConfig+0x270>)
 8002d3c:	681b      	ldr	r3, [r3, #0]
 8002d3e:	4a65      	ldr	r2, [pc, #404]	; (8002ed4 <HAL_RCC_OscConfig+0x270>)
 8002d40:	f043 0308 	orr.w	r3, r3, #8
 8002d44:	6013      	str	r3, [r2, #0]
 8002d46:	4b63      	ldr	r3, [pc, #396]	; (8002ed4 <HAL_RCC_OscConfig+0x270>)
 8002d48:	681b      	ldr	r3, [r3, #0]
 8002d4a:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	6a1b      	ldr	r3, [r3, #32]
 8002d52:	4960      	ldr	r1, [pc, #384]	; (8002ed4 <HAL_RCC_OscConfig+0x270>)
 8002d54:	4313      	orrs	r3, r2
 8002d56:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002d58:	4b5e      	ldr	r3, [pc, #376]	; (8002ed4 <HAL_RCC_OscConfig+0x270>)
 8002d5a:	685b      	ldr	r3, [r3, #4]
 8002d5c:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	69db      	ldr	r3, [r3, #28]
 8002d64:	021b      	lsls	r3, r3, #8
 8002d66:	495b      	ldr	r1, [pc, #364]	; (8002ed4 <HAL_RCC_OscConfig+0x270>)
 8002d68:	4313      	orrs	r3, r2
 8002d6a:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002d6c:	69bb      	ldr	r3, [r7, #24]
 8002d6e:	2b00      	cmp	r3, #0
 8002d70:	d109      	bne.n	8002d86 <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	6a1b      	ldr	r3, [r3, #32]
 8002d76:	4618      	mov	r0, r3
 8002d78:	f000 fd7e 	bl	8003878 <RCC_SetFlashLatencyFromMSIRange>
 8002d7c:	4603      	mov	r3, r0
 8002d7e:	2b00      	cmp	r3, #0
 8002d80:	d001      	beq.n	8002d86 <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 8002d82:	2301      	movs	r3, #1
 8002d84:	e37a      	b.n	800347c <HAL_RCC_OscConfig+0x818>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002d86:	f000 fc81 	bl	800368c <HAL_RCC_GetSysClockFreq>
 8002d8a:	4602      	mov	r2, r0
 8002d8c:	4b51      	ldr	r3, [pc, #324]	; (8002ed4 <HAL_RCC_OscConfig+0x270>)
 8002d8e:	689b      	ldr	r3, [r3, #8]
 8002d90:	091b      	lsrs	r3, r3, #4
 8002d92:	f003 030f 	and.w	r3, r3, #15
 8002d96:	4950      	ldr	r1, [pc, #320]	; (8002ed8 <HAL_RCC_OscConfig+0x274>)
 8002d98:	5ccb      	ldrb	r3, [r1, r3]
 8002d9a:	f003 031f 	and.w	r3, r3, #31
 8002d9e:	fa22 f303 	lsr.w	r3, r2, r3
 8002da2:	4a4e      	ldr	r2, [pc, #312]	; (8002edc <HAL_RCC_OscConfig+0x278>)
 8002da4:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8002da6:	4b4e      	ldr	r3, [pc, #312]	; (8002ee0 <HAL_RCC_OscConfig+0x27c>)
 8002da8:	681b      	ldr	r3, [r3, #0]
 8002daa:	4618      	mov	r0, r3
 8002dac:	f7fe fd0c 	bl	80017c8 <HAL_InitTick>
 8002db0:	4603      	mov	r3, r0
 8002db2:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8002db4:	7bfb      	ldrb	r3, [r7, #15]
 8002db6:	2b00      	cmp	r3, #0
 8002db8:	d052      	beq.n	8002e60 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 8002dba:	7bfb      	ldrb	r3, [r7, #15]
 8002dbc:	e35e      	b.n	800347c <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	699b      	ldr	r3, [r3, #24]
 8002dc2:	2b00      	cmp	r3, #0
 8002dc4:	d032      	beq.n	8002e2c <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8002dc6:	4b43      	ldr	r3, [pc, #268]	; (8002ed4 <HAL_RCC_OscConfig+0x270>)
 8002dc8:	681b      	ldr	r3, [r3, #0]
 8002dca:	4a42      	ldr	r2, [pc, #264]	; (8002ed4 <HAL_RCC_OscConfig+0x270>)
 8002dcc:	f043 0301 	orr.w	r3, r3, #1
 8002dd0:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002dd2:	f7fe feb5 	bl	8001b40 <HAL_GetTick>
 8002dd6:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002dd8:	e008      	b.n	8002dec <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002dda:	f7fe feb1 	bl	8001b40 <HAL_GetTick>
 8002dde:	4602      	mov	r2, r0
 8002de0:	693b      	ldr	r3, [r7, #16]
 8002de2:	1ad3      	subs	r3, r2, r3
 8002de4:	2b02      	cmp	r3, #2
 8002de6:	d901      	bls.n	8002dec <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 8002de8:	2303      	movs	r3, #3
 8002dea:	e347      	b.n	800347c <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002dec:	4b39      	ldr	r3, [pc, #228]	; (8002ed4 <HAL_RCC_OscConfig+0x270>)
 8002dee:	681b      	ldr	r3, [r3, #0]
 8002df0:	f003 0302 	and.w	r3, r3, #2
 8002df4:	2b00      	cmp	r3, #0
 8002df6:	d0f0      	beq.n	8002dda <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002df8:	4b36      	ldr	r3, [pc, #216]	; (8002ed4 <HAL_RCC_OscConfig+0x270>)
 8002dfa:	681b      	ldr	r3, [r3, #0]
 8002dfc:	4a35      	ldr	r2, [pc, #212]	; (8002ed4 <HAL_RCC_OscConfig+0x270>)
 8002dfe:	f043 0308 	orr.w	r3, r3, #8
 8002e02:	6013      	str	r3, [r2, #0]
 8002e04:	4b33      	ldr	r3, [pc, #204]	; (8002ed4 <HAL_RCC_OscConfig+0x270>)
 8002e06:	681b      	ldr	r3, [r3, #0]
 8002e08:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	6a1b      	ldr	r3, [r3, #32]
 8002e10:	4930      	ldr	r1, [pc, #192]	; (8002ed4 <HAL_RCC_OscConfig+0x270>)
 8002e12:	4313      	orrs	r3, r2
 8002e14:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002e16:	4b2f      	ldr	r3, [pc, #188]	; (8002ed4 <HAL_RCC_OscConfig+0x270>)
 8002e18:	685b      	ldr	r3, [r3, #4]
 8002e1a:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	69db      	ldr	r3, [r3, #28]
 8002e22:	021b      	lsls	r3, r3, #8
 8002e24:	492b      	ldr	r1, [pc, #172]	; (8002ed4 <HAL_RCC_OscConfig+0x270>)
 8002e26:	4313      	orrs	r3, r2
 8002e28:	604b      	str	r3, [r1, #4]
 8002e2a:	e01a      	b.n	8002e62 <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8002e2c:	4b29      	ldr	r3, [pc, #164]	; (8002ed4 <HAL_RCC_OscConfig+0x270>)
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	4a28      	ldr	r2, [pc, #160]	; (8002ed4 <HAL_RCC_OscConfig+0x270>)
 8002e32:	f023 0301 	bic.w	r3, r3, #1
 8002e36:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002e38:	f7fe fe82 	bl	8001b40 <HAL_GetTick>
 8002e3c:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002e3e:	e008      	b.n	8002e52 <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002e40:	f7fe fe7e 	bl	8001b40 <HAL_GetTick>
 8002e44:	4602      	mov	r2, r0
 8002e46:	693b      	ldr	r3, [r7, #16]
 8002e48:	1ad3      	subs	r3, r2, r3
 8002e4a:	2b02      	cmp	r3, #2
 8002e4c:	d901      	bls.n	8002e52 <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 8002e4e:	2303      	movs	r3, #3
 8002e50:	e314      	b.n	800347c <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002e52:	4b20      	ldr	r3, [pc, #128]	; (8002ed4 <HAL_RCC_OscConfig+0x270>)
 8002e54:	681b      	ldr	r3, [r3, #0]
 8002e56:	f003 0302 	and.w	r3, r3, #2
 8002e5a:	2b00      	cmp	r3, #0
 8002e5c:	d1f0      	bne.n	8002e40 <HAL_RCC_OscConfig+0x1dc>
 8002e5e:	e000      	b.n	8002e62 <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002e60:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	f003 0301 	and.w	r3, r3, #1
 8002e6a:	2b00      	cmp	r3, #0
 8002e6c:	d073      	beq.n	8002f56 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8002e6e:	69bb      	ldr	r3, [r7, #24]
 8002e70:	2b08      	cmp	r3, #8
 8002e72:	d005      	beq.n	8002e80 <HAL_RCC_OscConfig+0x21c>
 8002e74:	69bb      	ldr	r3, [r7, #24]
 8002e76:	2b0c      	cmp	r3, #12
 8002e78:	d10e      	bne.n	8002e98 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8002e7a:	697b      	ldr	r3, [r7, #20]
 8002e7c:	2b03      	cmp	r3, #3
 8002e7e:	d10b      	bne.n	8002e98 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002e80:	4b14      	ldr	r3, [pc, #80]	; (8002ed4 <HAL_RCC_OscConfig+0x270>)
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002e88:	2b00      	cmp	r3, #0
 8002e8a:	d063      	beq.n	8002f54 <HAL_RCC_OscConfig+0x2f0>
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	685b      	ldr	r3, [r3, #4]
 8002e90:	2b00      	cmp	r3, #0
 8002e92:	d15f      	bne.n	8002f54 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8002e94:	2301      	movs	r3, #1
 8002e96:	e2f1      	b.n	800347c <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	685b      	ldr	r3, [r3, #4]
 8002e9c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002ea0:	d106      	bne.n	8002eb0 <HAL_RCC_OscConfig+0x24c>
 8002ea2:	4b0c      	ldr	r3, [pc, #48]	; (8002ed4 <HAL_RCC_OscConfig+0x270>)
 8002ea4:	681b      	ldr	r3, [r3, #0]
 8002ea6:	4a0b      	ldr	r2, [pc, #44]	; (8002ed4 <HAL_RCC_OscConfig+0x270>)
 8002ea8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002eac:	6013      	str	r3, [r2, #0]
 8002eae:	e025      	b.n	8002efc <HAL_RCC_OscConfig+0x298>
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	685b      	ldr	r3, [r3, #4]
 8002eb4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002eb8:	d114      	bne.n	8002ee4 <HAL_RCC_OscConfig+0x280>
 8002eba:	4b06      	ldr	r3, [pc, #24]	; (8002ed4 <HAL_RCC_OscConfig+0x270>)
 8002ebc:	681b      	ldr	r3, [r3, #0]
 8002ebe:	4a05      	ldr	r2, [pc, #20]	; (8002ed4 <HAL_RCC_OscConfig+0x270>)
 8002ec0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002ec4:	6013      	str	r3, [r2, #0]
 8002ec6:	4b03      	ldr	r3, [pc, #12]	; (8002ed4 <HAL_RCC_OscConfig+0x270>)
 8002ec8:	681b      	ldr	r3, [r3, #0]
 8002eca:	4a02      	ldr	r2, [pc, #8]	; (8002ed4 <HAL_RCC_OscConfig+0x270>)
 8002ecc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002ed0:	6013      	str	r3, [r2, #0]
 8002ed2:	e013      	b.n	8002efc <HAL_RCC_OscConfig+0x298>
 8002ed4:	40021000 	.word	0x40021000
 8002ed8:	0800ca94 	.word	0x0800ca94
 8002edc:	20000000 	.word	0x20000000
 8002ee0:	20000004 	.word	0x20000004
 8002ee4:	4ba0      	ldr	r3, [pc, #640]	; (8003168 <HAL_RCC_OscConfig+0x504>)
 8002ee6:	681b      	ldr	r3, [r3, #0]
 8002ee8:	4a9f      	ldr	r2, [pc, #636]	; (8003168 <HAL_RCC_OscConfig+0x504>)
 8002eea:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002eee:	6013      	str	r3, [r2, #0]
 8002ef0:	4b9d      	ldr	r3, [pc, #628]	; (8003168 <HAL_RCC_OscConfig+0x504>)
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	4a9c      	ldr	r2, [pc, #624]	; (8003168 <HAL_RCC_OscConfig+0x504>)
 8002ef6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002efa:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	685b      	ldr	r3, [r3, #4]
 8002f00:	2b00      	cmp	r3, #0
 8002f02:	d013      	beq.n	8002f2c <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002f04:	f7fe fe1c 	bl	8001b40 <HAL_GetTick>
 8002f08:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002f0a:	e008      	b.n	8002f1e <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002f0c:	f7fe fe18 	bl	8001b40 <HAL_GetTick>
 8002f10:	4602      	mov	r2, r0
 8002f12:	693b      	ldr	r3, [r7, #16]
 8002f14:	1ad3      	subs	r3, r2, r3
 8002f16:	2b64      	cmp	r3, #100	; 0x64
 8002f18:	d901      	bls.n	8002f1e <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8002f1a:	2303      	movs	r3, #3
 8002f1c:	e2ae      	b.n	800347c <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002f1e:	4b92      	ldr	r3, [pc, #584]	; (8003168 <HAL_RCC_OscConfig+0x504>)
 8002f20:	681b      	ldr	r3, [r3, #0]
 8002f22:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002f26:	2b00      	cmp	r3, #0
 8002f28:	d0f0      	beq.n	8002f0c <HAL_RCC_OscConfig+0x2a8>
 8002f2a:	e014      	b.n	8002f56 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002f2c:	f7fe fe08 	bl	8001b40 <HAL_GetTick>
 8002f30:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002f32:	e008      	b.n	8002f46 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002f34:	f7fe fe04 	bl	8001b40 <HAL_GetTick>
 8002f38:	4602      	mov	r2, r0
 8002f3a:	693b      	ldr	r3, [r7, #16]
 8002f3c:	1ad3      	subs	r3, r2, r3
 8002f3e:	2b64      	cmp	r3, #100	; 0x64
 8002f40:	d901      	bls.n	8002f46 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8002f42:	2303      	movs	r3, #3
 8002f44:	e29a      	b.n	800347c <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002f46:	4b88      	ldr	r3, [pc, #544]	; (8003168 <HAL_RCC_OscConfig+0x504>)
 8002f48:	681b      	ldr	r3, [r3, #0]
 8002f4a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002f4e:	2b00      	cmp	r3, #0
 8002f50:	d1f0      	bne.n	8002f34 <HAL_RCC_OscConfig+0x2d0>
 8002f52:	e000      	b.n	8002f56 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002f54:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	f003 0302 	and.w	r3, r3, #2
 8002f5e:	2b00      	cmp	r3, #0
 8002f60:	d060      	beq.n	8003024 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8002f62:	69bb      	ldr	r3, [r7, #24]
 8002f64:	2b04      	cmp	r3, #4
 8002f66:	d005      	beq.n	8002f74 <HAL_RCC_OscConfig+0x310>
 8002f68:	69bb      	ldr	r3, [r7, #24]
 8002f6a:	2b0c      	cmp	r3, #12
 8002f6c:	d119      	bne.n	8002fa2 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8002f6e:	697b      	ldr	r3, [r7, #20]
 8002f70:	2b02      	cmp	r3, #2
 8002f72:	d116      	bne.n	8002fa2 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002f74:	4b7c      	ldr	r3, [pc, #496]	; (8003168 <HAL_RCC_OscConfig+0x504>)
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002f7c:	2b00      	cmp	r3, #0
 8002f7e:	d005      	beq.n	8002f8c <HAL_RCC_OscConfig+0x328>
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	68db      	ldr	r3, [r3, #12]
 8002f84:	2b00      	cmp	r3, #0
 8002f86:	d101      	bne.n	8002f8c <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8002f88:	2301      	movs	r3, #1
 8002f8a:	e277      	b.n	800347c <HAL_RCC_OscConfig+0x818>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002f8c:	4b76      	ldr	r3, [pc, #472]	; (8003168 <HAL_RCC_OscConfig+0x504>)
 8002f8e:	685b      	ldr	r3, [r3, #4]
 8002f90:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	691b      	ldr	r3, [r3, #16]
 8002f98:	061b      	lsls	r3, r3, #24
 8002f9a:	4973      	ldr	r1, [pc, #460]	; (8003168 <HAL_RCC_OscConfig+0x504>)
 8002f9c:	4313      	orrs	r3, r2
 8002f9e:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002fa0:	e040      	b.n	8003024 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	68db      	ldr	r3, [r3, #12]
 8002fa6:	2b00      	cmp	r3, #0
 8002fa8:	d023      	beq.n	8002ff2 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002faa:	4b6f      	ldr	r3, [pc, #444]	; (8003168 <HAL_RCC_OscConfig+0x504>)
 8002fac:	681b      	ldr	r3, [r3, #0]
 8002fae:	4a6e      	ldr	r2, [pc, #440]	; (8003168 <HAL_RCC_OscConfig+0x504>)
 8002fb0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002fb4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002fb6:	f7fe fdc3 	bl	8001b40 <HAL_GetTick>
 8002fba:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002fbc:	e008      	b.n	8002fd0 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002fbe:	f7fe fdbf 	bl	8001b40 <HAL_GetTick>
 8002fc2:	4602      	mov	r2, r0
 8002fc4:	693b      	ldr	r3, [r7, #16]
 8002fc6:	1ad3      	subs	r3, r2, r3
 8002fc8:	2b02      	cmp	r3, #2
 8002fca:	d901      	bls.n	8002fd0 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8002fcc:	2303      	movs	r3, #3
 8002fce:	e255      	b.n	800347c <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002fd0:	4b65      	ldr	r3, [pc, #404]	; (8003168 <HAL_RCC_OscConfig+0x504>)
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002fd8:	2b00      	cmp	r3, #0
 8002fda:	d0f0      	beq.n	8002fbe <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002fdc:	4b62      	ldr	r3, [pc, #392]	; (8003168 <HAL_RCC_OscConfig+0x504>)
 8002fde:	685b      	ldr	r3, [r3, #4]
 8002fe0:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	691b      	ldr	r3, [r3, #16]
 8002fe8:	061b      	lsls	r3, r3, #24
 8002fea:	495f      	ldr	r1, [pc, #380]	; (8003168 <HAL_RCC_OscConfig+0x504>)
 8002fec:	4313      	orrs	r3, r2
 8002fee:	604b      	str	r3, [r1, #4]
 8002ff0:	e018      	b.n	8003024 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002ff2:	4b5d      	ldr	r3, [pc, #372]	; (8003168 <HAL_RCC_OscConfig+0x504>)
 8002ff4:	681b      	ldr	r3, [r3, #0]
 8002ff6:	4a5c      	ldr	r2, [pc, #368]	; (8003168 <HAL_RCC_OscConfig+0x504>)
 8002ff8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002ffc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002ffe:	f7fe fd9f 	bl	8001b40 <HAL_GetTick>
 8003002:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003004:	e008      	b.n	8003018 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003006:	f7fe fd9b 	bl	8001b40 <HAL_GetTick>
 800300a:	4602      	mov	r2, r0
 800300c:	693b      	ldr	r3, [r7, #16]
 800300e:	1ad3      	subs	r3, r2, r3
 8003010:	2b02      	cmp	r3, #2
 8003012:	d901      	bls.n	8003018 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8003014:	2303      	movs	r3, #3
 8003016:	e231      	b.n	800347c <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003018:	4b53      	ldr	r3, [pc, #332]	; (8003168 <HAL_RCC_OscConfig+0x504>)
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003020:	2b00      	cmp	r3, #0
 8003022:	d1f0      	bne.n	8003006 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	681b      	ldr	r3, [r3, #0]
 8003028:	f003 0308 	and.w	r3, r3, #8
 800302c:	2b00      	cmp	r3, #0
 800302e:	d03c      	beq.n	80030aa <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	695b      	ldr	r3, [r3, #20]
 8003034:	2b00      	cmp	r3, #0
 8003036:	d01c      	beq.n	8003072 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003038:	4b4b      	ldr	r3, [pc, #300]	; (8003168 <HAL_RCC_OscConfig+0x504>)
 800303a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800303e:	4a4a      	ldr	r2, [pc, #296]	; (8003168 <HAL_RCC_OscConfig+0x504>)
 8003040:	f043 0301 	orr.w	r3, r3, #1
 8003044:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003048:	f7fe fd7a 	bl	8001b40 <HAL_GetTick>
 800304c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800304e:	e008      	b.n	8003062 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003050:	f7fe fd76 	bl	8001b40 <HAL_GetTick>
 8003054:	4602      	mov	r2, r0
 8003056:	693b      	ldr	r3, [r7, #16]
 8003058:	1ad3      	subs	r3, r2, r3
 800305a:	2b02      	cmp	r3, #2
 800305c:	d901      	bls.n	8003062 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 800305e:	2303      	movs	r3, #3
 8003060:	e20c      	b.n	800347c <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003062:	4b41      	ldr	r3, [pc, #260]	; (8003168 <HAL_RCC_OscConfig+0x504>)
 8003064:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003068:	f003 0302 	and.w	r3, r3, #2
 800306c:	2b00      	cmp	r3, #0
 800306e:	d0ef      	beq.n	8003050 <HAL_RCC_OscConfig+0x3ec>
 8003070:	e01b      	b.n	80030aa <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003072:	4b3d      	ldr	r3, [pc, #244]	; (8003168 <HAL_RCC_OscConfig+0x504>)
 8003074:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003078:	4a3b      	ldr	r2, [pc, #236]	; (8003168 <HAL_RCC_OscConfig+0x504>)
 800307a:	f023 0301 	bic.w	r3, r3, #1
 800307e:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003082:	f7fe fd5d 	bl	8001b40 <HAL_GetTick>
 8003086:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003088:	e008      	b.n	800309c <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800308a:	f7fe fd59 	bl	8001b40 <HAL_GetTick>
 800308e:	4602      	mov	r2, r0
 8003090:	693b      	ldr	r3, [r7, #16]
 8003092:	1ad3      	subs	r3, r2, r3
 8003094:	2b02      	cmp	r3, #2
 8003096:	d901      	bls.n	800309c <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8003098:	2303      	movs	r3, #3
 800309a:	e1ef      	b.n	800347c <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800309c:	4b32      	ldr	r3, [pc, #200]	; (8003168 <HAL_RCC_OscConfig+0x504>)
 800309e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80030a2:	f003 0302 	and.w	r3, r3, #2
 80030a6:	2b00      	cmp	r3, #0
 80030a8:	d1ef      	bne.n	800308a <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	681b      	ldr	r3, [r3, #0]
 80030ae:	f003 0304 	and.w	r3, r3, #4
 80030b2:	2b00      	cmp	r3, #0
 80030b4:	f000 80a6 	beq.w	8003204 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 80030b8:	2300      	movs	r3, #0
 80030ba:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 80030bc:	4b2a      	ldr	r3, [pc, #168]	; (8003168 <HAL_RCC_OscConfig+0x504>)
 80030be:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80030c0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80030c4:	2b00      	cmp	r3, #0
 80030c6:	d10d      	bne.n	80030e4 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80030c8:	4b27      	ldr	r3, [pc, #156]	; (8003168 <HAL_RCC_OscConfig+0x504>)
 80030ca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80030cc:	4a26      	ldr	r2, [pc, #152]	; (8003168 <HAL_RCC_OscConfig+0x504>)
 80030ce:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80030d2:	6593      	str	r3, [r2, #88]	; 0x58
 80030d4:	4b24      	ldr	r3, [pc, #144]	; (8003168 <HAL_RCC_OscConfig+0x504>)
 80030d6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80030d8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80030dc:	60bb      	str	r3, [r7, #8]
 80030de:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80030e0:	2301      	movs	r3, #1
 80030e2:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80030e4:	4b21      	ldr	r3, [pc, #132]	; (800316c <HAL_RCC_OscConfig+0x508>)
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80030ec:	2b00      	cmp	r3, #0
 80030ee:	d118      	bne.n	8003122 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80030f0:	4b1e      	ldr	r3, [pc, #120]	; (800316c <HAL_RCC_OscConfig+0x508>)
 80030f2:	681b      	ldr	r3, [r3, #0]
 80030f4:	4a1d      	ldr	r2, [pc, #116]	; (800316c <HAL_RCC_OscConfig+0x508>)
 80030f6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80030fa:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80030fc:	f7fe fd20 	bl	8001b40 <HAL_GetTick>
 8003100:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003102:	e008      	b.n	8003116 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003104:	f7fe fd1c 	bl	8001b40 <HAL_GetTick>
 8003108:	4602      	mov	r2, r0
 800310a:	693b      	ldr	r3, [r7, #16]
 800310c:	1ad3      	subs	r3, r2, r3
 800310e:	2b02      	cmp	r3, #2
 8003110:	d901      	bls.n	8003116 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8003112:	2303      	movs	r3, #3
 8003114:	e1b2      	b.n	800347c <HAL_RCC_OscConfig+0x818>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003116:	4b15      	ldr	r3, [pc, #84]	; (800316c <HAL_RCC_OscConfig+0x508>)
 8003118:	681b      	ldr	r3, [r3, #0]
 800311a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800311e:	2b00      	cmp	r3, #0
 8003120:	d0f0      	beq.n	8003104 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	689b      	ldr	r3, [r3, #8]
 8003126:	2b01      	cmp	r3, #1
 8003128:	d108      	bne.n	800313c <HAL_RCC_OscConfig+0x4d8>
 800312a:	4b0f      	ldr	r3, [pc, #60]	; (8003168 <HAL_RCC_OscConfig+0x504>)
 800312c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003130:	4a0d      	ldr	r2, [pc, #52]	; (8003168 <HAL_RCC_OscConfig+0x504>)
 8003132:	f043 0301 	orr.w	r3, r3, #1
 8003136:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800313a:	e029      	b.n	8003190 <HAL_RCC_OscConfig+0x52c>
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	689b      	ldr	r3, [r3, #8]
 8003140:	2b05      	cmp	r3, #5
 8003142:	d115      	bne.n	8003170 <HAL_RCC_OscConfig+0x50c>
 8003144:	4b08      	ldr	r3, [pc, #32]	; (8003168 <HAL_RCC_OscConfig+0x504>)
 8003146:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800314a:	4a07      	ldr	r2, [pc, #28]	; (8003168 <HAL_RCC_OscConfig+0x504>)
 800314c:	f043 0304 	orr.w	r3, r3, #4
 8003150:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003154:	4b04      	ldr	r3, [pc, #16]	; (8003168 <HAL_RCC_OscConfig+0x504>)
 8003156:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800315a:	4a03      	ldr	r2, [pc, #12]	; (8003168 <HAL_RCC_OscConfig+0x504>)
 800315c:	f043 0301 	orr.w	r3, r3, #1
 8003160:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003164:	e014      	b.n	8003190 <HAL_RCC_OscConfig+0x52c>
 8003166:	bf00      	nop
 8003168:	40021000 	.word	0x40021000
 800316c:	40007000 	.word	0x40007000
 8003170:	4b9a      	ldr	r3, [pc, #616]	; (80033dc <HAL_RCC_OscConfig+0x778>)
 8003172:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003176:	4a99      	ldr	r2, [pc, #612]	; (80033dc <HAL_RCC_OscConfig+0x778>)
 8003178:	f023 0301 	bic.w	r3, r3, #1
 800317c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003180:	4b96      	ldr	r3, [pc, #600]	; (80033dc <HAL_RCC_OscConfig+0x778>)
 8003182:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003186:	4a95      	ldr	r2, [pc, #596]	; (80033dc <HAL_RCC_OscConfig+0x778>)
 8003188:	f023 0304 	bic.w	r3, r3, #4
 800318c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	689b      	ldr	r3, [r3, #8]
 8003194:	2b00      	cmp	r3, #0
 8003196:	d016      	beq.n	80031c6 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003198:	f7fe fcd2 	bl	8001b40 <HAL_GetTick>
 800319c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800319e:	e00a      	b.n	80031b6 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80031a0:	f7fe fcce 	bl	8001b40 <HAL_GetTick>
 80031a4:	4602      	mov	r2, r0
 80031a6:	693b      	ldr	r3, [r7, #16]
 80031a8:	1ad3      	subs	r3, r2, r3
 80031aa:	f241 3288 	movw	r2, #5000	; 0x1388
 80031ae:	4293      	cmp	r3, r2
 80031b0:	d901      	bls.n	80031b6 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 80031b2:	2303      	movs	r3, #3
 80031b4:	e162      	b.n	800347c <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80031b6:	4b89      	ldr	r3, [pc, #548]	; (80033dc <HAL_RCC_OscConfig+0x778>)
 80031b8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80031bc:	f003 0302 	and.w	r3, r3, #2
 80031c0:	2b00      	cmp	r3, #0
 80031c2:	d0ed      	beq.n	80031a0 <HAL_RCC_OscConfig+0x53c>
 80031c4:	e015      	b.n	80031f2 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80031c6:	f7fe fcbb 	bl	8001b40 <HAL_GetTick>
 80031ca:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80031cc:	e00a      	b.n	80031e4 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80031ce:	f7fe fcb7 	bl	8001b40 <HAL_GetTick>
 80031d2:	4602      	mov	r2, r0
 80031d4:	693b      	ldr	r3, [r7, #16]
 80031d6:	1ad3      	subs	r3, r2, r3
 80031d8:	f241 3288 	movw	r2, #5000	; 0x1388
 80031dc:	4293      	cmp	r3, r2
 80031de:	d901      	bls.n	80031e4 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 80031e0:	2303      	movs	r3, #3
 80031e2:	e14b      	b.n	800347c <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80031e4:	4b7d      	ldr	r3, [pc, #500]	; (80033dc <HAL_RCC_OscConfig+0x778>)
 80031e6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80031ea:	f003 0302 	and.w	r3, r3, #2
 80031ee:	2b00      	cmp	r3, #0
 80031f0:	d1ed      	bne.n	80031ce <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80031f2:	7ffb      	ldrb	r3, [r7, #31]
 80031f4:	2b01      	cmp	r3, #1
 80031f6:	d105      	bne.n	8003204 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80031f8:	4b78      	ldr	r3, [pc, #480]	; (80033dc <HAL_RCC_OscConfig+0x778>)
 80031fa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80031fc:	4a77      	ldr	r2, [pc, #476]	; (80033dc <HAL_RCC_OscConfig+0x778>)
 80031fe:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003202:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	681b      	ldr	r3, [r3, #0]
 8003208:	f003 0320 	and.w	r3, r3, #32
 800320c:	2b00      	cmp	r3, #0
 800320e:	d03c      	beq.n	800328a <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003214:	2b00      	cmp	r3, #0
 8003216:	d01c      	beq.n	8003252 <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8003218:	4b70      	ldr	r3, [pc, #448]	; (80033dc <HAL_RCC_OscConfig+0x778>)
 800321a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800321e:	4a6f      	ldr	r2, [pc, #444]	; (80033dc <HAL_RCC_OscConfig+0x778>)
 8003220:	f043 0301 	orr.w	r3, r3, #1
 8003224:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003228:	f7fe fc8a 	bl	8001b40 <HAL_GetTick>
 800322c:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800322e:	e008      	b.n	8003242 <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003230:	f7fe fc86 	bl	8001b40 <HAL_GetTick>
 8003234:	4602      	mov	r2, r0
 8003236:	693b      	ldr	r3, [r7, #16]
 8003238:	1ad3      	subs	r3, r2, r3
 800323a:	2b02      	cmp	r3, #2
 800323c:	d901      	bls.n	8003242 <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 800323e:	2303      	movs	r3, #3
 8003240:	e11c      	b.n	800347c <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8003242:	4b66      	ldr	r3, [pc, #408]	; (80033dc <HAL_RCC_OscConfig+0x778>)
 8003244:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003248:	f003 0302 	and.w	r3, r3, #2
 800324c:	2b00      	cmp	r3, #0
 800324e:	d0ef      	beq.n	8003230 <HAL_RCC_OscConfig+0x5cc>
 8003250:	e01b      	b.n	800328a <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8003252:	4b62      	ldr	r3, [pc, #392]	; (80033dc <HAL_RCC_OscConfig+0x778>)
 8003254:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003258:	4a60      	ldr	r2, [pc, #384]	; (80033dc <HAL_RCC_OscConfig+0x778>)
 800325a:	f023 0301 	bic.w	r3, r3, #1
 800325e:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003262:	f7fe fc6d 	bl	8001b40 <HAL_GetTick>
 8003266:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8003268:	e008      	b.n	800327c <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800326a:	f7fe fc69 	bl	8001b40 <HAL_GetTick>
 800326e:	4602      	mov	r2, r0
 8003270:	693b      	ldr	r3, [r7, #16]
 8003272:	1ad3      	subs	r3, r2, r3
 8003274:	2b02      	cmp	r3, #2
 8003276:	d901      	bls.n	800327c <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 8003278:	2303      	movs	r3, #3
 800327a:	e0ff      	b.n	800347c <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800327c:	4b57      	ldr	r3, [pc, #348]	; (80033dc <HAL_RCC_OscConfig+0x778>)
 800327e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003282:	f003 0302 	and.w	r3, r3, #2
 8003286:	2b00      	cmp	r3, #0
 8003288:	d1ef      	bne.n	800326a <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800328e:	2b00      	cmp	r3, #0
 8003290:	f000 80f3 	beq.w	800347a <HAL_RCC_OscConfig+0x816>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003298:	2b02      	cmp	r3, #2
 800329a:	f040 80c9 	bne.w	8003430 <HAL_RCC_OscConfig+0x7cc>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 800329e:	4b4f      	ldr	r3, [pc, #316]	; (80033dc <HAL_RCC_OscConfig+0x778>)
 80032a0:	68db      	ldr	r3, [r3, #12]
 80032a2:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80032a4:	697b      	ldr	r3, [r7, #20]
 80032a6:	f003 0203 	and.w	r2, r3, #3
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80032ae:	429a      	cmp	r2, r3
 80032b0:	d12c      	bne.n	800330c <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80032b2:	697b      	ldr	r3, [r7, #20]
 80032b4:	f003 0270 	and.w	r2, r3, #112	; 0x70
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032bc:	3b01      	subs	r3, #1
 80032be:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80032c0:	429a      	cmp	r2, r3
 80032c2:	d123      	bne.n	800330c <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80032c4:	697b      	ldr	r3, [r7, #20]
 80032c6:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80032ce:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80032d0:	429a      	cmp	r2, r3
 80032d2:	d11b      	bne.n	800330c <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80032d4:	697b      	ldr	r3, [r7, #20]
 80032d6:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80032de:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80032e0:	429a      	cmp	r2, r3
 80032e2:	d113      	bne.n	800330c <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80032e4:	697b      	ldr	r3, [r7, #20]
 80032e6:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80032ee:	085b      	lsrs	r3, r3, #1
 80032f0:	3b01      	subs	r3, #1
 80032f2:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80032f4:	429a      	cmp	r2, r3
 80032f6:	d109      	bne.n	800330c <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80032f8:	697b      	ldr	r3, [r7, #20]
 80032fa:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003302:	085b      	lsrs	r3, r3, #1
 8003304:	3b01      	subs	r3, #1
 8003306:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003308:	429a      	cmp	r2, r3
 800330a:	d06b      	beq.n	80033e4 <HAL_RCC_OscConfig+0x780>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800330c:	69bb      	ldr	r3, [r7, #24]
 800330e:	2b0c      	cmp	r3, #12
 8003310:	d062      	beq.n	80033d8 <HAL_RCC_OscConfig+0x774>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8003312:	4b32      	ldr	r3, [pc, #200]	; (80033dc <HAL_RCC_OscConfig+0x778>)
 8003314:	681b      	ldr	r3, [r3, #0]
 8003316:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800331a:	2b00      	cmp	r3, #0
 800331c:	d001      	beq.n	8003322 <HAL_RCC_OscConfig+0x6be>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
#endif
            )
          {
            return HAL_ERROR;
 800331e:	2301      	movs	r3, #1
 8003320:	e0ac      	b.n	800347c <HAL_RCC_OscConfig+0x818>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8003322:	4b2e      	ldr	r3, [pc, #184]	; (80033dc <HAL_RCC_OscConfig+0x778>)
 8003324:	681b      	ldr	r3, [r3, #0]
 8003326:	4a2d      	ldr	r2, [pc, #180]	; (80033dc <HAL_RCC_OscConfig+0x778>)
 8003328:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800332c:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800332e:	f7fe fc07 	bl	8001b40 <HAL_GetTick>
 8003332:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003334:	e008      	b.n	8003348 <HAL_RCC_OscConfig+0x6e4>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003336:	f7fe fc03 	bl	8001b40 <HAL_GetTick>
 800333a:	4602      	mov	r2, r0
 800333c:	693b      	ldr	r3, [r7, #16]
 800333e:	1ad3      	subs	r3, r2, r3
 8003340:	2b02      	cmp	r3, #2
 8003342:	d901      	bls.n	8003348 <HAL_RCC_OscConfig+0x6e4>
              {
                return HAL_TIMEOUT;
 8003344:	2303      	movs	r3, #3
 8003346:	e099      	b.n	800347c <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003348:	4b24      	ldr	r3, [pc, #144]	; (80033dc <HAL_RCC_OscConfig+0x778>)
 800334a:	681b      	ldr	r3, [r3, #0]
 800334c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003350:	2b00      	cmp	r3, #0
 8003352:	d1f0      	bne.n	8003336 <HAL_RCC_OscConfig+0x6d2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003354:	4b21      	ldr	r3, [pc, #132]	; (80033dc <HAL_RCC_OscConfig+0x778>)
 8003356:	68da      	ldr	r2, [r3, #12]
 8003358:	4b21      	ldr	r3, [pc, #132]	; (80033e0 <HAL_RCC_OscConfig+0x77c>)
 800335a:	4013      	ands	r3, r2
 800335c:	687a      	ldr	r2, [r7, #4]
 800335e:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8003360:	687a      	ldr	r2, [r7, #4]
 8003362:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8003364:	3a01      	subs	r2, #1
 8003366:	0112      	lsls	r2, r2, #4
 8003368:	4311      	orrs	r1, r2
 800336a:	687a      	ldr	r2, [r7, #4]
 800336c:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800336e:	0212      	lsls	r2, r2, #8
 8003370:	4311      	orrs	r1, r2
 8003372:	687a      	ldr	r2, [r7, #4]
 8003374:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8003376:	0852      	lsrs	r2, r2, #1
 8003378:	3a01      	subs	r2, #1
 800337a:	0552      	lsls	r2, r2, #21
 800337c:	4311      	orrs	r1, r2
 800337e:	687a      	ldr	r2, [r7, #4]
 8003380:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8003382:	0852      	lsrs	r2, r2, #1
 8003384:	3a01      	subs	r2, #1
 8003386:	0652      	lsls	r2, r2, #25
 8003388:	4311      	orrs	r1, r2
 800338a:	687a      	ldr	r2, [r7, #4]
 800338c:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800338e:	06d2      	lsls	r2, r2, #27
 8003390:	430a      	orrs	r2, r1
 8003392:	4912      	ldr	r1, [pc, #72]	; (80033dc <HAL_RCC_OscConfig+0x778>)
 8003394:	4313      	orrs	r3, r2
 8003396:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8003398:	4b10      	ldr	r3, [pc, #64]	; (80033dc <HAL_RCC_OscConfig+0x778>)
 800339a:	681b      	ldr	r3, [r3, #0]
 800339c:	4a0f      	ldr	r2, [pc, #60]	; (80033dc <HAL_RCC_OscConfig+0x778>)
 800339e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80033a2:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80033a4:	4b0d      	ldr	r3, [pc, #52]	; (80033dc <HAL_RCC_OscConfig+0x778>)
 80033a6:	68db      	ldr	r3, [r3, #12]
 80033a8:	4a0c      	ldr	r2, [pc, #48]	; (80033dc <HAL_RCC_OscConfig+0x778>)
 80033aa:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80033ae:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80033b0:	f7fe fbc6 	bl	8001b40 <HAL_GetTick>
 80033b4:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80033b6:	e008      	b.n	80033ca <HAL_RCC_OscConfig+0x766>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80033b8:	f7fe fbc2 	bl	8001b40 <HAL_GetTick>
 80033bc:	4602      	mov	r2, r0
 80033be:	693b      	ldr	r3, [r7, #16]
 80033c0:	1ad3      	subs	r3, r2, r3
 80033c2:	2b02      	cmp	r3, #2
 80033c4:	d901      	bls.n	80033ca <HAL_RCC_OscConfig+0x766>
              {
                return HAL_TIMEOUT;
 80033c6:	2303      	movs	r3, #3
 80033c8:	e058      	b.n	800347c <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80033ca:	4b04      	ldr	r3, [pc, #16]	; (80033dc <HAL_RCC_OscConfig+0x778>)
 80033cc:	681b      	ldr	r3, [r3, #0]
 80033ce:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80033d2:	2b00      	cmp	r3, #0
 80033d4:	d0f0      	beq.n	80033b8 <HAL_RCC_OscConfig+0x754>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80033d6:	e050      	b.n	800347a <HAL_RCC_OscConfig+0x816>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 80033d8:	2301      	movs	r3, #1
 80033da:	e04f      	b.n	800347c <HAL_RCC_OscConfig+0x818>
 80033dc:	40021000 	.word	0x40021000
 80033e0:	019d808c 	.word	0x019d808c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80033e4:	4b27      	ldr	r3, [pc, #156]	; (8003484 <HAL_RCC_OscConfig+0x820>)
 80033e6:	681b      	ldr	r3, [r3, #0]
 80033e8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80033ec:	2b00      	cmp	r3, #0
 80033ee:	d144      	bne.n	800347a <HAL_RCC_OscConfig+0x816>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 80033f0:	4b24      	ldr	r3, [pc, #144]	; (8003484 <HAL_RCC_OscConfig+0x820>)
 80033f2:	681b      	ldr	r3, [r3, #0]
 80033f4:	4a23      	ldr	r2, [pc, #140]	; (8003484 <HAL_RCC_OscConfig+0x820>)
 80033f6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80033fa:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80033fc:	4b21      	ldr	r3, [pc, #132]	; (8003484 <HAL_RCC_OscConfig+0x820>)
 80033fe:	68db      	ldr	r3, [r3, #12]
 8003400:	4a20      	ldr	r2, [pc, #128]	; (8003484 <HAL_RCC_OscConfig+0x820>)
 8003402:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003406:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8003408:	f7fe fb9a 	bl	8001b40 <HAL_GetTick>
 800340c:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800340e:	e008      	b.n	8003422 <HAL_RCC_OscConfig+0x7be>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003410:	f7fe fb96 	bl	8001b40 <HAL_GetTick>
 8003414:	4602      	mov	r2, r0
 8003416:	693b      	ldr	r3, [r7, #16]
 8003418:	1ad3      	subs	r3, r2, r3
 800341a:	2b02      	cmp	r3, #2
 800341c:	d901      	bls.n	8003422 <HAL_RCC_OscConfig+0x7be>
            {
              return HAL_TIMEOUT;
 800341e:	2303      	movs	r3, #3
 8003420:	e02c      	b.n	800347c <HAL_RCC_OscConfig+0x818>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003422:	4b18      	ldr	r3, [pc, #96]	; (8003484 <HAL_RCC_OscConfig+0x820>)
 8003424:	681b      	ldr	r3, [r3, #0]
 8003426:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800342a:	2b00      	cmp	r3, #0
 800342c:	d0f0      	beq.n	8003410 <HAL_RCC_OscConfig+0x7ac>
 800342e:	e024      	b.n	800347a <HAL_RCC_OscConfig+0x816>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003430:	69bb      	ldr	r3, [r7, #24]
 8003432:	2b0c      	cmp	r3, #12
 8003434:	d01f      	beq.n	8003476 <HAL_RCC_OscConfig+0x812>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003436:	4b13      	ldr	r3, [pc, #76]	; (8003484 <HAL_RCC_OscConfig+0x820>)
 8003438:	681b      	ldr	r3, [r3, #0]
 800343a:	4a12      	ldr	r2, [pc, #72]	; (8003484 <HAL_RCC_OscConfig+0x820>)
 800343c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003440:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003442:	f7fe fb7d 	bl	8001b40 <HAL_GetTick>
 8003446:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003448:	e008      	b.n	800345c <HAL_RCC_OscConfig+0x7f8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800344a:	f7fe fb79 	bl	8001b40 <HAL_GetTick>
 800344e:	4602      	mov	r2, r0
 8003450:	693b      	ldr	r3, [r7, #16]
 8003452:	1ad3      	subs	r3, r2, r3
 8003454:	2b02      	cmp	r3, #2
 8003456:	d901      	bls.n	800345c <HAL_RCC_OscConfig+0x7f8>
          {
            return HAL_TIMEOUT;
 8003458:	2303      	movs	r3, #3
 800345a:	e00f      	b.n	800347c <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800345c:	4b09      	ldr	r3, [pc, #36]	; (8003484 <HAL_RCC_OscConfig+0x820>)
 800345e:	681b      	ldr	r3, [r3, #0]
 8003460:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003464:	2b00      	cmp	r3, #0
 8003466:	d1f0      	bne.n	800344a <HAL_RCC_OscConfig+0x7e6>
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#elif defined(RCC_PLLSAI1_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
 8003468:	4b06      	ldr	r3, [pc, #24]	; (8003484 <HAL_RCC_OscConfig+0x820>)
 800346a:	68da      	ldr	r2, [r3, #12]
 800346c:	4905      	ldr	r1, [pc, #20]	; (8003484 <HAL_RCC_OscConfig+0x820>)
 800346e:	4b06      	ldr	r3, [pc, #24]	; (8003488 <HAL_RCC_OscConfig+0x824>)
 8003470:	4013      	ands	r3, r2
 8003472:	60cb      	str	r3, [r1, #12]
 8003474:	e001      	b.n	800347a <HAL_RCC_OscConfig+0x816>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8003476:	2301      	movs	r3, #1
 8003478:	e000      	b.n	800347c <HAL_RCC_OscConfig+0x818>
      }
    }
  }
  return HAL_OK;
 800347a:	2300      	movs	r3, #0
}
 800347c:	4618      	mov	r0, r3
 800347e:	3720      	adds	r7, #32
 8003480:	46bd      	mov	sp, r7
 8003482:	bd80      	pop	{r7, pc}
 8003484:	40021000 	.word	0x40021000
 8003488:	feeefffc 	.word	0xfeeefffc

0800348c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800348c:	b580      	push	{r7, lr}
 800348e:	b084      	sub	sp, #16
 8003490:	af00      	add	r7, sp, #0
 8003492:	6078      	str	r0, [r7, #4]
 8003494:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	2b00      	cmp	r3, #0
 800349a:	d101      	bne.n	80034a0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800349c:	2301      	movs	r3, #1
 800349e:	e0e7      	b.n	8003670 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80034a0:	4b75      	ldr	r3, [pc, #468]	; (8003678 <HAL_RCC_ClockConfig+0x1ec>)
 80034a2:	681b      	ldr	r3, [r3, #0]
 80034a4:	f003 0307 	and.w	r3, r3, #7
 80034a8:	683a      	ldr	r2, [r7, #0]
 80034aa:	429a      	cmp	r2, r3
 80034ac:	d910      	bls.n	80034d0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80034ae:	4b72      	ldr	r3, [pc, #456]	; (8003678 <HAL_RCC_ClockConfig+0x1ec>)
 80034b0:	681b      	ldr	r3, [r3, #0]
 80034b2:	f023 0207 	bic.w	r2, r3, #7
 80034b6:	4970      	ldr	r1, [pc, #448]	; (8003678 <HAL_RCC_ClockConfig+0x1ec>)
 80034b8:	683b      	ldr	r3, [r7, #0]
 80034ba:	4313      	orrs	r3, r2
 80034bc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80034be:	4b6e      	ldr	r3, [pc, #440]	; (8003678 <HAL_RCC_ClockConfig+0x1ec>)
 80034c0:	681b      	ldr	r3, [r3, #0]
 80034c2:	f003 0307 	and.w	r3, r3, #7
 80034c6:	683a      	ldr	r2, [r7, #0]
 80034c8:	429a      	cmp	r2, r3
 80034ca:	d001      	beq.n	80034d0 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80034cc:	2301      	movs	r3, #1
 80034ce:	e0cf      	b.n	8003670 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	681b      	ldr	r3, [r3, #0]
 80034d4:	f003 0302 	and.w	r3, r3, #2
 80034d8:	2b00      	cmp	r3, #0
 80034da:	d010      	beq.n	80034fe <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	689a      	ldr	r2, [r3, #8]
 80034e0:	4b66      	ldr	r3, [pc, #408]	; (800367c <HAL_RCC_ClockConfig+0x1f0>)
 80034e2:	689b      	ldr	r3, [r3, #8]
 80034e4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80034e8:	429a      	cmp	r2, r3
 80034ea:	d908      	bls.n	80034fe <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80034ec:	4b63      	ldr	r3, [pc, #396]	; (800367c <HAL_RCC_ClockConfig+0x1f0>)
 80034ee:	689b      	ldr	r3, [r3, #8]
 80034f0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	689b      	ldr	r3, [r3, #8]
 80034f8:	4960      	ldr	r1, [pc, #384]	; (800367c <HAL_RCC_ClockConfig+0x1f0>)
 80034fa:	4313      	orrs	r3, r2
 80034fc:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	681b      	ldr	r3, [r3, #0]
 8003502:	f003 0301 	and.w	r3, r3, #1
 8003506:	2b00      	cmp	r3, #0
 8003508:	d04c      	beq.n	80035a4 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	685b      	ldr	r3, [r3, #4]
 800350e:	2b03      	cmp	r3, #3
 8003510:	d107      	bne.n	8003522 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003512:	4b5a      	ldr	r3, [pc, #360]	; (800367c <HAL_RCC_ClockConfig+0x1f0>)
 8003514:	681b      	ldr	r3, [r3, #0]
 8003516:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800351a:	2b00      	cmp	r3, #0
 800351c:	d121      	bne.n	8003562 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 800351e:	2301      	movs	r3, #1
 8003520:	e0a6      	b.n	8003670 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	685b      	ldr	r3, [r3, #4]
 8003526:	2b02      	cmp	r3, #2
 8003528:	d107      	bne.n	800353a <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800352a:	4b54      	ldr	r3, [pc, #336]	; (800367c <HAL_RCC_ClockConfig+0x1f0>)
 800352c:	681b      	ldr	r3, [r3, #0]
 800352e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003532:	2b00      	cmp	r3, #0
 8003534:	d115      	bne.n	8003562 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8003536:	2301      	movs	r3, #1
 8003538:	e09a      	b.n	8003670 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	685b      	ldr	r3, [r3, #4]
 800353e:	2b00      	cmp	r3, #0
 8003540:	d107      	bne.n	8003552 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003542:	4b4e      	ldr	r3, [pc, #312]	; (800367c <HAL_RCC_ClockConfig+0x1f0>)
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	f003 0302 	and.w	r3, r3, #2
 800354a:	2b00      	cmp	r3, #0
 800354c:	d109      	bne.n	8003562 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800354e:	2301      	movs	r3, #1
 8003550:	e08e      	b.n	8003670 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003552:	4b4a      	ldr	r3, [pc, #296]	; (800367c <HAL_RCC_ClockConfig+0x1f0>)
 8003554:	681b      	ldr	r3, [r3, #0]
 8003556:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800355a:	2b00      	cmp	r3, #0
 800355c:	d101      	bne.n	8003562 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800355e:	2301      	movs	r3, #1
 8003560:	e086      	b.n	8003670 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8003562:	4b46      	ldr	r3, [pc, #280]	; (800367c <HAL_RCC_ClockConfig+0x1f0>)
 8003564:	689b      	ldr	r3, [r3, #8]
 8003566:	f023 0203 	bic.w	r2, r3, #3
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	685b      	ldr	r3, [r3, #4]
 800356e:	4943      	ldr	r1, [pc, #268]	; (800367c <HAL_RCC_ClockConfig+0x1f0>)
 8003570:	4313      	orrs	r3, r2
 8003572:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003574:	f7fe fae4 	bl	8001b40 <HAL_GetTick>
 8003578:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800357a:	e00a      	b.n	8003592 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800357c:	f7fe fae0 	bl	8001b40 <HAL_GetTick>
 8003580:	4602      	mov	r2, r0
 8003582:	68fb      	ldr	r3, [r7, #12]
 8003584:	1ad3      	subs	r3, r2, r3
 8003586:	f241 3288 	movw	r2, #5000	; 0x1388
 800358a:	4293      	cmp	r3, r2
 800358c:	d901      	bls.n	8003592 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 800358e:	2303      	movs	r3, #3
 8003590:	e06e      	b.n	8003670 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003592:	4b3a      	ldr	r3, [pc, #232]	; (800367c <HAL_RCC_ClockConfig+0x1f0>)
 8003594:	689b      	ldr	r3, [r3, #8]
 8003596:	f003 020c 	and.w	r2, r3, #12
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	685b      	ldr	r3, [r3, #4]
 800359e:	009b      	lsls	r3, r3, #2
 80035a0:	429a      	cmp	r2, r3
 80035a2:	d1eb      	bne.n	800357c <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	681b      	ldr	r3, [r3, #0]
 80035a8:	f003 0302 	and.w	r3, r3, #2
 80035ac:	2b00      	cmp	r3, #0
 80035ae:	d010      	beq.n	80035d2 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	689a      	ldr	r2, [r3, #8]
 80035b4:	4b31      	ldr	r3, [pc, #196]	; (800367c <HAL_RCC_ClockConfig+0x1f0>)
 80035b6:	689b      	ldr	r3, [r3, #8]
 80035b8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80035bc:	429a      	cmp	r2, r3
 80035be:	d208      	bcs.n	80035d2 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80035c0:	4b2e      	ldr	r3, [pc, #184]	; (800367c <HAL_RCC_ClockConfig+0x1f0>)
 80035c2:	689b      	ldr	r3, [r3, #8]
 80035c4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	689b      	ldr	r3, [r3, #8]
 80035cc:	492b      	ldr	r1, [pc, #172]	; (800367c <HAL_RCC_ClockConfig+0x1f0>)
 80035ce:	4313      	orrs	r3, r2
 80035d0:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80035d2:	4b29      	ldr	r3, [pc, #164]	; (8003678 <HAL_RCC_ClockConfig+0x1ec>)
 80035d4:	681b      	ldr	r3, [r3, #0]
 80035d6:	f003 0307 	and.w	r3, r3, #7
 80035da:	683a      	ldr	r2, [r7, #0]
 80035dc:	429a      	cmp	r2, r3
 80035de:	d210      	bcs.n	8003602 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80035e0:	4b25      	ldr	r3, [pc, #148]	; (8003678 <HAL_RCC_ClockConfig+0x1ec>)
 80035e2:	681b      	ldr	r3, [r3, #0]
 80035e4:	f023 0207 	bic.w	r2, r3, #7
 80035e8:	4923      	ldr	r1, [pc, #140]	; (8003678 <HAL_RCC_ClockConfig+0x1ec>)
 80035ea:	683b      	ldr	r3, [r7, #0]
 80035ec:	4313      	orrs	r3, r2
 80035ee:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80035f0:	4b21      	ldr	r3, [pc, #132]	; (8003678 <HAL_RCC_ClockConfig+0x1ec>)
 80035f2:	681b      	ldr	r3, [r3, #0]
 80035f4:	f003 0307 	and.w	r3, r3, #7
 80035f8:	683a      	ldr	r2, [r7, #0]
 80035fa:	429a      	cmp	r2, r3
 80035fc:	d001      	beq.n	8003602 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 80035fe:	2301      	movs	r3, #1
 8003600:	e036      	b.n	8003670 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	681b      	ldr	r3, [r3, #0]
 8003606:	f003 0304 	and.w	r3, r3, #4
 800360a:	2b00      	cmp	r3, #0
 800360c:	d008      	beq.n	8003620 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800360e:	4b1b      	ldr	r3, [pc, #108]	; (800367c <HAL_RCC_ClockConfig+0x1f0>)
 8003610:	689b      	ldr	r3, [r3, #8]
 8003612:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	68db      	ldr	r3, [r3, #12]
 800361a:	4918      	ldr	r1, [pc, #96]	; (800367c <HAL_RCC_ClockConfig+0x1f0>)
 800361c:	4313      	orrs	r3, r2
 800361e:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	681b      	ldr	r3, [r3, #0]
 8003624:	f003 0308 	and.w	r3, r3, #8
 8003628:	2b00      	cmp	r3, #0
 800362a:	d009      	beq.n	8003640 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800362c:	4b13      	ldr	r3, [pc, #76]	; (800367c <HAL_RCC_ClockConfig+0x1f0>)
 800362e:	689b      	ldr	r3, [r3, #8]
 8003630:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	691b      	ldr	r3, [r3, #16]
 8003638:	00db      	lsls	r3, r3, #3
 800363a:	4910      	ldr	r1, [pc, #64]	; (800367c <HAL_RCC_ClockConfig+0x1f0>)
 800363c:	4313      	orrs	r3, r2
 800363e:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003640:	f000 f824 	bl	800368c <HAL_RCC_GetSysClockFreq>
 8003644:	4602      	mov	r2, r0
 8003646:	4b0d      	ldr	r3, [pc, #52]	; (800367c <HAL_RCC_ClockConfig+0x1f0>)
 8003648:	689b      	ldr	r3, [r3, #8]
 800364a:	091b      	lsrs	r3, r3, #4
 800364c:	f003 030f 	and.w	r3, r3, #15
 8003650:	490b      	ldr	r1, [pc, #44]	; (8003680 <HAL_RCC_ClockConfig+0x1f4>)
 8003652:	5ccb      	ldrb	r3, [r1, r3]
 8003654:	f003 031f 	and.w	r3, r3, #31
 8003658:	fa22 f303 	lsr.w	r3, r2, r3
 800365c:	4a09      	ldr	r2, [pc, #36]	; (8003684 <HAL_RCC_ClockConfig+0x1f8>)
 800365e:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8003660:	4b09      	ldr	r3, [pc, #36]	; (8003688 <HAL_RCC_ClockConfig+0x1fc>)
 8003662:	681b      	ldr	r3, [r3, #0]
 8003664:	4618      	mov	r0, r3
 8003666:	f7fe f8af 	bl	80017c8 <HAL_InitTick>
 800366a:	4603      	mov	r3, r0
 800366c:	72fb      	strb	r3, [r7, #11]

  return status;
 800366e:	7afb      	ldrb	r3, [r7, #11]
}
 8003670:	4618      	mov	r0, r3
 8003672:	3710      	adds	r7, #16
 8003674:	46bd      	mov	sp, r7
 8003676:	bd80      	pop	{r7, pc}
 8003678:	40022000 	.word	0x40022000
 800367c:	40021000 	.word	0x40021000
 8003680:	0800ca94 	.word	0x0800ca94
 8003684:	20000000 	.word	0x20000000
 8003688:	20000004 	.word	0x20000004

0800368c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800368c:	b480      	push	{r7}
 800368e:	b089      	sub	sp, #36	; 0x24
 8003690:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8003692:	2300      	movs	r3, #0
 8003694:	61fb      	str	r3, [r7, #28]
 8003696:	2300      	movs	r3, #0
 8003698:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800369a:	4b3e      	ldr	r3, [pc, #248]	; (8003794 <HAL_RCC_GetSysClockFreq+0x108>)
 800369c:	689b      	ldr	r3, [r3, #8]
 800369e:	f003 030c 	and.w	r3, r3, #12
 80036a2:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 80036a4:	4b3b      	ldr	r3, [pc, #236]	; (8003794 <HAL_RCC_GetSysClockFreq+0x108>)
 80036a6:	68db      	ldr	r3, [r3, #12]
 80036a8:	f003 0303 	and.w	r3, r3, #3
 80036ac:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80036ae:	693b      	ldr	r3, [r7, #16]
 80036b0:	2b00      	cmp	r3, #0
 80036b2:	d005      	beq.n	80036c0 <HAL_RCC_GetSysClockFreq+0x34>
 80036b4:	693b      	ldr	r3, [r7, #16]
 80036b6:	2b0c      	cmp	r3, #12
 80036b8:	d121      	bne.n	80036fe <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 80036ba:	68fb      	ldr	r3, [r7, #12]
 80036bc:	2b01      	cmp	r3, #1
 80036be:	d11e      	bne.n	80036fe <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 80036c0:	4b34      	ldr	r3, [pc, #208]	; (8003794 <HAL_RCC_GetSysClockFreq+0x108>)
 80036c2:	681b      	ldr	r3, [r3, #0]
 80036c4:	f003 0308 	and.w	r3, r3, #8
 80036c8:	2b00      	cmp	r3, #0
 80036ca:	d107      	bne.n	80036dc <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 80036cc:	4b31      	ldr	r3, [pc, #196]	; (8003794 <HAL_RCC_GetSysClockFreq+0x108>)
 80036ce:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80036d2:	0a1b      	lsrs	r3, r3, #8
 80036d4:	f003 030f 	and.w	r3, r3, #15
 80036d8:	61fb      	str	r3, [r7, #28]
 80036da:	e005      	b.n	80036e8 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 80036dc:	4b2d      	ldr	r3, [pc, #180]	; (8003794 <HAL_RCC_GetSysClockFreq+0x108>)
 80036de:	681b      	ldr	r3, [r3, #0]
 80036e0:	091b      	lsrs	r3, r3, #4
 80036e2:	f003 030f 	and.w	r3, r3, #15
 80036e6:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 80036e8:	4a2b      	ldr	r2, [pc, #172]	; (8003798 <HAL_RCC_GetSysClockFreq+0x10c>)
 80036ea:	69fb      	ldr	r3, [r7, #28]
 80036ec:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80036f0:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80036f2:	693b      	ldr	r3, [r7, #16]
 80036f4:	2b00      	cmp	r3, #0
 80036f6:	d10d      	bne.n	8003714 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 80036f8:	69fb      	ldr	r3, [r7, #28]
 80036fa:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80036fc:	e00a      	b.n	8003714 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 80036fe:	693b      	ldr	r3, [r7, #16]
 8003700:	2b04      	cmp	r3, #4
 8003702:	d102      	bne.n	800370a <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8003704:	4b25      	ldr	r3, [pc, #148]	; (800379c <HAL_RCC_GetSysClockFreq+0x110>)
 8003706:	61bb      	str	r3, [r7, #24]
 8003708:	e004      	b.n	8003714 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 800370a:	693b      	ldr	r3, [r7, #16]
 800370c:	2b08      	cmp	r3, #8
 800370e:	d101      	bne.n	8003714 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8003710:	4b23      	ldr	r3, [pc, #140]	; (80037a0 <HAL_RCC_GetSysClockFreq+0x114>)
 8003712:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8003714:	693b      	ldr	r3, [r7, #16]
 8003716:	2b0c      	cmp	r3, #12
 8003718:	d134      	bne.n	8003784 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800371a:	4b1e      	ldr	r3, [pc, #120]	; (8003794 <HAL_RCC_GetSysClockFreq+0x108>)
 800371c:	68db      	ldr	r3, [r3, #12]
 800371e:	f003 0303 	and.w	r3, r3, #3
 8003722:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8003724:	68bb      	ldr	r3, [r7, #8]
 8003726:	2b02      	cmp	r3, #2
 8003728:	d003      	beq.n	8003732 <HAL_RCC_GetSysClockFreq+0xa6>
 800372a:	68bb      	ldr	r3, [r7, #8]
 800372c:	2b03      	cmp	r3, #3
 800372e:	d003      	beq.n	8003738 <HAL_RCC_GetSysClockFreq+0xac>
 8003730:	e005      	b.n	800373e <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8003732:	4b1a      	ldr	r3, [pc, #104]	; (800379c <HAL_RCC_GetSysClockFreq+0x110>)
 8003734:	617b      	str	r3, [r7, #20]
      break;
 8003736:	e005      	b.n	8003744 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8003738:	4b19      	ldr	r3, [pc, #100]	; (80037a0 <HAL_RCC_GetSysClockFreq+0x114>)
 800373a:	617b      	str	r3, [r7, #20]
      break;
 800373c:	e002      	b.n	8003744 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 800373e:	69fb      	ldr	r3, [r7, #28]
 8003740:	617b      	str	r3, [r7, #20]
      break;
 8003742:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003744:	4b13      	ldr	r3, [pc, #76]	; (8003794 <HAL_RCC_GetSysClockFreq+0x108>)
 8003746:	68db      	ldr	r3, [r3, #12]
 8003748:	091b      	lsrs	r3, r3, #4
 800374a:	f003 0307 	and.w	r3, r3, #7
 800374e:	3301      	adds	r3, #1
 8003750:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8003752:	4b10      	ldr	r3, [pc, #64]	; (8003794 <HAL_RCC_GetSysClockFreq+0x108>)
 8003754:	68db      	ldr	r3, [r3, #12]
 8003756:	0a1b      	lsrs	r3, r3, #8
 8003758:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800375c:	697a      	ldr	r2, [r7, #20]
 800375e:	fb03 f202 	mul.w	r2, r3, r2
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	fbb2 f3f3 	udiv	r3, r2, r3
 8003768:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800376a:	4b0a      	ldr	r3, [pc, #40]	; (8003794 <HAL_RCC_GetSysClockFreq+0x108>)
 800376c:	68db      	ldr	r3, [r3, #12]
 800376e:	0e5b      	lsrs	r3, r3, #25
 8003770:	f003 0303 	and.w	r3, r3, #3
 8003774:	3301      	adds	r3, #1
 8003776:	005b      	lsls	r3, r3, #1
 8003778:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 800377a:	697a      	ldr	r2, [r7, #20]
 800377c:	683b      	ldr	r3, [r7, #0]
 800377e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003782:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8003784:	69bb      	ldr	r3, [r7, #24]
}
 8003786:	4618      	mov	r0, r3
 8003788:	3724      	adds	r7, #36	; 0x24
 800378a:	46bd      	mov	sp, r7
 800378c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003790:	4770      	bx	lr
 8003792:	bf00      	nop
 8003794:	40021000 	.word	0x40021000
 8003798:	0800caac 	.word	0x0800caac
 800379c:	00f42400 	.word	0x00f42400
 80037a0:	007a1200 	.word	0x007a1200

080037a4 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80037a4:	b480      	push	{r7}
 80037a6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80037a8:	4b03      	ldr	r3, [pc, #12]	; (80037b8 <HAL_RCC_GetHCLKFreq+0x14>)
 80037aa:	681b      	ldr	r3, [r3, #0]
}
 80037ac:	4618      	mov	r0, r3
 80037ae:	46bd      	mov	sp, r7
 80037b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037b4:	4770      	bx	lr
 80037b6:	bf00      	nop
 80037b8:	20000000 	.word	0x20000000

080037bc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80037bc:	b580      	push	{r7, lr}
 80037be:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 80037c0:	f7ff fff0 	bl	80037a4 <HAL_RCC_GetHCLKFreq>
 80037c4:	4602      	mov	r2, r0
 80037c6:	4b06      	ldr	r3, [pc, #24]	; (80037e0 <HAL_RCC_GetPCLK1Freq+0x24>)
 80037c8:	689b      	ldr	r3, [r3, #8]
 80037ca:	0a1b      	lsrs	r3, r3, #8
 80037cc:	f003 0307 	and.w	r3, r3, #7
 80037d0:	4904      	ldr	r1, [pc, #16]	; (80037e4 <HAL_RCC_GetPCLK1Freq+0x28>)
 80037d2:	5ccb      	ldrb	r3, [r1, r3]
 80037d4:	f003 031f 	and.w	r3, r3, #31
 80037d8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80037dc:	4618      	mov	r0, r3
 80037de:	bd80      	pop	{r7, pc}
 80037e0:	40021000 	.word	0x40021000
 80037e4:	0800caa4 	.word	0x0800caa4

080037e8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80037e8:	b580      	push	{r7, lr}
 80037ea:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 80037ec:	f7ff ffda 	bl	80037a4 <HAL_RCC_GetHCLKFreq>
 80037f0:	4602      	mov	r2, r0
 80037f2:	4b06      	ldr	r3, [pc, #24]	; (800380c <HAL_RCC_GetPCLK2Freq+0x24>)
 80037f4:	689b      	ldr	r3, [r3, #8]
 80037f6:	0adb      	lsrs	r3, r3, #11
 80037f8:	f003 0307 	and.w	r3, r3, #7
 80037fc:	4904      	ldr	r1, [pc, #16]	; (8003810 <HAL_RCC_GetPCLK2Freq+0x28>)
 80037fe:	5ccb      	ldrb	r3, [r1, r3]
 8003800:	f003 031f 	and.w	r3, r3, #31
 8003804:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003808:	4618      	mov	r0, r3
 800380a:	bd80      	pop	{r7, pc}
 800380c:	40021000 	.word	0x40021000
 8003810:	0800caa4 	.word	0x0800caa4

08003814 <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8003814:	b480      	push	{r7}
 8003816:	b083      	sub	sp, #12
 8003818:	af00      	add	r7, sp, #0
 800381a:	6078      	str	r0, [r7, #4]
 800381c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void  *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	220f      	movs	r2, #15
 8003822:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 8003824:	4b12      	ldr	r3, [pc, #72]	; (8003870 <HAL_RCC_GetClockConfig+0x5c>)
 8003826:	689b      	ldr	r3, [r3, #8]
 8003828:	f003 0203 	and.w	r2, r3, #3
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_HPRE);
 8003830:	4b0f      	ldr	r3, [pc, #60]	; (8003870 <HAL_RCC_GetClockConfig+0x5c>)
 8003832:	689b      	ldr	r3, [r3, #8]
 8003834:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1);
 800383c:	4b0c      	ldr	r3, [pc, #48]	; (8003870 <HAL_RCC_GetClockConfig+0x5c>)
 800383e:	689b      	ldr	r3, [r3, #8]
 8003840:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 8003848:	4b09      	ldr	r3, [pc, #36]	; (8003870 <HAL_RCC_GetClockConfig+0x5c>)
 800384a:	689b      	ldr	r3, [r3, #8]
 800384c:	08db      	lsrs	r3, r3, #3
 800384e:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 8003856:	4b07      	ldr	r3, [pc, #28]	; (8003874 <HAL_RCC_GetClockConfig+0x60>)
 8003858:	681b      	ldr	r3, [r3, #0]
 800385a:	f003 0207 	and.w	r2, r3, #7
 800385e:	683b      	ldr	r3, [r7, #0]
 8003860:	601a      	str	r2, [r3, #0]
}
 8003862:	bf00      	nop
 8003864:	370c      	adds	r7, #12
 8003866:	46bd      	mov	sp, r7
 8003868:	f85d 7b04 	ldr.w	r7, [sp], #4
 800386c:	4770      	bx	lr
 800386e:	bf00      	nop
 8003870:	40021000 	.word	0x40021000
 8003874:	40022000 	.word	0x40022000

08003878 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8003878:	b580      	push	{r7, lr}
 800387a:	b086      	sub	sp, #24
 800387c:	af00      	add	r7, sp, #0
 800387e:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8003880:	2300      	movs	r3, #0
 8003882:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8003884:	4b2a      	ldr	r3, [pc, #168]	; (8003930 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003886:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003888:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800388c:	2b00      	cmp	r3, #0
 800388e:	d003      	beq.n	8003898 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8003890:	f7ff f984 	bl	8002b9c <HAL_PWREx_GetVoltageRange>
 8003894:	6178      	str	r0, [r7, #20]
 8003896:	e014      	b.n	80038c2 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8003898:	4b25      	ldr	r3, [pc, #148]	; (8003930 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800389a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800389c:	4a24      	ldr	r2, [pc, #144]	; (8003930 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800389e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80038a2:	6593      	str	r3, [r2, #88]	; 0x58
 80038a4:	4b22      	ldr	r3, [pc, #136]	; (8003930 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80038a6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80038a8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80038ac:	60fb      	str	r3, [r7, #12]
 80038ae:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 80038b0:	f7ff f974 	bl	8002b9c <HAL_PWREx_GetVoltageRange>
 80038b4:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 80038b6:	4b1e      	ldr	r3, [pc, #120]	; (8003930 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80038b8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80038ba:	4a1d      	ldr	r2, [pc, #116]	; (8003930 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80038bc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80038c0:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 80038c2:	697b      	ldr	r3, [r7, #20]
 80038c4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80038c8:	d10b      	bne.n	80038e2 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	2b80      	cmp	r3, #128	; 0x80
 80038ce:	d919      	bls.n	8003904 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	2ba0      	cmp	r3, #160	; 0xa0
 80038d4:	d902      	bls.n	80038dc <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80038d6:	2302      	movs	r3, #2
 80038d8:	613b      	str	r3, [r7, #16]
 80038da:	e013      	b.n	8003904 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80038dc:	2301      	movs	r3, #1
 80038de:	613b      	str	r3, [r7, #16]
 80038e0:	e010      	b.n	8003904 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	2b80      	cmp	r3, #128	; 0x80
 80038e6:	d902      	bls.n	80038ee <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 80038e8:	2303      	movs	r3, #3
 80038ea:	613b      	str	r3, [r7, #16]
 80038ec:	e00a      	b.n	8003904 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	2b80      	cmp	r3, #128	; 0x80
 80038f2:	d102      	bne.n	80038fa <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80038f4:	2302      	movs	r3, #2
 80038f6:	613b      	str	r3, [r7, #16]
 80038f8:	e004      	b.n	8003904 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	2b70      	cmp	r3, #112	; 0x70
 80038fe:	d101      	bne.n	8003904 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003900:	2301      	movs	r3, #1
 8003902:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8003904:	4b0b      	ldr	r3, [pc, #44]	; (8003934 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003906:	681b      	ldr	r3, [r3, #0]
 8003908:	f023 0207 	bic.w	r2, r3, #7
 800390c:	4909      	ldr	r1, [pc, #36]	; (8003934 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800390e:	693b      	ldr	r3, [r7, #16]
 8003910:	4313      	orrs	r3, r2
 8003912:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8003914:	4b07      	ldr	r3, [pc, #28]	; (8003934 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003916:	681b      	ldr	r3, [r3, #0]
 8003918:	f003 0307 	and.w	r3, r3, #7
 800391c:	693a      	ldr	r2, [r7, #16]
 800391e:	429a      	cmp	r2, r3
 8003920:	d001      	beq.n	8003926 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8003922:	2301      	movs	r3, #1
 8003924:	e000      	b.n	8003928 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8003926:	2300      	movs	r3, #0
}
 8003928:	4618      	mov	r0, r3
 800392a:	3718      	adds	r7, #24
 800392c:	46bd      	mov	sp, r7
 800392e:	bd80      	pop	{r7, pc}
 8003930:	40021000 	.word	0x40021000
 8003934:	40022000 	.word	0x40022000

08003938 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003938:	b580      	push	{r7, lr}
 800393a:	b086      	sub	sp, #24
 800393c:	af00      	add	r7, sp, #0
 800393e:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8003940:	2300      	movs	r3, #0
 8003942:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003944:	2300      	movs	r3, #0
 8003946:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	681b      	ldr	r3, [r3, #0]
 800394c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003950:	2b00      	cmp	r3, #0
 8003952:	d031      	beq.n	80039b8 <HAL_RCCEx_PeriphCLKConfig+0x80>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003958:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 800395c:	d01a      	beq.n	8003994 <HAL_RCCEx_PeriphCLKConfig+0x5c>
 800395e:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8003962:	d814      	bhi.n	800398e <HAL_RCCEx_PeriphCLKConfig+0x56>
 8003964:	2b00      	cmp	r3, #0
 8003966:	d009      	beq.n	800397c <HAL_RCCEx_PeriphCLKConfig+0x44>
 8003968:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800396c:	d10f      	bne.n	800398e <HAL_RCCEx_PeriphCLKConfig+0x56>
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
 800396e:	4b5d      	ldr	r3, [pc, #372]	; (8003ae4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003970:	68db      	ldr	r3, [r3, #12]
 8003972:	4a5c      	ldr	r2, [pc, #368]	; (8003ae4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003974:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003978:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 800397a:	e00c      	b.n	8003996 <HAL_RCCEx_PeriphCLKConfig+0x5e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	3304      	adds	r3, #4
 8003980:	2100      	movs	r1, #0
 8003982:	4618      	mov	r0, r3
 8003984:	f000 f9de 	bl	8003d44 <RCCEx_PLLSAI1_Config>
 8003988:	4603      	mov	r3, r0
 800398a:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 800398c:	e003      	b.n	8003996 <HAL_RCCEx_PeriphCLKConfig+0x5e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800398e:	2301      	movs	r3, #1
 8003990:	74fb      	strb	r3, [r7, #19]
      break;
 8003992:	e000      	b.n	8003996 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      break;
 8003994:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003996:	7cfb      	ldrb	r3, [r7, #19]
 8003998:	2b00      	cmp	r3, #0
 800399a:	d10b      	bne.n	80039b4 <HAL_RCCEx_PeriphCLKConfig+0x7c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800399c:	4b51      	ldr	r3, [pc, #324]	; (8003ae4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800399e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80039a2:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80039aa:	494e      	ldr	r1, [pc, #312]	; (8003ae4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80039ac:	4313      	orrs	r3, r2
 80039ae:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 80039b2:	e001      	b.n	80039b8 <HAL_RCCEx_PeriphCLKConfig+0x80>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80039b4:	7cfb      	ldrb	r3, [r7, #19]
 80039b6:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	681b      	ldr	r3, [r3, #0]
 80039bc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80039c0:	2b00      	cmp	r3, #0
 80039c2:	f000 809e 	beq.w	8003b02 <HAL_RCCEx_PeriphCLKConfig+0x1ca>
  {
    FlagStatus       pwrclkchanged = RESET;
 80039c6:	2300      	movs	r3, #0
 80039c8:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80039ca:	4b46      	ldr	r3, [pc, #280]	; (8003ae4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80039cc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80039ce:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80039d2:	2b00      	cmp	r3, #0
 80039d4:	d101      	bne.n	80039da <HAL_RCCEx_PeriphCLKConfig+0xa2>
 80039d6:	2301      	movs	r3, #1
 80039d8:	e000      	b.n	80039dc <HAL_RCCEx_PeriphCLKConfig+0xa4>
 80039da:	2300      	movs	r3, #0
 80039dc:	2b00      	cmp	r3, #0
 80039de:	d00d      	beq.n	80039fc <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80039e0:	4b40      	ldr	r3, [pc, #256]	; (8003ae4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80039e2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80039e4:	4a3f      	ldr	r2, [pc, #252]	; (8003ae4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80039e6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80039ea:	6593      	str	r3, [r2, #88]	; 0x58
 80039ec:	4b3d      	ldr	r3, [pc, #244]	; (8003ae4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80039ee:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80039f0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80039f4:	60bb      	str	r3, [r7, #8]
 80039f6:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80039f8:	2301      	movs	r3, #1
 80039fa:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80039fc:	4b3a      	ldr	r3, [pc, #232]	; (8003ae8 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 80039fe:	681b      	ldr	r3, [r3, #0]
 8003a00:	4a39      	ldr	r2, [pc, #228]	; (8003ae8 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8003a02:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003a06:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003a08:	f7fe f89a 	bl	8001b40 <HAL_GetTick>
 8003a0c:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8003a0e:	e009      	b.n	8003a24 <HAL_RCCEx_PeriphCLKConfig+0xec>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003a10:	f7fe f896 	bl	8001b40 <HAL_GetTick>
 8003a14:	4602      	mov	r2, r0
 8003a16:	68fb      	ldr	r3, [r7, #12]
 8003a18:	1ad3      	subs	r3, r2, r3
 8003a1a:	2b02      	cmp	r3, #2
 8003a1c:	d902      	bls.n	8003a24 <HAL_RCCEx_PeriphCLKConfig+0xec>
      {
        ret = HAL_TIMEOUT;
 8003a1e:	2303      	movs	r3, #3
 8003a20:	74fb      	strb	r3, [r7, #19]
        break;
 8003a22:	e005      	b.n	8003a30 <HAL_RCCEx_PeriphCLKConfig+0xf8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8003a24:	4b30      	ldr	r3, [pc, #192]	; (8003ae8 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8003a26:	681b      	ldr	r3, [r3, #0]
 8003a28:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003a2c:	2b00      	cmp	r3, #0
 8003a2e:	d0ef      	beq.n	8003a10 <HAL_RCCEx_PeriphCLKConfig+0xd8>
      }
    }

    if(ret == HAL_OK)
 8003a30:	7cfb      	ldrb	r3, [r7, #19]
 8003a32:	2b00      	cmp	r3, #0
 8003a34:	d15a      	bne.n	8003aec <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8003a36:	4b2b      	ldr	r3, [pc, #172]	; (8003ae4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003a38:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003a3c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003a40:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8003a42:	697b      	ldr	r3, [r7, #20]
 8003a44:	2b00      	cmp	r3, #0
 8003a46:	d01e      	beq.n	8003a86 <HAL_RCCEx_PeriphCLKConfig+0x14e>
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003a4c:	697a      	ldr	r2, [r7, #20]
 8003a4e:	429a      	cmp	r2, r3
 8003a50:	d019      	beq.n	8003a86 <HAL_RCCEx_PeriphCLKConfig+0x14e>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8003a52:	4b24      	ldr	r3, [pc, #144]	; (8003ae4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003a54:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003a58:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003a5c:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003a5e:	4b21      	ldr	r3, [pc, #132]	; (8003ae4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003a60:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003a64:	4a1f      	ldr	r2, [pc, #124]	; (8003ae4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003a66:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003a6a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003a6e:	4b1d      	ldr	r3, [pc, #116]	; (8003ae4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003a70:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003a74:	4a1b      	ldr	r2, [pc, #108]	; (8003ae4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003a76:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003a7a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8003a7e:	4a19      	ldr	r2, [pc, #100]	; (8003ae4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003a80:	697b      	ldr	r3, [r7, #20]
 8003a82:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8003a86:	697b      	ldr	r3, [r7, #20]
 8003a88:	f003 0301 	and.w	r3, r3, #1
 8003a8c:	2b00      	cmp	r3, #0
 8003a8e:	d016      	beq.n	8003abe <HAL_RCCEx_PeriphCLKConfig+0x186>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003a90:	f7fe f856 	bl	8001b40 <HAL_GetTick>
 8003a94:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003a96:	e00b      	b.n	8003ab0 <HAL_RCCEx_PeriphCLKConfig+0x178>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003a98:	f7fe f852 	bl	8001b40 <HAL_GetTick>
 8003a9c:	4602      	mov	r2, r0
 8003a9e:	68fb      	ldr	r3, [r7, #12]
 8003aa0:	1ad3      	subs	r3, r2, r3
 8003aa2:	f241 3288 	movw	r2, #5000	; 0x1388
 8003aa6:	4293      	cmp	r3, r2
 8003aa8:	d902      	bls.n	8003ab0 <HAL_RCCEx_PeriphCLKConfig+0x178>
          {
            ret = HAL_TIMEOUT;
 8003aaa:	2303      	movs	r3, #3
 8003aac:	74fb      	strb	r3, [r7, #19]
            break;
 8003aae:	e006      	b.n	8003abe <HAL_RCCEx_PeriphCLKConfig+0x186>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003ab0:	4b0c      	ldr	r3, [pc, #48]	; (8003ae4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003ab2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003ab6:	f003 0302 	and.w	r3, r3, #2
 8003aba:	2b00      	cmp	r3, #0
 8003abc:	d0ec      	beq.n	8003a98 <HAL_RCCEx_PeriphCLKConfig+0x160>
          }
        }
      }

      if(ret == HAL_OK)
 8003abe:	7cfb      	ldrb	r3, [r7, #19]
 8003ac0:	2b00      	cmp	r3, #0
 8003ac2:	d10b      	bne.n	8003adc <HAL_RCCEx_PeriphCLKConfig+0x1a4>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003ac4:	4b07      	ldr	r3, [pc, #28]	; (8003ae4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003ac6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003aca:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003ad2:	4904      	ldr	r1, [pc, #16]	; (8003ae4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003ad4:	4313      	orrs	r3, r2
 8003ad6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8003ada:	e009      	b.n	8003af0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003adc:	7cfb      	ldrb	r3, [r7, #19]
 8003ade:	74bb      	strb	r3, [r7, #18]
 8003ae0:	e006      	b.n	8003af0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
 8003ae2:	bf00      	nop
 8003ae4:	40021000 	.word	0x40021000
 8003ae8:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003aec:	7cfb      	ldrb	r3, [r7, #19]
 8003aee:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003af0:	7c7b      	ldrb	r3, [r7, #17]
 8003af2:	2b01      	cmp	r3, #1
 8003af4:	d105      	bne.n	8003b02 <HAL_RCCEx_PeriphCLKConfig+0x1ca>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003af6:	4b8a      	ldr	r3, [pc, #552]	; (8003d20 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003af8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003afa:	4a89      	ldr	r2, [pc, #548]	; (8003d20 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003afc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003b00:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	681b      	ldr	r3, [r3, #0]
 8003b06:	f003 0301 	and.w	r3, r3, #1
 8003b0a:	2b00      	cmp	r3, #0
 8003b0c:	d00a      	beq.n	8003b24 <HAL_RCCEx_PeriphCLKConfig+0x1ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003b0e:	4b84      	ldr	r3, [pc, #528]	; (8003d20 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003b10:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003b14:	f023 0203 	bic.w	r2, r3, #3
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	6a1b      	ldr	r3, [r3, #32]
 8003b1c:	4980      	ldr	r1, [pc, #512]	; (8003d20 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003b1e:	4313      	orrs	r3, r2
 8003b20:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	681b      	ldr	r3, [r3, #0]
 8003b28:	f003 0302 	and.w	r3, r3, #2
 8003b2c:	2b00      	cmp	r3, #0
 8003b2e:	d00a      	beq.n	8003b46 <HAL_RCCEx_PeriphCLKConfig+0x20e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003b30:	4b7b      	ldr	r3, [pc, #492]	; (8003d20 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003b32:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003b36:	f023 020c 	bic.w	r2, r3, #12
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b3e:	4978      	ldr	r1, [pc, #480]	; (8003d20 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003b40:	4313      	orrs	r3, r2
 8003b42:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	681b      	ldr	r3, [r3, #0]
 8003b4a:	f003 0320 	and.w	r3, r3, #32
 8003b4e:	2b00      	cmp	r3, #0
 8003b50:	d00a      	beq.n	8003b68 <HAL_RCCEx_PeriphCLKConfig+0x230>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003b52:	4b73      	ldr	r3, [pc, #460]	; (8003d20 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003b54:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003b58:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003b60:	496f      	ldr	r1, [pc, #444]	; (8003d20 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003b62:	4313      	orrs	r3, r2
 8003b64:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	681b      	ldr	r3, [r3, #0]
 8003b6c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003b70:	2b00      	cmp	r3, #0
 8003b72:	d00a      	beq.n	8003b8a <HAL_RCCEx_PeriphCLKConfig+0x252>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003b74:	4b6a      	ldr	r3, [pc, #424]	; (8003d20 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003b76:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003b7a:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003b82:	4967      	ldr	r1, [pc, #412]	; (8003d20 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003b84:	4313      	orrs	r3, r2
 8003b86:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	681b      	ldr	r3, [r3, #0]
 8003b8e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003b92:	2b00      	cmp	r3, #0
 8003b94:	d00a      	beq.n	8003bac <HAL_RCCEx_PeriphCLKConfig+0x274>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8003b96:	4b62      	ldr	r3, [pc, #392]	; (8003d20 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003b98:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003b9c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ba4:	495e      	ldr	r1, [pc, #376]	; (8003d20 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003ba6:	4313      	orrs	r3, r2
 8003ba8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	681b      	ldr	r3, [r3, #0]
 8003bb0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003bb4:	2b00      	cmp	r3, #0
 8003bb6:	d00a      	beq.n	8003bce <HAL_RCCEx_PeriphCLKConfig+0x296>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003bb8:	4b59      	ldr	r3, [pc, #356]	; (8003d20 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003bba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003bbe:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003bc6:	4956      	ldr	r1, [pc, #344]	; (8003d20 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003bc8:	4313      	orrs	r3, r2
 8003bca:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	681b      	ldr	r3, [r3, #0]
 8003bd2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003bd6:	2b00      	cmp	r3, #0
 8003bd8:	d00a      	beq.n	8003bf0 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003bda:	4b51      	ldr	r3, [pc, #324]	; (8003d20 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003bdc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003be0:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003be8:	494d      	ldr	r1, [pc, #308]	; (8003d20 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003bea:	4313      	orrs	r3, r2
 8003bec:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	681b      	ldr	r3, [r3, #0]
 8003bf4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003bf8:	2b00      	cmp	r3, #0
 8003bfa:	d028      	beq.n	8003c4e <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003bfc:	4b48      	ldr	r3, [pc, #288]	; (8003d20 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003bfe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003c02:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c0a:	4945      	ldr	r1, [pc, #276]	; (8003d20 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003c0c:	4313      	orrs	r3, r2
 8003c0e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c16:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003c1a:	d106      	bne.n	8003c2a <HAL_RCCEx_PeriphCLKConfig+0x2f2>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003c1c:	4b40      	ldr	r3, [pc, #256]	; (8003d20 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003c1e:	68db      	ldr	r3, [r3, #12]
 8003c20:	4a3f      	ldr	r2, [pc, #252]	; (8003d20 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003c22:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003c26:	60d3      	str	r3, [r2, #12]
 8003c28:	e011      	b.n	8003c4e <HAL_RCCEx_PeriphCLKConfig+0x316>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c2e:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003c32:	d10c      	bne.n	8003c4e <HAL_RCCEx_PeriphCLKConfig+0x316>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	3304      	adds	r3, #4
 8003c38:	2101      	movs	r1, #1
 8003c3a:	4618      	mov	r0, r3
 8003c3c:	f000 f882 	bl	8003d44 <RCCEx_PLLSAI1_Config>
 8003c40:	4603      	mov	r3, r0
 8003c42:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8003c44:	7cfb      	ldrb	r3, [r7, #19]
 8003c46:	2b00      	cmp	r3, #0
 8003c48:	d001      	beq.n	8003c4e <HAL_RCCEx_PeriphCLKConfig+0x316>
        {
          /* set overall return value */
          status = ret;
 8003c4a:	7cfb      	ldrb	r3, [r7, #19]
 8003c4c:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	681b      	ldr	r3, [r3, #0]
 8003c52:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003c56:	2b00      	cmp	r3, #0
 8003c58:	d028      	beq.n	8003cac <HAL_RCCEx_PeriphCLKConfig+0x374>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8003c5a:	4b31      	ldr	r3, [pc, #196]	; (8003d20 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003c5c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003c60:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003c68:	492d      	ldr	r1, [pc, #180]	; (8003d20 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003c6a:	4313      	orrs	r3, r2
 8003c6c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003c74:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003c78:	d106      	bne.n	8003c88 <HAL_RCCEx_PeriphCLKConfig+0x350>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003c7a:	4b29      	ldr	r3, [pc, #164]	; (8003d20 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003c7c:	68db      	ldr	r3, [r3, #12]
 8003c7e:	4a28      	ldr	r2, [pc, #160]	; (8003d20 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003c80:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003c84:	60d3      	str	r3, [r2, #12]
 8003c86:	e011      	b.n	8003cac <HAL_RCCEx_PeriphCLKConfig+0x374>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003c8c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003c90:	d10c      	bne.n	8003cac <HAL_RCCEx_PeriphCLKConfig+0x374>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	3304      	adds	r3, #4
 8003c96:	2101      	movs	r1, #1
 8003c98:	4618      	mov	r0, r3
 8003c9a:	f000 f853 	bl	8003d44 <RCCEx_PLLSAI1_Config>
 8003c9e:	4603      	mov	r3, r0
 8003ca0:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003ca2:	7cfb      	ldrb	r3, [r7, #19]
 8003ca4:	2b00      	cmp	r3, #0
 8003ca6:	d001      	beq.n	8003cac <HAL_RCCEx_PeriphCLKConfig+0x374>
      {
        /* set overall return value */
        status = ret;
 8003ca8:	7cfb      	ldrb	r3, [r7, #19]
 8003caa:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	681b      	ldr	r3, [r3, #0]
 8003cb0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003cb4:	2b00      	cmp	r3, #0
 8003cb6:	d01c      	beq.n	8003cf2 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003cb8:	4b19      	ldr	r3, [pc, #100]	; (8003d20 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003cba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003cbe:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003cc6:	4916      	ldr	r1, [pc, #88]	; (8003d20 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003cc8:	4313      	orrs	r3, r2
 8003cca:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003cd2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003cd6:	d10c      	bne.n	8003cf2 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	3304      	adds	r3, #4
 8003cdc:	2102      	movs	r1, #2
 8003cde:	4618      	mov	r0, r3
 8003ce0:	f000 f830 	bl	8003d44 <RCCEx_PLLSAI1_Config>
 8003ce4:	4603      	mov	r3, r0
 8003ce6:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003ce8:	7cfb      	ldrb	r3, [r7, #19]
 8003cea:	2b00      	cmp	r3, #0
 8003cec:	d001      	beq.n	8003cf2 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
      {
        /* set overall return value */
        status = ret;
 8003cee:	7cfb      	ldrb	r3, [r7, #19]
 8003cf0:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	681b      	ldr	r3, [r3, #0]
 8003cf6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003cfa:	2b00      	cmp	r3, #0
 8003cfc:	d00a      	beq.n	8003d14 <HAL_RCCEx_PeriphCLKConfig+0x3dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8003cfe:	4b08      	ldr	r3, [pc, #32]	; (8003d20 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003d00:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003d04:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003d0c:	4904      	ldr	r1, [pc, #16]	; (8003d20 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003d0e:	4313      	orrs	r3, r2
 8003d10:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8003d14:	7cbb      	ldrb	r3, [r7, #18]
}
 8003d16:	4618      	mov	r0, r3
 8003d18:	3718      	adds	r7, #24
 8003d1a:	46bd      	mov	sp, r7
 8003d1c:	bd80      	pop	{r7, pc}
 8003d1e:	bf00      	nop
 8003d20:	40021000 	.word	0x40021000

08003d24 <HAL_RCCEx_EnableMSIPLLMode>:
  * @note   Prior to enable the PLL-mode of the MSI for automatic hardware
  *         calibration LSE oscillator is to be enabled with HAL_RCC_OscConfig().
  * @retval None
  */
void HAL_RCCEx_EnableMSIPLLMode(void)
{
 8003d24:	b480      	push	{r7}
 8003d26:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN) ;
 8003d28:	4b05      	ldr	r3, [pc, #20]	; (8003d40 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 8003d2a:	681b      	ldr	r3, [r3, #0]
 8003d2c:	4a04      	ldr	r2, [pc, #16]	; (8003d40 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 8003d2e:	f043 0304 	orr.w	r3, r3, #4
 8003d32:	6013      	str	r3, [r2, #0]
}
 8003d34:	bf00      	nop
 8003d36:	46bd      	mov	sp, r7
 8003d38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d3c:	4770      	bx	lr
 8003d3e:	bf00      	nop
 8003d40:	40021000 	.word	0x40021000

08003d44 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8003d44:	b580      	push	{r7, lr}
 8003d46:	b084      	sub	sp, #16
 8003d48:	af00      	add	r7, sp, #0
 8003d4a:	6078      	str	r0, [r7, #4]
 8003d4c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003d4e:	2300      	movs	r3, #0
 8003d50:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8003d52:	4b74      	ldr	r3, [pc, #464]	; (8003f24 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003d54:	68db      	ldr	r3, [r3, #12]
 8003d56:	f003 0303 	and.w	r3, r3, #3
 8003d5a:	2b00      	cmp	r3, #0
 8003d5c:	d018      	beq.n	8003d90 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8003d5e:	4b71      	ldr	r3, [pc, #452]	; (8003f24 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003d60:	68db      	ldr	r3, [r3, #12]
 8003d62:	f003 0203 	and.w	r2, r3, #3
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	681b      	ldr	r3, [r3, #0]
 8003d6a:	429a      	cmp	r2, r3
 8003d6c:	d10d      	bne.n	8003d8a <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	681b      	ldr	r3, [r3, #0]
       ||
 8003d72:	2b00      	cmp	r3, #0
 8003d74:	d009      	beq.n	8003d8a <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8003d76:	4b6b      	ldr	r3, [pc, #428]	; (8003f24 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003d78:	68db      	ldr	r3, [r3, #12]
 8003d7a:	091b      	lsrs	r3, r3, #4
 8003d7c:	f003 0307 	and.w	r3, r3, #7
 8003d80:	1c5a      	adds	r2, r3, #1
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	685b      	ldr	r3, [r3, #4]
       ||
 8003d86:	429a      	cmp	r2, r3
 8003d88:	d047      	beq.n	8003e1a <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8003d8a:	2301      	movs	r3, #1
 8003d8c:	73fb      	strb	r3, [r7, #15]
 8003d8e:	e044      	b.n	8003e1a <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	681b      	ldr	r3, [r3, #0]
 8003d94:	2b03      	cmp	r3, #3
 8003d96:	d018      	beq.n	8003dca <RCCEx_PLLSAI1_Config+0x86>
 8003d98:	2b03      	cmp	r3, #3
 8003d9a:	d825      	bhi.n	8003de8 <RCCEx_PLLSAI1_Config+0xa4>
 8003d9c:	2b01      	cmp	r3, #1
 8003d9e:	d002      	beq.n	8003da6 <RCCEx_PLLSAI1_Config+0x62>
 8003da0:	2b02      	cmp	r3, #2
 8003da2:	d009      	beq.n	8003db8 <RCCEx_PLLSAI1_Config+0x74>
 8003da4:	e020      	b.n	8003de8 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8003da6:	4b5f      	ldr	r3, [pc, #380]	; (8003f24 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003da8:	681b      	ldr	r3, [r3, #0]
 8003daa:	f003 0302 	and.w	r3, r3, #2
 8003dae:	2b00      	cmp	r3, #0
 8003db0:	d11d      	bne.n	8003dee <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8003db2:	2301      	movs	r3, #1
 8003db4:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003db6:	e01a      	b.n	8003dee <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8003db8:	4b5a      	ldr	r3, [pc, #360]	; (8003f24 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003dba:	681b      	ldr	r3, [r3, #0]
 8003dbc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003dc0:	2b00      	cmp	r3, #0
 8003dc2:	d116      	bne.n	8003df2 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8003dc4:	2301      	movs	r3, #1
 8003dc6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003dc8:	e013      	b.n	8003df2 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8003dca:	4b56      	ldr	r3, [pc, #344]	; (8003f24 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003dcc:	681b      	ldr	r3, [r3, #0]
 8003dce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003dd2:	2b00      	cmp	r3, #0
 8003dd4:	d10f      	bne.n	8003df6 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8003dd6:	4b53      	ldr	r3, [pc, #332]	; (8003f24 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003dd8:	681b      	ldr	r3, [r3, #0]
 8003dda:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003dde:	2b00      	cmp	r3, #0
 8003de0:	d109      	bne.n	8003df6 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8003de2:	2301      	movs	r3, #1
 8003de4:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8003de6:	e006      	b.n	8003df6 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8003de8:	2301      	movs	r3, #1
 8003dea:	73fb      	strb	r3, [r7, #15]
      break;
 8003dec:	e004      	b.n	8003df8 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8003dee:	bf00      	nop
 8003df0:	e002      	b.n	8003df8 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8003df2:	bf00      	nop
 8003df4:	e000      	b.n	8003df8 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8003df6:	bf00      	nop
    }

    if(status == HAL_OK)
 8003df8:	7bfb      	ldrb	r3, [r7, #15]
 8003dfa:	2b00      	cmp	r3, #0
 8003dfc:	d10d      	bne.n	8003e1a <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8003dfe:	4b49      	ldr	r3, [pc, #292]	; (8003f24 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003e00:	68db      	ldr	r3, [r3, #12]
 8003e02:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	6819      	ldr	r1, [r3, #0]
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	685b      	ldr	r3, [r3, #4]
 8003e0e:	3b01      	subs	r3, #1
 8003e10:	011b      	lsls	r3, r3, #4
 8003e12:	430b      	orrs	r3, r1
 8003e14:	4943      	ldr	r1, [pc, #268]	; (8003f24 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003e16:	4313      	orrs	r3, r2
 8003e18:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8003e1a:	7bfb      	ldrb	r3, [r7, #15]
 8003e1c:	2b00      	cmp	r3, #0
 8003e1e:	d17c      	bne.n	8003f1a <RCCEx_PLLSAI1_Config+0x1d6>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8003e20:	4b40      	ldr	r3, [pc, #256]	; (8003f24 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003e22:	681b      	ldr	r3, [r3, #0]
 8003e24:	4a3f      	ldr	r2, [pc, #252]	; (8003f24 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003e26:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8003e2a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003e2c:	f7fd fe88 	bl	8001b40 <HAL_GetTick>
 8003e30:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8003e32:	e009      	b.n	8003e48 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003e34:	f7fd fe84 	bl	8001b40 <HAL_GetTick>
 8003e38:	4602      	mov	r2, r0
 8003e3a:	68bb      	ldr	r3, [r7, #8]
 8003e3c:	1ad3      	subs	r3, r2, r3
 8003e3e:	2b02      	cmp	r3, #2
 8003e40:	d902      	bls.n	8003e48 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8003e42:	2303      	movs	r3, #3
 8003e44:	73fb      	strb	r3, [r7, #15]
        break;
 8003e46:	e005      	b.n	8003e54 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8003e48:	4b36      	ldr	r3, [pc, #216]	; (8003f24 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003e4a:	681b      	ldr	r3, [r3, #0]
 8003e4c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003e50:	2b00      	cmp	r3, #0
 8003e52:	d1ef      	bne.n	8003e34 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8003e54:	7bfb      	ldrb	r3, [r7, #15]
 8003e56:	2b00      	cmp	r3, #0
 8003e58:	d15f      	bne.n	8003f1a <RCCEx_PLLSAI1_Config+0x1d6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8003e5a:	683b      	ldr	r3, [r7, #0]
 8003e5c:	2b00      	cmp	r3, #0
 8003e5e:	d110      	bne.n	8003e82 <RCCEx_PLLSAI1_Config+0x13e>
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI1 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003e60:	4b30      	ldr	r3, [pc, #192]	; (8003f24 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003e62:	691b      	ldr	r3, [r3, #16]
 8003e64:	f023 4378 	bic.w	r3, r3, #4160749568	; 0xf8000000
 8003e68:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8003e6c:	687a      	ldr	r2, [r7, #4]
 8003e6e:	6892      	ldr	r2, [r2, #8]
 8003e70:	0211      	lsls	r1, r2, #8
 8003e72:	687a      	ldr	r2, [r7, #4]
 8003e74:	68d2      	ldr	r2, [r2, #12]
 8003e76:	06d2      	lsls	r2, r2, #27
 8003e78:	430a      	orrs	r2, r1
 8003e7a:	492a      	ldr	r1, [pc, #168]	; (8003f24 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003e7c:	4313      	orrs	r3, r2
 8003e7e:	610b      	str	r3, [r1, #16]
 8003e80:	e027      	b.n	8003ed2 <RCCEx_PLLSAI1_Config+0x18e>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8003e82:	683b      	ldr	r3, [r7, #0]
 8003e84:	2b01      	cmp	r3, #1
 8003e86:	d112      	bne.n	8003eae <RCCEx_PLLSAI1_Config+0x16a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003e88:	4b26      	ldr	r3, [pc, #152]	; (8003f24 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003e8a:	691b      	ldr	r3, [r3, #16]
 8003e8c:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8003e90:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8003e94:	687a      	ldr	r2, [r7, #4]
 8003e96:	6892      	ldr	r2, [r2, #8]
 8003e98:	0211      	lsls	r1, r2, #8
 8003e9a:	687a      	ldr	r2, [r7, #4]
 8003e9c:	6912      	ldr	r2, [r2, #16]
 8003e9e:	0852      	lsrs	r2, r2, #1
 8003ea0:	3a01      	subs	r2, #1
 8003ea2:	0552      	lsls	r2, r2, #21
 8003ea4:	430a      	orrs	r2, r1
 8003ea6:	491f      	ldr	r1, [pc, #124]	; (8003f24 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003ea8:	4313      	orrs	r3, r2
 8003eaa:	610b      	str	r3, [r1, #16]
 8003eac:	e011      	b.n	8003ed2 <RCCEx_PLLSAI1_Config+0x18e>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003eae:	4b1d      	ldr	r3, [pc, #116]	; (8003f24 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003eb0:	691b      	ldr	r3, [r3, #16]
 8003eb2:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8003eb6:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8003eba:	687a      	ldr	r2, [r7, #4]
 8003ebc:	6892      	ldr	r2, [r2, #8]
 8003ebe:	0211      	lsls	r1, r2, #8
 8003ec0:	687a      	ldr	r2, [r7, #4]
 8003ec2:	6952      	ldr	r2, [r2, #20]
 8003ec4:	0852      	lsrs	r2, r2, #1
 8003ec6:	3a01      	subs	r2, #1
 8003ec8:	0652      	lsls	r2, r2, #25
 8003eca:	430a      	orrs	r2, r1
 8003ecc:	4915      	ldr	r1, [pc, #84]	; (8003f24 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003ece:	4313      	orrs	r3, r2
 8003ed0:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8003ed2:	4b14      	ldr	r3, [pc, #80]	; (8003f24 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003ed4:	681b      	ldr	r3, [r3, #0]
 8003ed6:	4a13      	ldr	r2, [pc, #76]	; (8003f24 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003ed8:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8003edc:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003ede:	f7fd fe2f 	bl	8001b40 <HAL_GetTick>
 8003ee2:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8003ee4:	e009      	b.n	8003efa <RCCEx_PLLSAI1_Config+0x1b6>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003ee6:	f7fd fe2b 	bl	8001b40 <HAL_GetTick>
 8003eea:	4602      	mov	r2, r0
 8003eec:	68bb      	ldr	r3, [r7, #8]
 8003eee:	1ad3      	subs	r3, r2, r3
 8003ef0:	2b02      	cmp	r3, #2
 8003ef2:	d902      	bls.n	8003efa <RCCEx_PLLSAI1_Config+0x1b6>
        {
          status = HAL_TIMEOUT;
 8003ef4:	2303      	movs	r3, #3
 8003ef6:	73fb      	strb	r3, [r7, #15]
          break;
 8003ef8:	e005      	b.n	8003f06 <RCCEx_PLLSAI1_Config+0x1c2>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8003efa:	4b0a      	ldr	r3, [pc, #40]	; (8003f24 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003efc:	681b      	ldr	r3, [r3, #0]
 8003efe:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003f02:	2b00      	cmp	r3, #0
 8003f04:	d0ef      	beq.n	8003ee6 <RCCEx_PLLSAI1_Config+0x1a2>
        }
      }

      if(status == HAL_OK)
 8003f06:	7bfb      	ldrb	r3, [r7, #15]
 8003f08:	2b00      	cmp	r3, #0
 8003f0a:	d106      	bne.n	8003f1a <RCCEx_PLLSAI1_Config+0x1d6>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8003f0c:	4b05      	ldr	r3, [pc, #20]	; (8003f24 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003f0e:	691a      	ldr	r2, [r3, #16]
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	699b      	ldr	r3, [r3, #24]
 8003f14:	4903      	ldr	r1, [pc, #12]	; (8003f24 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003f16:	4313      	orrs	r3, r2
 8003f18:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8003f1a:	7bfb      	ldrb	r3, [r7, #15]
}
 8003f1c:	4618      	mov	r0, r3
 8003f1e:	3710      	adds	r7, #16
 8003f20:	46bd      	mov	sp, r7
 8003f22:	bd80      	pop	{r7, pc}
 8003f24:	40021000 	.word	0x40021000

08003f28 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003f28:	b580      	push	{r7, lr}
 8003f2a:	b084      	sub	sp, #16
 8003f2c:	af00      	add	r7, sp, #0
 8003f2e:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	2b00      	cmp	r3, #0
 8003f34:	d101      	bne.n	8003f3a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8003f36:	2301      	movs	r3, #1
 8003f38:	e095      	b.n	8004066 <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f3e:	2b00      	cmp	r3, #0
 8003f40:	d108      	bne.n	8003f54 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	685b      	ldr	r3, [r3, #4]
 8003f46:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003f4a:	d009      	beq.n	8003f60 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	2200      	movs	r2, #0
 8003f50:	61da      	str	r2, [r3, #28]
 8003f52:	e005      	b.n	8003f60 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	2200      	movs	r2, #0
 8003f58:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	2200      	movs	r2, #0
 8003f5e:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	2200      	movs	r2, #0
 8003f64:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8003f6c:	b2db      	uxtb	r3, r3
 8003f6e:	2b00      	cmp	r3, #0
 8003f70:	d106      	bne.n	8003f80 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	2200      	movs	r2, #0
 8003f76:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8003f7a:	6878      	ldr	r0, [r7, #4]
 8003f7c:	f7fd fb5a 	bl	8001634 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	2202      	movs	r2, #2
 8003f84:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	681b      	ldr	r3, [r3, #0]
 8003f8c:	681a      	ldr	r2, [r3, #0]
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	681b      	ldr	r3, [r3, #0]
 8003f92:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003f96:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	68db      	ldr	r3, [r3, #12]
 8003f9c:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8003fa0:	d902      	bls.n	8003fa8 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8003fa2:	2300      	movs	r3, #0
 8003fa4:	60fb      	str	r3, [r7, #12]
 8003fa6:	e002      	b.n	8003fae <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8003fa8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003fac:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	68db      	ldr	r3, [r3, #12]
 8003fb2:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8003fb6:	d007      	beq.n	8003fc8 <HAL_SPI_Init+0xa0>
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	68db      	ldr	r3, [r3, #12]
 8003fbc:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8003fc0:	d002      	beq.n	8003fc8 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	2200      	movs	r2, #0
 8003fc6:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	685b      	ldr	r3, [r3, #4]
 8003fcc:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	689b      	ldr	r3, [r3, #8]
 8003fd4:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8003fd8:	431a      	orrs	r2, r3
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	691b      	ldr	r3, [r3, #16]
 8003fde:	f003 0302 	and.w	r3, r3, #2
 8003fe2:	431a      	orrs	r2, r3
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	695b      	ldr	r3, [r3, #20]
 8003fe8:	f003 0301 	and.w	r3, r3, #1
 8003fec:	431a      	orrs	r2, r3
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	699b      	ldr	r3, [r3, #24]
 8003ff2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003ff6:	431a      	orrs	r2, r3
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	69db      	ldr	r3, [r3, #28]
 8003ffc:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004000:	431a      	orrs	r2, r3
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	6a1b      	ldr	r3, [r3, #32]
 8004006:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800400a:	ea42 0103 	orr.w	r1, r2, r3
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004012:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	681b      	ldr	r3, [r3, #0]
 800401a:	430a      	orrs	r2, r1
 800401c:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	699b      	ldr	r3, [r3, #24]
 8004022:	0c1b      	lsrs	r3, r3, #16
 8004024:	f003 0204 	and.w	r2, r3, #4
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800402c:	f003 0310 	and.w	r3, r3, #16
 8004030:	431a      	orrs	r2, r3
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004036:	f003 0308 	and.w	r3, r3, #8
 800403a:	431a      	orrs	r2, r3
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	68db      	ldr	r3, [r3, #12]
 8004040:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8004044:	ea42 0103 	orr.w	r1, r2, r3
 8004048:	68fb      	ldr	r3, [r7, #12]
 800404a:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	681b      	ldr	r3, [r3, #0]
 8004052:	430a      	orrs	r2, r1
 8004054:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	2200      	movs	r2, #0
 800405a:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	2201      	movs	r2, #1
 8004060:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8004064:	2300      	movs	r3, #0
}
 8004066:	4618      	mov	r0, r3
 8004068:	3710      	adds	r7, #16
 800406a:	46bd      	mov	sp, r7
 800406c:	bd80      	pop	{r7, pc}

0800406e <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800406e:	b580      	push	{r7, lr}
 8004070:	b082      	sub	sp, #8
 8004072:	af00      	add	r7, sp, #0
 8004074:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	2b00      	cmp	r3, #0
 800407a:	d101      	bne.n	8004080 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800407c:	2301      	movs	r3, #1
 800407e:	e049      	b.n	8004114 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004086:	b2db      	uxtb	r3, r3
 8004088:	2b00      	cmp	r3, #0
 800408a:	d106      	bne.n	800409a <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	2200      	movs	r2, #0
 8004090:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004094:	6878      	ldr	r0, [r7, #4]
 8004096:	f7fd fb0f 	bl	80016b8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	2202      	movs	r2, #2
 800409e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	681a      	ldr	r2, [r3, #0]
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	3304      	adds	r3, #4
 80040aa:	4619      	mov	r1, r3
 80040ac:	4610      	mov	r0, r2
 80040ae:	f000 fadb 	bl	8004668 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	2201      	movs	r2, #1
 80040b6:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	2201      	movs	r2, #1
 80040be:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	2201      	movs	r2, #1
 80040c6:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	2201      	movs	r2, #1
 80040ce:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	2201      	movs	r2, #1
 80040d6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	2201      	movs	r2, #1
 80040de:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	2201      	movs	r2, #1
 80040e6:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	2201      	movs	r2, #1
 80040ee:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	2201      	movs	r2, #1
 80040f6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	2201      	movs	r2, #1
 80040fe:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	2201      	movs	r2, #1
 8004106:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	2201      	movs	r2, #1
 800410e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004112:	2300      	movs	r3, #0
}
 8004114:	4618      	mov	r0, r3
 8004116:	3708      	adds	r7, #8
 8004118:	46bd      	mov	sp, r7
 800411a:	bd80      	pop	{r7, pc}

0800411c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800411c:	b480      	push	{r7}
 800411e:	b085      	sub	sp, #20
 8004120:	af00      	add	r7, sp, #0
 8004122:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800412a:	b2db      	uxtb	r3, r3
 800412c:	2b01      	cmp	r3, #1
 800412e:	d001      	beq.n	8004134 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004130:	2301      	movs	r3, #1
 8004132:	e03b      	b.n	80041ac <HAL_TIM_Base_Start_IT+0x90>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	2202      	movs	r2, #2
 8004138:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	681b      	ldr	r3, [r3, #0]
 8004140:	68da      	ldr	r2, [r3, #12]
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	681b      	ldr	r3, [r3, #0]
 8004146:	f042 0201 	orr.w	r2, r2, #1
 800414a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	681b      	ldr	r3, [r3, #0]
 8004150:	4a19      	ldr	r2, [pc, #100]	; (80041b8 <HAL_TIM_Base_Start_IT+0x9c>)
 8004152:	4293      	cmp	r3, r2
 8004154:	d009      	beq.n	800416a <HAL_TIM_Base_Start_IT+0x4e>
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	681b      	ldr	r3, [r3, #0]
 800415a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800415e:	d004      	beq.n	800416a <HAL_TIM_Base_Start_IT+0x4e>
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	681b      	ldr	r3, [r3, #0]
 8004164:	4a15      	ldr	r2, [pc, #84]	; (80041bc <HAL_TIM_Base_Start_IT+0xa0>)
 8004166:	4293      	cmp	r3, r2
 8004168:	d115      	bne.n	8004196 <HAL_TIM_Base_Start_IT+0x7a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	681b      	ldr	r3, [r3, #0]
 800416e:	689a      	ldr	r2, [r3, #8]
 8004170:	4b13      	ldr	r3, [pc, #76]	; (80041c0 <HAL_TIM_Base_Start_IT+0xa4>)
 8004172:	4013      	ands	r3, r2
 8004174:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004176:	68fb      	ldr	r3, [r7, #12]
 8004178:	2b06      	cmp	r3, #6
 800417a:	d015      	beq.n	80041a8 <HAL_TIM_Base_Start_IT+0x8c>
 800417c:	68fb      	ldr	r3, [r7, #12]
 800417e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004182:	d011      	beq.n	80041a8 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	681b      	ldr	r3, [r3, #0]
 8004188:	681a      	ldr	r2, [r3, #0]
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	681b      	ldr	r3, [r3, #0]
 800418e:	f042 0201 	orr.w	r2, r2, #1
 8004192:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004194:	e008      	b.n	80041a8 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	681b      	ldr	r3, [r3, #0]
 800419a:	681a      	ldr	r2, [r3, #0]
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	681b      	ldr	r3, [r3, #0]
 80041a0:	f042 0201 	orr.w	r2, r2, #1
 80041a4:	601a      	str	r2, [r3, #0]
 80041a6:	e000      	b.n	80041aa <HAL_TIM_Base_Start_IT+0x8e>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80041a8:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80041aa:	2300      	movs	r3, #0
}
 80041ac:	4618      	mov	r0, r3
 80041ae:	3714      	adds	r7, #20
 80041b0:	46bd      	mov	sp, r7
 80041b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041b6:	4770      	bx	lr
 80041b8:	40012c00 	.word	0x40012c00
 80041bc:	40014000 	.word	0x40014000
 80041c0:	00010007 	.word	0x00010007

080041c4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80041c4:	b580      	push	{r7, lr}
 80041c6:	b082      	sub	sp, #8
 80041c8:	af00      	add	r7, sp, #0
 80041ca:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	681b      	ldr	r3, [r3, #0]
 80041d0:	691b      	ldr	r3, [r3, #16]
 80041d2:	f003 0302 	and.w	r3, r3, #2
 80041d6:	2b02      	cmp	r3, #2
 80041d8:	d122      	bne.n	8004220 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	681b      	ldr	r3, [r3, #0]
 80041de:	68db      	ldr	r3, [r3, #12]
 80041e0:	f003 0302 	and.w	r3, r3, #2
 80041e4:	2b02      	cmp	r3, #2
 80041e6:	d11b      	bne.n	8004220 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	681b      	ldr	r3, [r3, #0]
 80041ec:	f06f 0202 	mvn.w	r2, #2
 80041f0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	2201      	movs	r2, #1
 80041f6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	681b      	ldr	r3, [r3, #0]
 80041fc:	699b      	ldr	r3, [r3, #24]
 80041fe:	f003 0303 	and.w	r3, r3, #3
 8004202:	2b00      	cmp	r3, #0
 8004204:	d003      	beq.n	800420e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004206:	6878      	ldr	r0, [r7, #4]
 8004208:	f000 fa10 	bl	800462c <HAL_TIM_IC_CaptureCallback>
 800420c:	e005      	b.n	800421a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800420e:	6878      	ldr	r0, [r7, #4]
 8004210:	f000 fa02 	bl	8004618 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004214:	6878      	ldr	r0, [r7, #4]
 8004216:	f000 fa13 	bl	8004640 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	2200      	movs	r2, #0
 800421e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	681b      	ldr	r3, [r3, #0]
 8004224:	691b      	ldr	r3, [r3, #16]
 8004226:	f003 0304 	and.w	r3, r3, #4
 800422a:	2b04      	cmp	r3, #4
 800422c:	d122      	bne.n	8004274 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	681b      	ldr	r3, [r3, #0]
 8004232:	68db      	ldr	r3, [r3, #12]
 8004234:	f003 0304 	and.w	r3, r3, #4
 8004238:	2b04      	cmp	r3, #4
 800423a:	d11b      	bne.n	8004274 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	681b      	ldr	r3, [r3, #0]
 8004240:	f06f 0204 	mvn.w	r2, #4
 8004244:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	2202      	movs	r2, #2
 800424a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	681b      	ldr	r3, [r3, #0]
 8004250:	699b      	ldr	r3, [r3, #24]
 8004252:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004256:	2b00      	cmp	r3, #0
 8004258:	d003      	beq.n	8004262 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800425a:	6878      	ldr	r0, [r7, #4]
 800425c:	f000 f9e6 	bl	800462c <HAL_TIM_IC_CaptureCallback>
 8004260:	e005      	b.n	800426e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004262:	6878      	ldr	r0, [r7, #4]
 8004264:	f000 f9d8 	bl	8004618 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004268:	6878      	ldr	r0, [r7, #4]
 800426a:	f000 f9e9 	bl	8004640 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	2200      	movs	r2, #0
 8004272:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	681b      	ldr	r3, [r3, #0]
 8004278:	691b      	ldr	r3, [r3, #16]
 800427a:	f003 0308 	and.w	r3, r3, #8
 800427e:	2b08      	cmp	r3, #8
 8004280:	d122      	bne.n	80042c8 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	681b      	ldr	r3, [r3, #0]
 8004286:	68db      	ldr	r3, [r3, #12]
 8004288:	f003 0308 	and.w	r3, r3, #8
 800428c:	2b08      	cmp	r3, #8
 800428e:	d11b      	bne.n	80042c8 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	681b      	ldr	r3, [r3, #0]
 8004294:	f06f 0208 	mvn.w	r2, #8
 8004298:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	2204      	movs	r2, #4
 800429e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	681b      	ldr	r3, [r3, #0]
 80042a4:	69db      	ldr	r3, [r3, #28]
 80042a6:	f003 0303 	and.w	r3, r3, #3
 80042aa:	2b00      	cmp	r3, #0
 80042ac:	d003      	beq.n	80042b6 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80042ae:	6878      	ldr	r0, [r7, #4]
 80042b0:	f000 f9bc 	bl	800462c <HAL_TIM_IC_CaptureCallback>
 80042b4:	e005      	b.n	80042c2 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80042b6:	6878      	ldr	r0, [r7, #4]
 80042b8:	f000 f9ae 	bl	8004618 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80042bc:	6878      	ldr	r0, [r7, #4]
 80042be:	f000 f9bf 	bl	8004640 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	2200      	movs	r2, #0
 80042c6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	681b      	ldr	r3, [r3, #0]
 80042cc:	691b      	ldr	r3, [r3, #16]
 80042ce:	f003 0310 	and.w	r3, r3, #16
 80042d2:	2b10      	cmp	r3, #16
 80042d4:	d122      	bne.n	800431c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	681b      	ldr	r3, [r3, #0]
 80042da:	68db      	ldr	r3, [r3, #12]
 80042dc:	f003 0310 	and.w	r3, r3, #16
 80042e0:	2b10      	cmp	r3, #16
 80042e2:	d11b      	bne.n	800431c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	681b      	ldr	r3, [r3, #0]
 80042e8:	f06f 0210 	mvn.w	r2, #16
 80042ec:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	2208      	movs	r2, #8
 80042f2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	681b      	ldr	r3, [r3, #0]
 80042f8:	69db      	ldr	r3, [r3, #28]
 80042fa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80042fe:	2b00      	cmp	r3, #0
 8004300:	d003      	beq.n	800430a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004302:	6878      	ldr	r0, [r7, #4]
 8004304:	f000 f992 	bl	800462c <HAL_TIM_IC_CaptureCallback>
 8004308:	e005      	b.n	8004316 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800430a:	6878      	ldr	r0, [r7, #4]
 800430c:	f000 f984 	bl	8004618 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004310:	6878      	ldr	r0, [r7, #4]
 8004312:	f000 f995 	bl	8004640 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	2200      	movs	r2, #0
 800431a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	681b      	ldr	r3, [r3, #0]
 8004320:	691b      	ldr	r3, [r3, #16]
 8004322:	f003 0301 	and.w	r3, r3, #1
 8004326:	2b01      	cmp	r3, #1
 8004328:	d10e      	bne.n	8004348 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	681b      	ldr	r3, [r3, #0]
 800432e:	68db      	ldr	r3, [r3, #12]
 8004330:	f003 0301 	and.w	r3, r3, #1
 8004334:	2b01      	cmp	r3, #1
 8004336:	d107      	bne.n	8004348 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	681b      	ldr	r3, [r3, #0]
 800433c:	f06f 0201 	mvn.w	r2, #1
 8004340:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004342:	6878      	ldr	r0, [r7, #4]
 8004344:	f7fd f8de 	bl	8001504 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	681b      	ldr	r3, [r3, #0]
 800434c:	691b      	ldr	r3, [r3, #16]
 800434e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004352:	2b80      	cmp	r3, #128	; 0x80
 8004354:	d10e      	bne.n	8004374 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	681b      	ldr	r3, [r3, #0]
 800435a:	68db      	ldr	r3, [r3, #12]
 800435c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004360:	2b80      	cmp	r3, #128	; 0x80
 8004362:	d107      	bne.n	8004374 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	681b      	ldr	r3, [r3, #0]
 8004368:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800436c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800436e:	6878      	ldr	r0, [r7, #4]
 8004370:	f000 fb7c 	bl	8004a6c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	681b      	ldr	r3, [r3, #0]
 8004378:	691b      	ldr	r3, [r3, #16]
 800437a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800437e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004382:	d10e      	bne.n	80043a2 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	681b      	ldr	r3, [r3, #0]
 8004388:	68db      	ldr	r3, [r3, #12]
 800438a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800438e:	2b80      	cmp	r3, #128	; 0x80
 8004390:	d107      	bne.n	80043a2 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	681b      	ldr	r3, [r3, #0]
 8004396:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800439a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800439c:	6878      	ldr	r0, [r7, #4]
 800439e:	f000 fb6f 	bl	8004a80 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	681b      	ldr	r3, [r3, #0]
 80043a6:	691b      	ldr	r3, [r3, #16]
 80043a8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80043ac:	2b40      	cmp	r3, #64	; 0x40
 80043ae:	d10e      	bne.n	80043ce <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	681b      	ldr	r3, [r3, #0]
 80043b4:	68db      	ldr	r3, [r3, #12]
 80043b6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80043ba:	2b40      	cmp	r3, #64	; 0x40
 80043bc:	d107      	bne.n	80043ce <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	681b      	ldr	r3, [r3, #0]
 80043c2:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80043c6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80043c8:	6878      	ldr	r0, [r7, #4]
 80043ca:	f000 f943 	bl	8004654 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	681b      	ldr	r3, [r3, #0]
 80043d2:	691b      	ldr	r3, [r3, #16]
 80043d4:	f003 0320 	and.w	r3, r3, #32
 80043d8:	2b20      	cmp	r3, #32
 80043da:	d10e      	bne.n	80043fa <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	681b      	ldr	r3, [r3, #0]
 80043e0:	68db      	ldr	r3, [r3, #12]
 80043e2:	f003 0320 	and.w	r3, r3, #32
 80043e6:	2b20      	cmp	r3, #32
 80043e8:	d107      	bne.n	80043fa <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	681b      	ldr	r3, [r3, #0]
 80043ee:	f06f 0220 	mvn.w	r2, #32
 80043f2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80043f4:	6878      	ldr	r0, [r7, #4]
 80043f6:	f000 fb2f 	bl	8004a58 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80043fa:	bf00      	nop
 80043fc:	3708      	adds	r7, #8
 80043fe:	46bd      	mov	sp, r7
 8004400:	bd80      	pop	{r7, pc}

08004402 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004402:	b580      	push	{r7, lr}
 8004404:	b084      	sub	sp, #16
 8004406:	af00      	add	r7, sp, #0
 8004408:	6078      	str	r0, [r7, #4]
 800440a:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800440c:	2300      	movs	r3, #0
 800440e:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004416:	2b01      	cmp	r3, #1
 8004418:	d101      	bne.n	800441e <HAL_TIM_ConfigClockSource+0x1c>
 800441a:	2302      	movs	r3, #2
 800441c:	e0b6      	b.n	800458c <HAL_TIM_ConfigClockSource+0x18a>
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	2201      	movs	r2, #1
 8004422:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	2202      	movs	r2, #2
 800442a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	681b      	ldr	r3, [r3, #0]
 8004432:	689b      	ldr	r3, [r3, #8]
 8004434:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004436:	68bb      	ldr	r3, [r7, #8]
 8004438:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800443c:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8004440:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004442:	68bb      	ldr	r3, [r7, #8]
 8004444:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004448:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	681b      	ldr	r3, [r3, #0]
 800444e:	68ba      	ldr	r2, [r7, #8]
 8004450:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004452:	683b      	ldr	r3, [r7, #0]
 8004454:	681b      	ldr	r3, [r3, #0]
 8004456:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800445a:	d03e      	beq.n	80044da <HAL_TIM_ConfigClockSource+0xd8>
 800445c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004460:	f200 8087 	bhi.w	8004572 <HAL_TIM_ConfigClockSource+0x170>
 8004464:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004468:	f000 8086 	beq.w	8004578 <HAL_TIM_ConfigClockSource+0x176>
 800446c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004470:	d87f      	bhi.n	8004572 <HAL_TIM_ConfigClockSource+0x170>
 8004472:	2b70      	cmp	r3, #112	; 0x70
 8004474:	d01a      	beq.n	80044ac <HAL_TIM_ConfigClockSource+0xaa>
 8004476:	2b70      	cmp	r3, #112	; 0x70
 8004478:	d87b      	bhi.n	8004572 <HAL_TIM_ConfigClockSource+0x170>
 800447a:	2b60      	cmp	r3, #96	; 0x60
 800447c:	d050      	beq.n	8004520 <HAL_TIM_ConfigClockSource+0x11e>
 800447e:	2b60      	cmp	r3, #96	; 0x60
 8004480:	d877      	bhi.n	8004572 <HAL_TIM_ConfigClockSource+0x170>
 8004482:	2b50      	cmp	r3, #80	; 0x50
 8004484:	d03c      	beq.n	8004500 <HAL_TIM_ConfigClockSource+0xfe>
 8004486:	2b50      	cmp	r3, #80	; 0x50
 8004488:	d873      	bhi.n	8004572 <HAL_TIM_ConfigClockSource+0x170>
 800448a:	2b40      	cmp	r3, #64	; 0x40
 800448c:	d058      	beq.n	8004540 <HAL_TIM_ConfigClockSource+0x13e>
 800448e:	2b40      	cmp	r3, #64	; 0x40
 8004490:	d86f      	bhi.n	8004572 <HAL_TIM_ConfigClockSource+0x170>
 8004492:	2b30      	cmp	r3, #48	; 0x30
 8004494:	d064      	beq.n	8004560 <HAL_TIM_ConfigClockSource+0x15e>
 8004496:	2b30      	cmp	r3, #48	; 0x30
 8004498:	d86b      	bhi.n	8004572 <HAL_TIM_ConfigClockSource+0x170>
 800449a:	2b20      	cmp	r3, #32
 800449c:	d060      	beq.n	8004560 <HAL_TIM_ConfigClockSource+0x15e>
 800449e:	2b20      	cmp	r3, #32
 80044a0:	d867      	bhi.n	8004572 <HAL_TIM_ConfigClockSource+0x170>
 80044a2:	2b00      	cmp	r3, #0
 80044a4:	d05c      	beq.n	8004560 <HAL_TIM_ConfigClockSource+0x15e>
 80044a6:	2b10      	cmp	r3, #16
 80044a8:	d05a      	beq.n	8004560 <HAL_TIM_ConfigClockSource+0x15e>
 80044aa:	e062      	b.n	8004572 <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	6818      	ldr	r0, [r3, #0]
 80044b0:	683b      	ldr	r3, [r7, #0]
 80044b2:	6899      	ldr	r1, [r3, #8]
 80044b4:	683b      	ldr	r3, [r7, #0]
 80044b6:	685a      	ldr	r2, [r3, #4]
 80044b8:	683b      	ldr	r3, [r7, #0]
 80044ba:	68db      	ldr	r3, [r3, #12]
 80044bc:	f000 fa45 	bl	800494a <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	681b      	ldr	r3, [r3, #0]
 80044c4:	689b      	ldr	r3, [r3, #8]
 80044c6:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80044c8:	68bb      	ldr	r3, [r7, #8]
 80044ca:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80044ce:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	681b      	ldr	r3, [r3, #0]
 80044d4:	68ba      	ldr	r2, [r7, #8]
 80044d6:	609a      	str	r2, [r3, #8]
      break;
 80044d8:	e04f      	b.n	800457a <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	6818      	ldr	r0, [r3, #0]
 80044de:	683b      	ldr	r3, [r7, #0]
 80044e0:	6899      	ldr	r1, [r3, #8]
 80044e2:	683b      	ldr	r3, [r7, #0]
 80044e4:	685a      	ldr	r2, [r3, #4]
 80044e6:	683b      	ldr	r3, [r7, #0]
 80044e8:	68db      	ldr	r3, [r3, #12]
 80044ea:	f000 fa2e 	bl	800494a <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	681b      	ldr	r3, [r3, #0]
 80044f2:	689a      	ldr	r2, [r3, #8]
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	681b      	ldr	r3, [r3, #0]
 80044f8:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80044fc:	609a      	str	r2, [r3, #8]
      break;
 80044fe:	e03c      	b.n	800457a <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	6818      	ldr	r0, [r3, #0]
 8004504:	683b      	ldr	r3, [r7, #0]
 8004506:	6859      	ldr	r1, [r3, #4]
 8004508:	683b      	ldr	r3, [r7, #0]
 800450a:	68db      	ldr	r3, [r3, #12]
 800450c:	461a      	mov	r2, r3
 800450e:	f000 f9a2 	bl	8004856 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	681b      	ldr	r3, [r3, #0]
 8004516:	2150      	movs	r1, #80	; 0x50
 8004518:	4618      	mov	r0, r3
 800451a:	f000 f9fb 	bl	8004914 <TIM_ITRx_SetConfig>
      break;
 800451e:	e02c      	b.n	800457a <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	6818      	ldr	r0, [r3, #0]
 8004524:	683b      	ldr	r3, [r7, #0]
 8004526:	6859      	ldr	r1, [r3, #4]
 8004528:	683b      	ldr	r3, [r7, #0]
 800452a:	68db      	ldr	r3, [r3, #12]
 800452c:	461a      	mov	r2, r3
 800452e:	f000 f9c1 	bl	80048b4 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	681b      	ldr	r3, [r3, #0]
 8004536:	2160      	movs	r1, #96	; 0x60
 8004538:	4618      	mov	r0, r3
 800453a:	f000 f9eb 	bl	8004914 <TIM_ITRx_SetConfig>
      break;
 800453e:	e01c      	b.n	800457a <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	6818      	ldr	r0, [r3, #0]
 8004544:	683b      	ldr	r3, [r7, #0]
 8004546:	6859      	ldr	r1, [r3, #4]
 8004548:	683b      	ldr	r3, [r7, #0]
 800454a:	68db      	ldr	r3, [r3, #12]
 800454c:	461a      	mov	r2, r3
 800454e:	f000 f982 	bl	8004856 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	681b      	ldr	r3, [r3, #0]
 8004556:	2140      	movs	r1, #64	; 0x40
 8004558:	4618      	mov	r0, r3
 800455a:	f000 f9db 	bl	8004914 <TIM_ITRx_SetConfig>
      break;
 800455e:	e00c      	b.n	800457a <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	681a      	ldr	r2, [r3, #0]
 8004564:	683b      	ldr	r3, [r7, #0]
 8004566:	681b      	ldr	r3, [r3, #0]
 8004568:	4619      	mov	r1, r3
 800456a:	4610      	mov	r0, r2
 800456c:	f000 f9d2 	bl	8004914 <TIM_ITRx_SetConfig>
      break;
 8004570:	e003      	b.n	800457a <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 8004572:	2301      	movs	r3, #1
 8004574:	73fb      	strb	r3, [r7, #15]
      break;
 8004576:	e000      	b.n	800457a <HAL_TIM_ConfigClockSource+0x178>
      break;
 8004578:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	2201      	movs	r2, #1
 800457e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	2200      	movs	r2, #0
 8004586:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800458a:	7bfb      	ldrb	r3, [r7, #15]
}
 800458c:	4618      	mov	r0, r3
 800458e:	3710      	adds	r7, #16
 8004590:	46bd      	mov	sp, r7
 8004592:	bd80      	pop	{r7, pc}

08004594 <HAL_TIM_SlaveConfigSynchro>:
  *         timer input or external trigger input) and the Slave mode
  *         (Disable, Reset, Gated, Trigger, External clock mode 1).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_SlaveConfigSynchro(TIM_HandleTypeDef *htim, const TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 8004594:	b580      	push	{r7, lr}
 8004596:	b082      	sub	sp, #8
 8004598:	af00      	add	r7, sp, #0
 800459a:	6078      	str	r0, [r7, #4]
 800459c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_SLAVE_INSTANCE(htim->Instance));
  assert_param(IS_TIM_SLAVE_MODE(sSlaveConfig->SlaveMode));
  assert_param(IS_TIM_TRIGGER_SELECTION(sSlaveConfig->InputTrigger));

  __HAL_LOCK(htim);
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80045a4:	2b01      	cmp	r3, #1
 80045a6:	d101      	bne.n	80045ac <HAL_TIM_SlaveConfigSynchro+0x18>
 80045a8:	2302      	movs	r3, #2
 80045aa:	e031      	b.n	8004610 <HAL_TIM_SlaveConfigSynchro+0x7c>
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	2201      	movs	r2, #1
 80045b0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	2202      	movs	r2, #2
 80045b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  if (TIM_SlaveTimer_SetConfig(htim, sSlaveConfig) != HAL_OK)
 80045bc:	6839      	ldr	r1, [r7, #0]
 80045be:	6878      	ldr	r0, [r7, #4]
 80045c0:	f000 f8b6 	bl	8004730 <TIM_SlaveTimer_SetConfig>
 80045c4:	4603      	mov	r3, r0
 80045c6:	2b00      	cmp	r3, #0
 80045c8:	d009      	beq.n	80045de <HAL_TIM_SlaveConfigSynchro+0x4a>
  {
    htim->State = HAL_TIM_STATE_READY;
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	2201      	movs	r2, #1
 80045ce:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    __HAL_UNLOCK(htim);
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	2200      	movs	r2, #0
 80045d6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    return HAL_ERROR;
 80045da:	2301      	movs	r3, #1
 80045dc:	e018      	b.n	8004610 <HAL_TIM_SlaveConfigSynchro+0x7c>
  }

  /* Disable Trigger Interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_TRIGGER);
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	681b      	ldr	r3, [r3, #0]
 80045e2:	68da      	ldr	r2, [r3, #12]
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	681b      	ldr	r3, [r3, #0]
 80045e8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80045ec:	60da      	str	r2, [r3, #12]

  /* Disable Trigger DMA request */
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_TRIGGER);
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	681b      	ldr	r3, [r3, #0]
 80045f2:	68da      	ldr	r2, [r3, #12]
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	681b      	ldr	r3, [r3, #0]
 80045f8:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80045fc:	60da      	str	r2, [r3, #12]

  htim->State = HAL_TIM_STATE_READY;
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	2201      	movs	r2, #1
 8004602:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	2200      	movs	r2, #0
 800460a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800460e:	2300      	movs	r3, #0
}
 8004610:	4618      	mov	r0, r3
 8004612:	3708      	adds	r7, #8
 8004614:	46bd      	mov	sp, r7
 8004616:	bd80      	pop	{r7, pc}

08004618 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004618:	b480      	push	{r7}
 800461a:	b083      	sub	sp, #12
 800461c:	af00      	add	r7, sp, #0
 800461e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004620:	bf00      	nop
 8004622:	370c      	adds	r7, #12
 8004624:	46bd      	mov	sp, r7
 8004626:	f85d 7b04 	ldr.w	r7, [sp], #4
 800462a:	4770      	bx	lr

0800462c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800462c:	b480      	push	{r7}
 800462e:	b083      	sub	sp, #12
 8004630:	af00      	add	r7, sp, #0
 8004632:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004634:	bf00      	nop
 8004636:	370c      	adds	r7, #12
 8004638:	46bd      	mov	sp, r7
 800463a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800463e:	4770      	bx	lr

08004640 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004640:	b480      	push	{r7}
 8004642:	b083      	sub	sp, #12
 8004644:	af00      	add	r7, sp, #0
 8004646:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004648:	bf00      	nop
 800464a:	370c      	adds	r7, #12
 800464c:	46bd      	mov	sp, r7
 800464e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004652:	4770      	bx	lr

08004654 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004654:	b480      	push	{r7}
 8004656:	b083      	sub	sp, #12
 8004658:	af00      	add	r7, sp, #0
 800465a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800465c:	bf00      	nop
 800465e:	370c      	adds	r7, #12
 8004660:	46bd      	mov	sp, r7
 8004662:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004666:	4770      	bx	lr

08004668 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8004668:	b480      	push	{r7}
 800466a:	b085      	sub	sp, #20
 800466c:	af00      	add	r7, sp, #0
 800466e:	6078      	str	r0, [r7, #4]
 8004670:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	681b      	ldr	r3, [r3, #0]
 8004676:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	4a2a      	ldr	r2, [pc, #168]	; (8004724 <TIM_Base_SetConfig+0xbc>)
 800467c:	4293      	cmp	r3, r2
 800467e:	d003      	beq.n	8004688 <TIM_Base_SetConfig+0x20>
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004686:	d108      	bne.n	800469a <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004688:	68fb      	ldr	r3, [r7, #12]
 800468a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800468e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004690:	683b      	ldr	r3, [r7, #0]
 8004692:	685b      	ldr	r3, [r3, #4]
 8004694:	68fa      	ldr	r2, [r7, #12]
 8004696:	4313      	orrs	r3, r2
 8004698:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	4a21      	ldr	r2, [pc, #132]	; (8004724 <TIM_Base_SetConfig+0xbc>)
 800469e:	4293      	cmp	r3, r2
 80046a0:	d00b      	beq.n	80046ba <TIM_Base_SetConfig+0x52>
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80046a8:	d007      	beq.n	80046ba <TIM_Base_SetConfig+0x52>
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	4a1e      	ldr	r2, [pc, #120]	; (8004728 <TIM_Base_SetConfig+0xc0>)
 80046ae:	4293      	cmp	r3, r2
 80046b0:	d003      	beq.n	80046ba <TIM_Base_SetConfig+0x52>
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	4a1d      	ldr	r2, [pc, #116]	; (800472c <TIM_Base_SetConfig+0xc4>)
 80046b6:	4293      	cmp	r3, r2
 80046b8:	d108      	bne.n	80046cc <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80046ba:	68fb      	ldr	r3, [r7, #12]
 80046bc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80046c0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80046c2:	683b      	ldr	r3, [r7, #0]
 80046c4:	68db      	ldr	r3, [r3, #12]
 80046c6:	68fa      	ldr	r2, [r7, #12]
 80046c8:	4313      	orrs	r3, r2
 80046ca:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80046cc:	68fb      	ldr	r3, [r7, #12]
 80046ce:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80046d2:	683b      	ldr	r3, [r7, #0]
 80046d4:	695b      	ldr	r3, [r3, #20]
 80046d6:	4313      	orrs	r3, r2
 80046d8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	68fa      	ldr	r2, [r7, #12]
 80046de:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80046e0:	683b      	ldr	r3, [r7, #0]
 80046e2:	689a      	ldr	r2, [r3, #8]
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80046e8:	683b      	ldr	r3, [r7, #0]
 80046ea:	681a      	ldr	r2, [r3, #0]
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	4a0c      	ldr	r2, [pc, #48]	; (8004724 <TIM_Base_SetConfig+0xbc>)
 80046f4:	4293      	cmp	r3, r2
 80046f6:	d007      	beq.n	8004708 <TIM_Base_SetConfig+0xa0>
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	4a0b      	ldr	r2, [pc, #44]	; (8004728 <TIM_Base_SetConfig+0xc0>)
 80046fc:	4293      	cmp	r3, r2
 80046fe:	d003      	beq.n	8004708 <TIM_Base_SetConfig+0xa0>
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	4a0a      	ldr	r2, [pc, #40]	; (800472c <TIM_Base_SetConfig+0xc4>)
 8004704:	4293      	cmp	r3, r2
 8004706:	d103      	bne.n	8004710 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004708:	683b      	ldr	r3, [r7, #0]
 800470a:	691a      	ldr	r2, [r3, #16]
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	2201      	movs	r2, #1
 8004714:	615a      	str	r2, [r3, #20]
}
 8004716:	bf00      	nop
 8004718:	3714      	adds	r7, #20
 800471a:	46bd      	mov	sp, r7
 800471c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004720:	4770      	bx	lr
 8004722:	bf00      	nop
 8004724:	40012c00 	.word	0x40012c00
 8004728:	40014000 	.word	0x40014000
 800472c:	40014400 	.word	0x40014400

08004730 <TIM_SlaveTimer_SetConfig>:
  * @param  sSlaveConfig Slave timer configuration
  * @retval None
  */
static HAL_StatusTypeDef TIM_SlaveTimer_SetConfig(TIM_HandleTypeDef *htim,
                                                  const TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 8004730:	b580      	push	{r7, lr}
 8004732:	b086      	sub	sp, #24
 8004734:	af00      	add	r7, sp, #0
 8004736:	6078      	str	r0, [r7, #4]
 8004738:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800473a:	2300      	movs	r3, #0
 800473c:	75fb      	strb	r3, [r7, #23]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	681b      	ldr	r3, [r3, #0]
 8004742:	689b      	ldr	r3, [r3, #8]
 8004744:	613b      	str	r3, [r7, #16]

  /* Reset the Trigger Selection Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004746:	693b      	ldr	r3, [r7, #16]
 8004748:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800474c:	613b      	str	r3, [r7, #16]
  /* Set the Input Trigger source */
  tmpsmcr |= sSlaveConfig->InputTrigger;
 800474e:	683b      	ldr	r3, [r7, #0]
 8004750:	685b      	ldr	r3, [r3, #4]
 8004752:	693a      	ldr	r2, [r7, #16]
 8004754:	4313      	orrs	r3, r2
 8004756:	613b      	str	r3, [r7, #16]

  /* Reset the slave mode Bits */
  tmpsmcr &= ~TIM_SMCR_SMS;
 8004758:	693b      	ldr	r3, [r7, #16]
 800475a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800475e:	f023 0307 	bic.w	r3, r3, #7
 8004762:	613b      	str	r3, [r7, #16]
  /* Set the slave mode */
  tmpsmcr |= sSlaveConfig->SlaveMode;
 8004764:	683b      	ldr	r3, [r7, #0]
 8004766:	681b      	ldr	r3, [r3, #0]
 8004768:	693a      	ldr	r2, [r7, #16]
 800476a:	4313      	orrs	r3, r2
 800476c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	681b      	ldr	r3, [r3, #0]
 8004772:	693a      	ldr	r2, [r7, #16]
 8004774:	609a      	str	r2, [r3, #8]

  /* Configure the trigger prescaler, filter, and polarity */
  switch (sSlaveConfig->InputTrigger)
 8004776:	683b      	ldr	r3, [r7, #0]
 8004778:	685b      	ldr	r3, [r3, #4]
 800477a:	2b70      	cmp	r3, #112	; 0x70
 800477c:	d01a      	beq.n	80047b4 <TIM_SlaveTimer_SetConfig+0x84>
 800477e:	2b70      	cmp	r3, #112	; 0x70
 8004780:	d860      	bhi.n	8004844 <TIM_SlaveTimer_SetConfig+0x114>
 8004782:	2b60      	cmp	r3, #96	; 0x60
 8004784:	d054      	beq.n	8004830 <TIM_SlaveTimer_SetConfig+0x100>
 8004786:	2b60      	cmp	r3, #96	; 0x60
 8004788:	d85c      	bhi.n	8004844 <TIM_SlaveTimer_SetConfig+0x114>
 800478a:	2b50      	cmp	r3, #80	; 0x50
 800478c:	d046      	beq.n	800481c <TIM_SlaveTimer_SetConfig+0xec>
 800478e:	2b50      	cmp	r3, #80	; 0x50
 8004790:	d858      	bhi.n	8004844 <TIM_SlaveTimer_SetConfig+0x114>
 8004792:	2b40      	cmp	r3, #64	; 0x40
 8004794:	d019      	beq.n	80047ca <TIM_SlaveTimer_SetConfig+0x9a>
 8004796:	2b40      	cmp	r3, #64	; 0x40
 8004798:	d854      	bhi.n	8004844 <TIM_SlaveTimer_SetConfig+0x114>
 800479a:	2b30      	cmp	r3, #48	; 0x30
 800479c:	d055      	beq.n	800484a <TIM_SlaveTimer_SetConfig+0x11a>
 800479e:	2b30      	cmp	r3, #48	; 0x30
 80047a0:	d850      	bhi.n	8004844 <TIM_SlaveTimer_SetConfig+0x114>
 80047a2:	2b20      	cmp	r3, #32
 80047a4:	d051      	beq.n	800484a <TIM_SlaveTimer_SetConfig+0x11a>
 80047a6:	2b20      	cmp	r3, #32
 80047a8:	d84c      	bhi.n	8004844 <TIM_SlaveTimer_SetConfig+0x114>
 80047aa:	2b00      	cmp	r3, #0
 80047ac:	d04d      	beq.n	800484a <TIM_SlaveTimer_SetConfig+0x11a>
 80047ae:	2b10      	cmp	r3, #16
 80047b0:	d04b      	beq.n	800484a <TIM_SlaveTimer_SetConfig+0x11a>
 80047b2:	e047      	b.n	8004844 <TIM_SlaveTimer_SetConfig+0x114>
      assert_param(IS_TIM_CLOCKSOURCE_ETRMODE1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPRESCALER(sSlaveConfig->TriggerPrescaler));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));
      /* Configure the ETR Trigger source */
      TIM_ETR_SetConfig(htim->Instance,
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	6818      	ldr	r0, [r3, #0]
 80047b8:	683b      	ldr	r3, [r7, #0]
 80047ba:	68d9      	ldr	r1, [r3, #12]
 80047bc:	683b      	ldr	r3, [r7, #0]
 80047be:	689a      	ldr	r2, [r3, #8]
 80047c0:	683b      	ldr	r3, [r7, #0]
 80047c2:	691b      	ldr	r3, [r3, #16]
 80047c4:	f000 f8c1 	bl	800494a <TIM_ETR_SetConfig>
                        sSlaveConfig->TriggerPrescaler,
                        sSlaveConfig->TriggerPolarity,
                        sSlaveConfig->TriggerFilter);
      break;
 80047c8:	e040      	b.n	800484c <TIM_SlaveTimer_SetConfig+0x11c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      if (sSlaveConfig->SlaveMode == TIM_SLAVEMODE_GATED)
 80047ca:	683b      	ldr	r3, [r7, #0]
 80047cc:	681b      	ldr	r3, [r3, #0]
 80047ce:	2b05      	cmp	r3, #5
 80047d0:	d101      	bne.n	80047d6 <TIM_SlaveTimer_SetConfig+0xa6>
      {
        return HAL_ERROR;
 80047d2:	2301      	movs	r3, #1
 80047d4:	e03b      	b.n	800484e <TIM_SlaveTimer_SetConfig+0x11e>
      }

      /* Disable the Channel 1: Reset the CC1E Bit */
      tmpccer = htim->Instance->CCER;
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	681b      	ldr	r3, [r3, #0]
 80047da:	6a1b      	ldr	r3, [r3, #32]
 80047dc:	60fb      	str	r3, [r7, #12]
      htim->Instance->CCER &= ~TIM_CCER_CC1E;
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	681b      	ldr	r3, [r3, #0]
 80047e2:	6a1a      	ldr	r2, [r3, #32]
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	681b      	ldr	r3, [r3, #0]
 80047e8:	f022 0201 	bic.w	r2, r2, #1
 80047ec:	621a      	str	r2, [r3, #32]
      tmpccmr1 = htim->Instance->CCMR1;
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	681b      	ldr	r3, [r3, #0]
 80047f2:	699b      	ldr	r3, [r3, #24]
 80047f4:	60bb      	str	r3, [r7, #8]

      /* Set the filter */
      tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80047f6:	68bb      	ldr	r3, [r7, #8]
 80047f8:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80047fc:	60bb      	str	r3, [r7, #8]
      tmpccmr1 |= ((sSlaveConfig->TriggerFilter) << 4U);
 80047fe:	683b      	ldr	r3, [r7, #0]
 8004800:	691b      	ldr	r3, [r3, #16]
 8004802:	011b      	lsls	r3, r3, #4
 8004804:	68ba      	ldr	r2, [r7, #8]
 8004806:	4313      	orrs	r3, r2
 8004808:	60bb      	str	r3, [r7, #8]

      /* Write to TIMx CCMR1 and CCER registers */
      htim->Instance->CCMR1 = tmpccmr1;
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	681b      	ldr	r3, [r3, #0]
 800480e:	68ba      	ldr	r2, [r7, #8]
 8004810:	619a      	str	r2, [r3, #24]
      htim->Instance->CCER = tmpccer;
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	681b      	ldr	r3, [r3, #0]
 8004816:	68fa      	ldr	r2, [r7, #12]
 8004818:	621a      	str	r2, [r3, #32]
      break;
 800481a:	e017      	b.n	800484c <TIM_SlaveTimer_SetConfig+0x11c>
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI1 Filter and Polarity */
      TIM_TI1_ConfigInputStage(htim->Instance,
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	6818      	ldr	r0, [r3, #0]
 8004820:	683b      	ldr	r3, [r7, #0]
 8004822:	6899      	ldr	r1, [r3, #8]
 8004824:	683b      	ldr	r3, [r7, #0]
 8004826:	691b      	ldr	r3, [r3, #16]
 8004828:	461a      	mov	r2, r3
 800482a:	f000 f814 	bl	8004856 <TIM_TI1_ConfigInputStage>
                               sSlaveConfig->TriggerPolarity,
                               sSlaveConfig->TriggerFilter);
      break;
 800482e:	e00d      	b.n	800484c <TIM_SlaveTimer_SetConfig+0x11c>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI2 Filter and Polarity */
      TIM_TI2_ConfigInputStage(htim->Instance,
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	6818      	ldr	r0, [r3, #0]
 8004834:	683b      	ldr	r3, [r7, #0]
 8004836:	6899      	ldr	r1, [r3, #8]
 8004838:	683b      	ldr	r3, [r7, #0]
 800483a:	691b      	ldr	r3, [r3, #16]
 800483c:	461a      	mov	r2, r3
 800483e:	f000 f839 	bl	80048b4 <TIM_TI2_ConfigInputStage>
                               sSlaveConfig->TriggerPolarity,
                               sSlaveConfig->TriggerFilter);
      break;
 8004842:	e003      	b.n	800484c <TIM_SlaveTimer_SetConfig+0x11c>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      break;
    }

    default:
      status = HAL_ERROR;
 8004844:	2301      	movs	r3, #1
 8004846:	75fb      	strb	r3, [r7, #23]
      break;
 8004848:	e000      	b.n	800484c <TIM_SlaveTimer_SetConfig+0x11c>
      break;
 800484a:	bf00      	nop
  }

  return status;
 800484c:	7dfb      	ldrb	r3, [r7, #23]
}
 800484e:	4618      	mov	r0, r3
 8004850:	3718      	adds	r7, #24
 8004852:	46bd      	mov	sp, r7
 8004854:	bd80      	pop	{r7, pc}

08004856 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004856:	b480      	push	{r7}
 8004858:	b087      	sub	sp, #28
 800485a:	af00      	add	r7, sp, #0
 800485c:	60f8      	str	r0, [r7, #12]
 800485e:	60b9      	str	r1, [r7, #8]
 8004860:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004862:	68fb      	ldr	r3, [r7, #12]
 8004864:	6a1b      	ldr	r3, [r3, #32]
 8004866:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004868:	68fb      	ldr	r3, [r7, #12]
 800486a:	6a1b      	ldr	r3, [r3, #32]
 800486c:	f023 0201 	bic.w	r2, r3, #1
 8004870:	68fb      	ldr	r3, [r7, #12]
 8004872:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004874:	68fb      	ldr	r3, [r7, #12]
 8004876:	699b      	ldr	r3, [r3, #24]
 8004878:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800487a:	693b      	ldr	r3, [r7, #16]
 800487c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004880:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	011b      	lsls	r3, r3, #4
 8004886:	693a      	ldr	r2, [r7, #16]
 8004888:	4313      	orrs	r3, r2
 800488a:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800488c:	697b      	ldr	r3, [r7, #20]
 800488e:	f023 030a 	bic.w	r3, r3, #10
 8004892:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004894:	697a      	ldr	r2, [r7, #20]
 8004896:	68bb      	ldr	r3, [r7, #8]
 8004898:	4313      	orrs	r3, r2
 800489a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800489c:	68fb      	ldr	r3, [r7, #12]
 800489e:	693a      	ldr	r2, [r7, #16]
 80048a0:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80048a2:	68fb      	ldr	r3, [r7, #12]
 80048a4:	697a      	ldr	r2, [r7, #20]
 80048a6:	621a      	str	r2, [r3, #32]
}
 80048a8:	bf00      	nop
 80048aa:	371c      	adds	r7, #28
 80048ac:	46bd      	mov	sp, r7
 80048ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048b2:	4770      	bx	lr

080048b4 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80048b4:	b480      	push	{r7}
 80048b6:	b087      	sub	sp, #28
 80048b8:	af00      	add	r7, sp, #0
 80048ba:	60f8      	str	r0, [r7, #12]
 80048bc:	60b9      	str	r1, [r7, #8]
 80048be:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80048c0:	68fb      	ldr	r3, [r7, #12]
 80048c2:	6a1b      	ldr	r3, [r3, #32]
 80048c4:	f023 0210 	bic.w	r2, r3, #16
 80048c8:	68fb      	ldr	r3, [r7, #12]
 80048ca:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80048cc:	68fb      	ldr	r3, [r7, #12]
 80048ce:	699b      	ldr	r3, [r3, #24]
 80048d0:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80048d2:	68fb      	ldr	r3, [r7, #12]
 80048d4:	6a1b      	ldr	r3, [r3, #32]
 80048d6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80048d8:	697b      	ldr	r3, [r7, #20]
 80048da:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80048de:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	031b      	lsls	r3, r3, #12
 80048e4:	697a      	ldr	r2, [r7, #20]
 80048e6:	4313      	orrs	r3, r2
 80048e8:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80048ea:	693b      	ldr	r3, [r7, #16]
 80048ec:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80048f0:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80048f2:	68bb      	ldr	r3, [r7, #8]
 80048f4:	011b      	lsls	r3, r3, #4
 80048f6:	693a      	ldr	r2, [r7, #16]
 80048f8:	4313      	orrs	r3, r2
 80048fa:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80048fc:	68fb      	ldr	r3, [r7, #12]
 80048fe:	697a      	ldr	r2, [r7, #20]
 8004900:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004902:	68fb      	ldr	r3, [r7, #12]
 8004904:	693a      	ldr	r2, [r7, #16]
 8004906:	621a      	str	r2, [r3, #32]
}
 8004908:	bf00      	nop
 800490a:	371c      	adds	r7, #28
 800490c:	46bd      	mov	sp, r7
 800490e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004912:	4770      	bx	lr

08004914 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004914:	b480      	push	{r7}
 8004916:	b085      	sub	sp, #20
 8004918:	af00      	add	r7, sp, #0
 800491a:	6078      	str	r0, [r7, #4]
 800491c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	689b      	ldr	r3, [r3, #8]
 8004922:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004924:	68fb      	ldr	r3, [r7, #12]
 8004926:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800492a:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800492c:	683a      	ldr	r2, [r7, #0]
 800492e:	68fb      	ldr	r3, [r7, #12]
 8004930:	4313      	orrs	r3, r2
 8004932:	f043 0307 	orr.w	r3, r3, #7
 8004936:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	68fa      	ldr	r2, [r7, #12]
 800493c:	609a      	str	r2, [r3, #8]
}
 800493e:	bf00      	nop
 8004940:	3714      	adds	r7, #20
 8004942:	46bd      	mov	sp, r7
 8004944:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004948:	4770      	bx	lr

0800494a <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800494a:	b480      	push	{r7}
 800494c:	b087      	sub	sp, #28
 800494e:	af00      	add	r7, sp, #0
 8004950:	60f8      	str	r0, [r7, #12]
 8004952:	60b9      	str	r1, [r7, #8]
 8004954:	607a      	str	r2, [r7, #4]
 8004956:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004958:	68fb      	ldr	r3, [r7, #12]
 800495a:	689b      	ldr	r3, [r3, #8]
 800495c:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800495e:	697b      	ldr	r3, [r7, #20]
 8004960:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004964:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004966:	683b      	ldr	r3, [r7, #0]
 8004968:	021a      	lsls	r2, r3, #8
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	431a      	orrs	r2, r3
 800496e:	68bb      	ldr	r3, [r7, #8]
 8004970:	4313      	orrs	r3, r2
 8004972:	697a      	ldr	r2, [r7, #20]
 8004974:	4313      	orrs	r3, r2
 8004976:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004978:	68fb      	ldr	r3, [r7, #12]
 800497a:	697a      	ldr	r2, [r7, #20]
 800497c:	609a      	str	r2, [r3, #8]
}
 800497e:	bf00      	nop
 8004980:	371c      	adds	r7, #28
 8004982:	46bd      	mov	sp, r7
 8004984:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004988:	4770      	bx	lr
	...

0800498c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800498c:	b480      	push	{r7}
 800498e:	b085      	sub	sp, #20
 8004990:	af00      	add	r7, sp, #0
 8004992:	6078      	str	r0, [r7, #4]
 8004994:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800499c:	2b01      	cmp	r3, #1
 800499e:	d101      	bne.n	80049a4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80049a0:	2302      	movs	r3, #2
 80049a2:	e04f      	b.n	8004a44 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	2201      	movs	r2, #1
 80049a8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	2202      	movs	r2, #2
 80049b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	681b      	ldr	r3, [r3, #0]
 80049b8:	685b      	ldr	r3, [r3, #4]
 80049ba:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	681b      	ldr	r3, [r3, #0]
 80049c0:	689b      	ldr	r3, [r3, #8]
 80049c2:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	681b      	ldr	r3, [r3, #0]
 80049c8:	4a21      	ldr	r2, [pc, #132]	; (8004a50 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 80049ca:	4293      	cmp	r3, r2
 80049cc:	d108      	bne.n	80049e0 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80049ce:	68fb      	ldr	r3, [r7, #12]
 80049d0:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 80049d4:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80049d6:	683b      	ldr	r3, [r7, #0]
 80049d8:	685b      	ldr	r3, [r3, #4]
 80049da:	68fa      	ldr	r2, [r7, #12]
 80049dc:	4313      	orrs	r3, r2
 80049de:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80049e0:	68fb      	ldr	r3, [r7, #12]
 80049e2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80049e6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80049e8:	683b      	ldr	r3, [r7, #0]
 80049ea:	681b      	ldr	r3, [r3, #0]
 80049ec:	68fa      	ldr	r2, [r7, #12]
 80049ee:	4313      	orrs	r3, r2
 80049f0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	681b      	ldr	r3, [r3, #0]
 80049f6:	68fa      	ldr	r2, [r7, #12]
 80049f8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	681b      	ldr	r3, [r3, #0]
 80049fe:	4a14      	ldr	r2, [pc, #80]	; (8004a50 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 8004a00:	4293      	cmp	r3, r2
 8004a02:	d009      	beq.n	8004a18 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	681b      	ldr	r3, [r3, #0]
 8004a08:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004a0c:	d004      	beq.n	8004a18 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	681b      	ldr	r3, [r3, #0]
 8004a12:	4a10      	ldr	r2, [pc, #64]	; (8004a54 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8004a14:	4293      	cmp	r3, r2
 8004a16:	d10c      	bne.n	8004a32 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004a18:	68bb      	ldr	r3, [r7, #8]
 8004a1a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004a1e:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004a20:	683b      	ldr	r3, [r7, #0]
 8004a22:	689b      	ldr	r3, [r3, #8]
 8004a24:	68ba      	ldr	r2, [r7, #8]
 8004a26:	4313      	orrs	r3, r2
 8004a28:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	681b      	ldr	r3, [r3, #0]
 8004a2e:	68ba      	ldr	r2, [r7, #8]
 8004a30:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	2201      	movs	r2, #1
 8004a36:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	2200      	movs	r2, #0
 8004a3e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004a42:	2300      	movs	r3, #0
}
 8004a44:	4618      	mov	r0, r3
 8004a46:	3714      	adds	r7, #20
 8004a48:	46bd      	mov	sp, r7
 8004a4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a4e:	4770      	bx	lr
 8004a50:	40012c00 	.word	0x40012c00
 8004a54:	40014000 	.word	0x40014000

08004a58 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004a58:	b480      	push	{r7}
 8004a5a:	b083      	sub	sp, #12
 8004a5c:	af00      	add	r7, sp, #0
 8004a5e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004a60:	bf00      	nop
 8004a62:	370c      	adds	r7, #12
 8004a64:	46bd      	mov	sp, r7
 8004a66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a6a:	4770      	bx	lr

08004a6c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004a6c:	b480      	push	{r7}
 8004a6e:	b083      	sub	sp, #12
 8004a70:	af00      	add	r7, sp, #0
 8004a72:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004a74:	bf00      	nop
 8004a76:	370c      	adds	r7, #12
 8004a78:	46bd      	mov	sp, r7
 8004a7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a7e:	4770      	bx	lr

08004a80 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8004a80:	b480      	push	{r7}
 8004a82:	b083      	sub	sp, #12
 8004a84:	af00      	add	r7, sp, #0
 8004a86:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8004a88:	bf00      	nop
 8004a8a:	370c      	adds	r7, #12
 8004a8c:	46bd      	mov	sp, r7
 8004a8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a92:	4770      	bx	lr

08004a94 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004a94:	b580      	push	{r7, lr}
 8004a96:	b082      	sub	sp, #8
 8004a98:	af00      	add	r7, sp, #0
 8004a9a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	2b00      	cmp	r3, #0
 8004aa0:	d101      	bne.n	8004aa6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004aa2:	2301      	movs	r3, #1
 8004aa4:	e040      	b.n	8004b28 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004aaa:	2b00      	cmp	r3, #0
 8004aac:	d106      	bne.n	8004abc <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	2200      	movs	r2, #0
 8004ab2:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004ab6:	6878      	ldr	r0, [r7, #4]
 8004ab8:	f7fc fe1c 	bl	80016f4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	2224      	movs	r2, #36	; 0x24
 8004ac0:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	681b      	ldr	r3, [r3, #0]
 8004ac6:	681a      	ldr	r2, [r3, #0]
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	681b      	ldr	r3, [r3, #0]
 8004acc:	f022 0201 	bic.w	r2, r2, #1
 8004ad0:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004ad2:	6878      	ldr	r0, [r7, #4]
 8004ad4:	f000 f8c0 	bl	8004c58 <UART_SetConfig>
 8004ad8:	4603      	mov	r3, r0
 8004ada:	2b01      	cmp	r3, #1
 8004adc:	d101      	bne.n	8004ae2 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8004ade:	2301      	movs	r3, #1
 8004ae0:	e022      	b.n	8004b28 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ae6:	2b00      	cmp	r3, #0
 8004ae8:	d002      	beq.n	8004af0 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8004aea:	6878      	ldr	r0, [r7, #4]
 8004aec:	f000 fae0 	bl	80050b0 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	681b      	ldr	r3, [r3, #0]
 8004af4:	685a      	ldr	r2, [r3, #4]
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	681b      	ldr	r3, [r3, #0]
 8004afa:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004afe:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	681b      	ldr	r3, [r3, #0]
 8004b04:	689a      	ldr	r2, [r3, #8]
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	681b      	ldr	r3, [r3, #0]
 8004b0a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004b0e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	681b      	ldr	r3, [r3, #0]
 8004b14:	681a      	ldr	r2, [r3, #0]
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	681b      	ldr	r3, [r3, #0]
 8004b1a:	f042 0201 	orr.w	r2, r2, #1
 8004b1e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004b20:	6878      	ldr	r0, [r7, #4]
 8004b22:	f000 fb67 	bl	80051f4 <UART_CheckIdleState>
 8004b26:	4603      	mov	r3, r0
}
 8004b28:	4618      	mov	r0, r3
 8004b2a:	3708      	adds	r7, #8
 8004b2c:	46bd      	mov	sp, r7
 8004b2e:	bd80      	pop	{r7, pc}

08004b30 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004b30:	b580      	push	{r7, lr}
 8004b32:	b08a      	sub	sp, #40	; 0x28
 8004b34:	af02      	add	r7, sp, #8
 8004b36:	60f8      	str	r0, [r7, #12]
 8004b38:	60b9      	str	r1, [r7, #8]
 8004b3a:	603b      	str	r3, [r7, #0]
 8004b3c:	4613      	mov	r3, r2
 8004b3e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004b40:	68fb      	ldr	r3, [r7, #12]
 8004b42:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004b44:	2b20      	cmp	r3, #32
 8004b46:	f040 8082 	bne.w	8004c4e <HAL_UART_Transmit+0x11e>
  {
    if ((pData == NULL) || (Size == 0U))
 8004b4a:	68bb      	ldr	r3, [r7, #8]
 8004b4c:	2b00      	cmp	r3, #0
 8004b4e:	d002      	beq.n	8004b56 <HAL_UART_Transmit+0x26>
 8004b50:	88fb      	ldrh	r3, [r7, #6]
 8004b52:	2b00      	cmp	r3, #0
 8004b54:	d101      	bne.n	8004b5a <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8004b56:	2301      	movs	r3, #1
 8004b58:	e07a      	b.n	8004c50 <HAL_UART_Transmit+0x120>
    }

    __HAL_LOCK(huart);
 8004b5a:	68fb      	ldr	r3, [r7, #12]
 8004b5c:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8004b60:	2b01      	cmp	r3, #1
 8004b62:	d101      	bne.n	8004b68 <HAL_UART_Transmit+0x38>
 8004b64:	2302      	movs	r3, #2
 8004b66:	e073      	b.n	8004c50 <HAL_UART_Transmit+0x120>
 8004b68:	68fb      	ldr	r3, [r7, #12]
 8004b6a:	2201      	movs	r2, #1
 8004b6c:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004b70:	68fb      	ldr	r3, [r7, #12]
 8004b72:	2200      	movs	r2, #0
 8004b74:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004b78:	68fb      	ldr	r3, [r7, #12]
 8004b7a:	2221      	movs	r2, #33	; 0x21
 8004b7c:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004b7e:	f7fc ffdf 	bl	8001b40 <HAL_GetTick>
 8004b82:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8004b84:	68fb      	ldr	r3, [r7, #12]
 8004b86:	88fa      	ldrh	r2, [r7, #6]
 8004b88:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8004b8c:	68fb      	ldr	r3, [r7, #12]
 8004b8e:	88fa      	ldrh	r2, [r7, #6]
 8004b90:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004b94:	68fb      	ldr	r3, [r7, #12]
 8004b96:	689b      	ldr	r3, [r3, #8]
 8004b98:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004b9c:	d108      	bne.n	8004bb0 <HAL_UART_Transmit+0x80>
 8004b9e:	68fb      	ldr	r3, [r7, #12]
 8004ba0:	691b      	ldr	r3, [r3, #16]
 8004ba2:	2b00      	cmp	r3, #0
 8004ba4:	d104      	bne.n	8004bb0 <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 8004ba6:	2300      	movs	r3, #0
 8004ba8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8004baa:	68bb      	ldr	r3, [r7, #8]
 8004bac:	61bb      	str	r3, [r7, #24]
 8004bae:	e003      	b.n	8004bb8 <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 8004bb0:	68bb      	ldr	r3, [r7, #8]
 8004bb2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004bb4:	2300      	movs	r3, #0
 8004bb6:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8004bb8:	68fb      	ldr	r3, [r7, #12]
 8004bba:	2200      	movs	r2, #0
 8004bbc:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 8004bc0:	e02d      	b.n	8004c1e <HAL_UART_Transmit+0xee>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004bc2:	683b      	ldr	r3, [r7, #0]
 8004bc4:	9300      	str	r3, [sp, #0]
 8004bc6:	697b      	ldr	r3, [r7, #20]
 8004bc8:	2200      	movs	r2, #0
 8004bca:	2180      	movs	r1, #128	; 0x80
 8004bcc:	68f8      	ldr	r0, [r7, #12]
 8004bce:	f000 fb5a 	bl	8005286 <UART_WaitOnFlagUntilTimeout>
 8004bd2:	4603      	mov	r3, r0
 8004bd4:	2b00      	cmp	r3, #0
 8004bd6:	d001      	beq.n	8004bdc <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 8004bd8:	2303      	movs	r3, #3
 8004bda:	e039      	b.n	8004c50 <HAL_UART_Transmit+0x120>
      }
      if (pdata8bits == NULL)
 8004bdc:	69fb      	ldr	r3, [r7, #28]
 8004bde:	2b00      	cmp	r3, #0
 8004be0:	d10b      	bne.n	8004bfa <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004be2:	69bb      	ldr	r3, [r7, #24]
 8004be4:	881a      	ldrh	r2, [r3, #0]
 8004be6:	68fb      	ldr	r3, [r7, #12]
 8004be8:	681b      	ldr	r3, [r3, #0]
 8004bea:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004bee:	b292      	uxth	r2, r2
 8004bf0:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8004bf2:	69bb      	ldr	r3, [r7, #24]
 8004bf4:	3302      	adds	r3, #2
 8004bf6:	61bb      	str	r3, [r7, #24]
 8004bf8:	e008      	b.n	8004c0c <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8004bfa:	69fb      	ldr	r3, [r7, #28]
 8004bfc:	781a      	ldrb	r2, [r3, #0]
 8004bfe:	68fb      	ldr	r3, [r7, #12]
 8004c00:	681b      	ldr	r3, [r3, #0]
 8004c02:	b292      	uxth	r2, r2
 8004c04:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8004c06:	69fb      	ldr	r3, [r7, #28]
 8004c08:	3301      	adds	r3, #1
 8004c0a:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004c0c:	68fb      	ldr	r3, [r7, #12]
 8004c0e:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8004c12:	b29b      	uxth	r3, r3
 8004c14:	3b01      	subs	r3, #1
 8004c16:	b29a      	uxth	r2, r3
 8004c18:	68fb      	ldr	r3, [r7, #12]
 8004c1a:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8004c1e:	68fb      	ldr	r3, [r7, #12]
 8004c20:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8004c24:	b29b      	uxth	r3, r3
 8004c26:	2b00      	cmp	r3, #0
 8004c28:	d1cb      	bne.n	8004bc2 <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004c2a:	683b      	ldr	r3, [r7, #0]
 8004c2c:	9300      	str	r3, [sp, #0]
 8004c2e:	697b      	ldr	r3, [r7, #20]
 8004c30:	2200      	movs	r2, #0
 8004c32:	2140      	movs	r1, #64	; 0x40
 8004c34:	68f8      	ldr	r0, [r7, #12]
 8004c36:	f000 fb26 	bl	8005286 <UART_WaitOnFlagUntilTimeout>
 8004c3a:	4603      	mov	r3, r0
 8004c3c:	2b00      	cmp	r3, #0
 8004c3e:	d001      	beq.n	8004c44 <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 8004c40:	2303      	movs	r3, #3
 8004c42:	e005      	b.n	8004c50 <HAL_UART_Transmit+0x120>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004c44:	68fb      	ldr	r3, [r7, #12]
 8004c46:	2220      	movs	r2, #32
 8004c48:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 8004c4a:	2300      	movs	r3, #0
 8004c4c:	e000      	b.n	8004c50 <HAL_UART_Transmit+0x120>
  }
  else
  {
    return HAL_BUSY;
 8004c4e:	2302      	movs	r3, #2
  }
}
 8004c50:	4618      	mov	r0, r3
 8004c52:	3720      	adds	r7, #32
 8004c54:	46bd      	mov	sp, r7
 8004c56:	bd80      	pop	{r7, pc}

08004c58 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004c58:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004c5c:	b08a      	sub	sp, #40	; 0x28
 8004c5e:	af00      	add	r7, sp, #0
 8004c60:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004c62:	2300      	movs	r3, #0
 8004c64:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004c68:	68fb      	ldr	r3, [r7, #12]
 8004c6a:	689a      	ldr	r2, [r3, #8]
 8004c6c:	68fb      	ldr	r3, [r7, #12]
 8004c6e:	691b      	ldr	r3, [r3, #16]
 8004c70:	431a      	orrs	r2, r3
 8004c72:	68fb      	ldr	r3, [r7, #12]
 8004c74:	695b      	ldr	r3, [r3, #20]
 8004c76:	431a      	orrs	r2, r3
 8004c78:	68fb      	ldr	r3, [r7, #12]
 8004c7a:	69db      	ldr	r3, [r3, #28]
 8004c7c:	4313      	orrs	r3, r2
 8004c7e:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004c80:	68fb      	ldr	r3, [r7, #12]
 8004c82:	681b      	ldr	r3, [r3, #0]
 8004c84:	681a      	ldr	r2, [r3, #0]
 8004c86:	4bb4      	ldr	r3, [pc, #720]	; (8004f58 <UART_SetConfig+0x300>)
 8004c88:	4013      	ands	r3, r2
 8004c8a:	68fa      	ldr	r2, [r7, #12]
 8004c8c:	6812      	ldr	r2, [r2, #0]
 8004c8e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8004c90:	430b      	orrs	r3, r1
 8004c92:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004c94:	68fb      	ldr	r3, [r7, #12]
 8004c96:	681b      	ldr	r3, [r3, #0]
 8004c98:	685b      	ldr	r3, [r3, #4]
 8004c9a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8004c9e:	68fb      	ldr	r3, [r7, #12]
 8004ca0:	68da      	ldr	r2, [r3, #12]
 8004ca2:	68fb      	ldr	r3, [r7, #12]
 8004ca4:	681b      	ldr	r3, [r3, #0]
 8004ca6:	430a      	orrs	r2, r1
 8004ca8:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004caa:	68fb      	ldr	r3, [r7, #12]
 8004cac:	699b      	ldr	r3, [r3, #24]
 8004cae:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8004cb0:	68fb      	ldr	r3, [r7, #12]
 8004cb2:	681b      	ldr	r3, [r3, #0]
 8004cb4:	4aa9      	ldr	r2, [pc, #676]	; (8004f5c <UART_SetConfig+0x304>)
 8004cb6:	4293      	cmp	r3, r2
 8004cb8:	d004      	beq.n	8004cc4 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8004cba:	68fb      	ldr	r3, [r7, #12]
 8004cbc:	6a1b      	ldr	r3, [r3, #32]
 8004cbe:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004cc0:	4313      	orrs	r3, r2
 8004cc2:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004cc4:	68fb      	ldr	r3, [r7, #12]
 8004cc6:	681b      	ldr	r3, [r3, #0]
 8004cc8:	689b      	ldr	r3, [r3, #8]
 8004cca:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8004cce:	68fb      	ldr	r3, [r7, #12]
 8004cd0:	681b      	ldr	r3, [r3, #0]
 8004cd2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004cd4:	430a      	orrs	r2, r1
 8004cd6:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004cd8:	68fb      	ldr	r3, [r7, #12]
 8004cda:	681b      	ldr	r3, [r3, #0]
 8004cdc:	4aa0      	ldr	r2, [pc, #640]	; (8004f60 <UART_SetConfig+0x308>)
 8004cde:	4293      	cmp	r3, r2
 8004ce0:	d126      	bne.n	8004d30 <UART_SetConfig+0xd8>
 8004ce2:	4ba0      	ldr	r3, [pc, #640]	; (8004f64 <UART_SetConfig+0x30c>)
 8004ce4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004ce8:	f003 0303 	and.w	r3, r3, #3
 8004cec:	2b03      	cmp	r3, #3
 8004cee:	d81b      	bhi.n	8004d28 <UART_SetConfig+0xd0>
 8004cf0:	a201      	add	r2, pc, #4	; (adr r2, 8004cf8 <UART_SetConfig+0xa0>)
 8004cf2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004cf6:	bf00      	nop
 8004cf8:	08004d09 	.word	0x08004d09
 8004cfc:	08004d19 	.word	0x08004d19
 8004d00:	08004d11 	.word	0x08004d11
 8004d04:	08004d21 	.word	0x08004d21
 8004d08:	2301      	movs	r3, #1
 8004d0a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004d0e:	e080      	b.n	8004e12 <UART_SetConfig+0x1ba>
 8004d10:	2302      	movs	r3, #2
 8004d12:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004d16:	e07c      	b.n	8004e12 <UART_SetConfig+0x1ba>
 8004d18:	2304      	movs	r3, #4
 8004d1a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004d1e:	e078      	b.n	8004e12 <UART_SetConfig+0x1ba>
 8004d20:	2308      	movs	r3, #8
 8004d22:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004d26:	e074      	b.n	8004e12 <UART_SetConfig+0x1ba>
 8004d28:	2310      	movs	r3, #16
 8004d2a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004d2e:	e070      	b.n	8004e12 <UART_SetConfig+0x1ba>
 8004d30:	68fb      	ldr	r3, [r7, #12]
 8004d32:	681b      	ldr	r3, [r3, #0]
 8004d34:	4a8c      	ldr	r2, [pc, #560]	; (8004f68 <UART_SetConfig+0x310>)
 8004d36:	4293      	cmp	r3, r2
 8004d38:	d138      	bne.n	8004dac <UART_SetConfig+0x154>
 8004d3a:	4b8a      	ldr	r3, [pc, #552]	; (8004f64 <UART_SetConfig+0x30c>)
 8004d3c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004d40:	f003 030c 	and.w	r3, r3, #12
 8004d44:	2b0c      	cmp	r3, #12
 8004d46:	d82d      	bhi.n	8004da4 <UART_SetConfig+0x14c>
 8004d48:	a201      	add	r2, pc, #4	; (adr r2, 8004d50 <UART_SetConfig+0xf8>)
 8004d4a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004d4e:	bf00      	nop
 8004d50:	08004d85 	.word	0x08004d85
 8004d54:	08004da5 	.word	0x08004da5
 8004d58:	08004da5 	.word	0x08004da5
 8004d5c:	08004da5 	.word	0x08004da5
 8004d60:	08004d95 	.word	0x08004d95
 8004d64:	08004da5 	.word	0x08004da5
 8004d68:	08004da5 	.word	0x08004da5
 8004d6c:	08004da5 	.word	0x08004da5
 8004d70:	08004d8d 	.word	0x08004d8d
 8004d74:	08004da5 	.word	0x08004da5
 8004d78:	08004da5 	.word	0x08004da5
 8004d7c:	08004da5 	.word	0x08004da5
 8004d80:	08004d9d 	.word	0x08004d9d
 8004d84:	2300      	movs	r3, #0
 8004d86:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004d8a:	e042      	b.n	8004e12 <UART_SetConfig+0x1ba>
 8004d8c:	2302      	movs	r3, #2
 8004d8e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004d92:	e03e      	b.n	8004e12 <UART_SetConfig+0x1ba>
 8004d94:	2304      	movs	r3, #4
 8004d96:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004d9a:	e03a      	b.n	8004e12 <UART_SetConfig+0x1ba>
 8004d9c:	2308      	movs	r3, #8
 8004d9e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004da2:	e036      	b.n	8004e12 <UART_SetConfig+0x1ba>
 8004da4:	2310      	movs	r3, #16
 8004da6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004daa:	e032      	b.n	8004e12 <UART_SetConfig+0x1ba>
 8004dac:	68fb      	ldr	r3, [r7, #12]
 8004dae:	681b      	ldr	r3, [r3, #0]
 8004db0:	4a6a      	ldr	r2, [pc, #424]	; (8004f5c <UART_SetConfig+0x304>)
 8004db2:	4293      	cmp	r3, r2
 8004db4:	d12a      	bne.n	8004e0c <UART_SetConfig+0x1b4>
 8004db6:	4b6b      	ldr	r3, [pc, #428]	; (8004f64 <UART_SetConfig+0x30c>)
 8004db8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004dbc:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8004dc0:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004dc4:	d01a      	beq.n	8004dfc <UART_SetConfig+0x1a4>
 8004dc6:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004dca:	d81b      	bhi.n	8004e04 <UART_SetConfig+0x1ac>
 8004dcc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004dd0:	d00c      	beq.n	8004dec <UART_SetConfig+0x194>
 8004dd2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004dd6:	d815      	bhi.n	8004e04 <UART_SetConfig+0x1ac>
 8004dd8:	2b00      	cmp	r3, #0
 8004dda:	d003      	beq.n	8004de4 <UART_SetConfig+0x18c>
 8004ddc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004de0:	d008      	beq.n	8004df4 <UART_SetConfig+0x19c>
 8004de2:	e00f      	b.n	8004e04 <UART_SetConfig+0x1ac>
 8004de4:	2300      	movs	r3, #0
 8004de6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004dea:	e012      	b.n	8004e12 <UART_SetConfig+0x1ba>
 8004dec:	2302      	movs	r3, #2
 8004dee:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004df2:	e00e      	b.n	8004e12 <UART_SetConfig+0x1ba>
 8004df4:	2304      	movs	r3, #4
 8004df6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004dfa:	e00a      	b.n	8004e12 <UART_SetConfig+0x1ba>
 8004dfc:	2308      	movs	r3, #8
 8004dfe:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004e02:	e006      	b.n	8004e12 <UART_SetConfig+0x1ba>
 8004e04:	2310      	movs	r3, #16
 8004e06:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004e0a:	e002      	b.n	8004e12 <UART_SetConfig+0x1ba>
 8004e0c:	2310      	movs	r3, #16
 8004e0e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8004e12:	68fb      	ldr	r3, [r7, #12]
 8004e14:	681b      	ldr	r3, [r3, #0]
 8004e16:	4a51      	ldr	r2, [pc, #324]	; (8004f5c <UART_SetConfig+0x304>)
 8004e18:	4293      	cmp	r3, r2
 8004e1a:	d17a      	bne.n	8004f12 <UART_SetConfig+0x2ba>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8004e1c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8004e20:	2b08      	cmp	r3, #8
 8004e22:	d824      	bhi.n	8004e6e <UART_SetConfig+0x216>
 8004e24:	a201      	add	r2, pc, #4	; (adr r2, 8004e2c <UART_SetConfig+0x1d4>)
 8004e26:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004e2a:	bf00      	nop
 8004e2c:	08004e51 	.word	0x08004e51
 8004e30:	08004e6f 	.word	0x08004e6f
 8004e34:	08004e59 	.word	0x08004e59
 8004e38:	08004e6f 	.word	0x08004e6f
 8004e3c:	08004e5f 	.word	0x08004e5f
 8004e40:	08004e6f 	.word	0x08004e6f
 8004e44:	08004e6f 	.word	0x08004e6f
 8004e48:	08004e6f 	.word	0x08004e6f
 8004e4c:	08004e67 	.word	0x08004e67
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004e50:	f7fe fcb4 	bl	80037bc <HAL_RCC_GetPCLK1Freq>
 8004e54:	61f8      	str	r0, [r7, #28]
        break;
 8004e56:	e010      	b.n	8004e7a <UART_SetConfig+0x222>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004e58:	4b44      	ldr	r3, [pc, #272]	; (8004f6c <UART_SetConfig+0x314>)
 8004e5a:	61fb      	str	r3, [r7, #28]
        break;
 8004e5c:	e00d      	b.n	8004e7a <UART_SetConfig+0x222>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004e5e:	f7fe fc15 	bl	800368c <HAL_RCC_GetSysClockFreq>
 8004e62:	61f8      	str	r0, [r7, #28]
        break;
 8004e64:	e009      	b.n	8004e7a <UART_SetConfig+0x222>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004e66:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004e6a:	61fb      	str	r3, [r7, #28]
        break;
 8004e6c:	e005      	b.n	8004e7a <UART_SetConfig+0x222>
      default:
        pclk = 0U;
 8004e6e:	2300      	movs	r3, #0
 8004e70:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8004e72:	2301      	movs	r3, #1
 8004e74:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8004e78:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8004e7a:	69fb      	ldr	r3, [r7, #28]
 8004e7c:	2b00      	cmp	r3, #0
 8004e7e:	f000 8107 	beq.w	8005090 <UART_SetConfig+0x438>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8004e82:	68fb      	ldr	r3, [r7, #12]
 8004e84:	685a      	ldr	r2, [r3, #4]
 8004e86:	4613      	mov	r3, r2
 8004e88:	005b      	lsls	r3, r3, #1
 8004e8a:	4413      	add	r3, r2
 8004e8c:	69fa      	ldr	r2, [r7, #28]
 8004e8e:	429a      	cmp	r2, r3
 8004e90:	d305      	bcc.n	8004e9e <UART_SetConfig+0x246>
          (pclk > (4096U * huart->Init.BaudRate)))
 8004e92:	68fb      	ldr	r3, [r7, #12]
 8004e94:	685b      	ldr	r3, [r3, #4]
 8004e96:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8004e98:	69fa      	ldr	r2, [r7, #28]
 8004e9a:	429a      	cmp	r2, r3
 8004e9c:	d903      	bls.n	8004ea6 <UART_SetConfig+0x24e>
      {
        ret = HAL_ERROR;
 8004e9e:	2301      	movs	r3, #1
 8004ea0:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8004ea4:	e0f4      	b.n	8005090 <UART_SetConfig+0x438>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8004ea6:	69fb      	ldr	r3, [r7, #28]
 8004ea8:	2200      	movs	r2, #0
 8004eaa:	461c      	mov	r4, r3
 8004eac:	4615      	mov	r5, r2
 8004eae:	f04f 0200 	mov.w	r2, #0
 8004eb2:	f04f 0300 	mov.w	r3, #0
 8004eb6:	022b      	lsls	r3, r5, #8
 8004eb8:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8004ebc:	0222      	lsls	r2, r4, #8
 8004ebe:	68f9      	ldr	r1, [r7, #12]
 8004ec0:	6849      	ldr	r1, [r1, #4]
 8004ec2:	0849      	lsrs	r1, r1, #1
 8004ec4:	2000      	movs	r0, #0
 8004ec6:	4688      	mov	r8, r1
 8004ec8:	4681      	mov	r9, r0
 8004eca:	eb12 0a08 	adds.w	sl, r2, r8
 8004ece:	eb43 0b09 	adc.w	fp, r3, r9
 8004ed2:	68fb      	ldr	r3, [r7, #12]
 8004ed4:	685b      	ldr	r3, [r3, #4]
 8004ed6:	2200      	movs	r2, #0
 8004ed8:	603b      	str	r3, [r7, #0]
 8004eda:	607a      	str	r2, [r7, #4]
 8004edc:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004ee0:	4650      	mov	r0, sl
 8004ee2:	4659      	mov	r1, fp
 8004ee4:	f7fb fed0 	bl	8000c88 <__aeabi_uldivmod>
 8004ee8:	4602      	mov	r2, r0
 8004eea:	460b      	mov	r3, r1
 8004eec:	4613      	mov	r3, r2
 8004eee:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8004ef0:	69bb      	ldr	r3, [r7, #24]
 8004ef2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004ef6:	d308      	bcc.n	8004f0a <UART_SetConfig+0x2b2>
 8004ef8:	69bb      	ldr	r3, [r7, #24]
 8004efa:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004efe:	d204      	bcs.n	8004f0a <UART_SetConfig+0x2b2>
        {
          huart->Instance->BRR = usartdiv;
 8004f00:	68fb      	ldr	r3, [r7, #12]
 8004f02:	681b      	ldr	r3, [r3, #0]
 8004f04:	69ba      	ldr	r2, [r7, #24]
 8004f06:	60da      	str	r2, [r3, #12]
 8004f08:	e0c2      	b.n	8005090 <UART_SetConfig+0x438>
        }
        else
        {
          ret = HAL_ERROR;
 8004f0a:	2301      	movs	r3, #1
 8004f0c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8004f10:	e0be      	b.n	8005090 <UART_SetConfig+0x438>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004f12:	68fb      	ldr	r3, [r7, #12]
 8004f14:	69db      	ldr	r3, [r3, #28]
 8004f16:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004f1a:	d16a      	bne.n	8004ff2 <UART_SetConfig+0x39a>
  {
    switch (clocksource)
 8004f1c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8004f20:	2b08      	cmp	r3, #8
 8004f22:	d834      	bhi.n	8004f8e <UART_SetConfig+0x336>
 8004f24:	a201      	add	r2, pc, #4	; (adr r2, 8004f2c <UART_SetConfig+0x2d4>)
 8004f26:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004f2a:	bf00      	nop
 8004f2c:	08004f51 	.word	0x08004f51
 8004f30:	08004f71 	.word	0x08004f71
 8004f34:	08004f79 	.word	0x08004f79
 8004f38:	08004f8f 	.word	0x08004f8f
 8004f3c:	08004f7f 	.word	0x08004f7f
 8004f40:	08004f8f 	.word	0x08004f8f
 8004f44:	08004f8f 	.word	0x08004f8f
 8004f48:	08004f8f 	.word	0x08004f8f
 8004f4c:	08004f87 	.word	0x08004f87
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004f50:	f7fe fc34 	bl	80037bc <HAL_RCC_GetPCLK1Freq>
 8004f54:	61f8      	str	r0, [r7, #28]
        break;
 8004f56:	e020      	b.n	8004f9a <UART_SetConfig+0x342>
 8004f58:	efff69f3 	.word	0xefff69f3
 8004f5c:	40008000 	.word	0x40008000
 8004f60:	40013800 	.word	0x40013800
 8004f64:	40021000 	.word	0x40021000
 8004f68:	40004400 	.word	0x40004400
 8004f6c:	00f42400 	.word	0x00f42400
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004f70:	f7fe fc3a 	bl	80037e8 <HAL_RCC_GetPCLK2Freq>
 8004f74:	61f8      	str	r0, [r7, #28]
        break;
 8004f76:	e010      	b.n	8004f9a <UART_SetConfig+0x342>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004f78:	4b4c      	ldr	r3, [pc, #304]	; (80050ac <UART_SetConfig+0x454>)
 8004f7a:	61fb      	str	r3, [r7, #28]
        break;
 8004f7c:	e00d      	b.n	8004f9a <UART_SetConfig+0x342>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004f7e:	f7fe fb85 	bl	800368c <HAL_RCC_GetSysClockFreq>
 8004f82:	61f8      	str	r0, [r7, #28]
        break;
 8004f84:	e009      	b.n	8004f9a <UART_SetConfig+0x342>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004f86:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004f8a:	61fb      	str	r3, [r7, #28]
        break;
 8004f8c:	e005      	b.n	8004f9a <UART_SetConfig+0x342>
      default:
        pclk = 0U;
 8004f8e:	2300      	movs	r3, #0
 8004f90:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8004f92:	2301      	movs	r3, #1
 8004f94:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8004f98:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8004f9a:	69fb      	ldr	r3, [r7, #28]
 8004f9c:	2b00      	cmp	r3, #0
 8004f9e:	d077      	beq.n	8005090 <UART_SetConfig+0x438>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8004fa0:	69fb      	ldr	r3, [r7, #28]
 8004fa2:	005a      	lsls	r2, r3, #1
 8004fa4:	68fb      	ldr	r3, [r7, #12]
 8004fa6:	685b      	ldr	r3, [r3, #4]
 8004fa8:	085b      	lsrs	r3, r3, #1
 8004faa:	441a      	add	r2, r3
 8004fac:	68fb      	ldr	r3, [r7, #12]
 8004fae:	685b      	ldr	r3, [r3, #4]
 8004fb0:	fbb2 f3f3 	udiv	r3, r2, r3
 8004fb4:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004fb6:	69bb      	ldr	r3, [r7, #24]
 8004fb8:	2b0f      	cmp	r3, #15
 8004fba:	d916      	bls.n	8004fea <UART_SetConfig+0x392>
 8004fbc:	69bb      	ldr	r3, [r7, #24]
 8004fbe:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004fc2:	d212      	bcs.n	8004fea <UART_SetConfig+0x392>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004fc4:	69bb      	ldr	r3, [r7, #24]
 8004fc6:	b29b      	uxth	r3, r3
 8004fc8:	f023 030f 	bic.w	r3, r3, #15
 8004fcc:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004fce:	69bb      	ldr	r3, [r7, #24]
 8004fd0:	085b      	lsrs	r3, r3, #1
 8004fd2:	b29b      	uxth	r3, r3
 8004fd4:	f003 0307 	and.w	r3, r3, #7
 8004fd8:	b29a      	uxth	r2, r3
 8004fda:	8afb      	ldrh	r3, [r7, #22]
 8004fdc:	4313      	orrs	r3, r2
 8004fde:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8004fe0:	68fb      	ldr	r3, [r7, #12]
 8004fe2:	681b      	ldr	r3, [r3, #0]
 8004fe4:	8afa      	ldrh	r2, [r7, #22]
 8004fe6:	60da      	str	r2, [r3, #12]
 8004fe8:	e052      	b.n	8005090 <UART_SetConfig+0x438>
      }
      else
      {
        ret = HAL_ERROR;
 8004fea:	2301      	movs	r3, #1
 8004fec:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8004ff0:	e04e      	b.n	8005090 <UART_SetConfig+0x438>
      }
    }
  }
  else
  {
    switch (clocksource)
 8004ff2:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8004ff6:	2b08      	cmp	r3, #8
 8004ff8:	d827      	bhi.n	800504a <UART_SetConfig+0x3f2>
 8004ffa:	a201      	add	r2, pc, #4	; (adr r2, 8005000 <UART_SetConfig+0x3a8>)
 8004ffc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005000:	08005025 	.word	0x08005025
 8005004:	0800502d 	.word	0x0800502d
 8005008:	08005035 	.word	0x08005035
 800500c:	0800504b 	.word	0x0800504b
 8005010:	0800503b 	.word	0x0800503b
 8005014:	0800504b 	.word	0x0800504b
 8005018:	0800504b 	.word	0x0800504b
 800501c:	0800504b 	.word	0x0800504b
 8005020:	08005043 	.word	0x08005043
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005024:	f7fe fbca 	bl	80037bc <HAL_RCC_GetPCLK1Freq>
 8005028:	61f8      	str	r0, [r7, #28]
        break;
 800502a:	e014      	b.n	8005056 <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800502c:	f7fe fbdc 	bl	80037e8 <HAL_RCC_GetPCLK2Freq>
 8005030:	61f8      	str	r0, [r7, #28]
        break;
 8005032:	e010      	b.n	8005056 <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005034:	4b1d      	ldr	r3, [pc, #116]	; (80050ac <UART_SetConfig+0x454>)
 8005036:	61fb      	str	r3, [r7, #28]
        break;
 8005038:	e00d      	b.n	8005056 <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800503a:	f7fe fb27 	bl	800368c <HAL_RCC_GetSysClockFreq>
 800503e:	61f8      	str	r0, [r7, #28]
        break;
 8005040:	e009      	b.n	8005056 <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005042:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005046:	61fb      	str	r3, [r7, #28]
        break;
 8005048:	e005      	b.n	8005056 <UART_SetConfig+0x3fe>
      default:
        pclk = 0U;
 800504a:	2300      	movs	r3, #0
 800504c:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800504e:	2301      	movs	r3, #1
 8005050:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8005054:	bf00      	nop
    }

    if (pclk != 0U)
 8005056:	69fb      	ldr	r3, [r7, #28]
 8005058:	2b00      	cmp	r3, #0
 800505a:	d019      	beq.n	8005090 <UART_SetConfig+0x438>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800505c:	68fb      	ldr	r3, [r7, #12]
 800505e:	685b      	ldr	r3, [r3, #4]
 8005060:	085a      	lsrs	r2, r3, #1
 8005062:	69fb      	ldr	r3, [r7, #28]
 8005064:	441a      	add	r2, r3
 8005066:	68fb      	ldr	r3, [r7, #12]
 8005068:	685b      	ldr	r3, [r3, #4]
 800506a:	fbb2 f3f3 	udiv	r3, r2, r3
 800506e:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005070:	69bb      	ldr	r3, [r7, #24]
 8005072:	2b0f      	cmp	r3, #15
 8005074:	d909      	bls.n	800508a <UART_SetConfig+0x432>
 8005076:	69bb      	ldr	r3, [r7, #24]
 8005078:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800507c:	d205      	bcs.n	800508a <UART_SetConfig+0x432>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800507e:	69bb      	ldr	r3, [r7, #24]
 8005080:	b29a      	uxth	r2, r3
 8005082:	68fb      	ldr	r3, [r7, #12]
 8005084:	681b      	ldr	r3, [r3, #0]
 8005086:	60da      	str	r2, [r3, #12]
 8005088:	e002      	b.n	8005090 <UART_SetConfig+0x438>
      }
      else
      {
        ret = HAL_ERROR;
 800508a:	2301      	movs	r3, #1
 800508c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8005090:	68fb      	ldr	r3, [r7, #12]
 8005092:	2200      	movs	r2, #0
 8005094:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8005096:	68fb      	ldr	r3, [r7, #12]
 8005098:	2200      	movs	r2, #0
 800509a:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 800509c:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
}
 80050a0:	4618      	mov	r0, r3
 80050a2:	3728      	adds	r7, #40	; 0x28
 80050a4:	46bd      	mov	sp, r7
 80050a6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80050aa:	bf00      	nop
 80050ac:	00f42400 	.word	0x00f42400

080050b0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80050b0:	b480      	push	{r7}
 80050b2:	b083      	sub	sp, #12
 80050b4:	af00      	add	r7, sp, #0
 80050b6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050bc:	f003 0301 	and.w	r3, r3, #1
 80050c0:	2b00      	cmp	r3, #0
 80050c2:	d00a      	beq.n	80050da <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	681b      	ldr	r3, [r3, #0]
 80050c8:	685b      	ldr	r3, [r3, #4]
 80050ca:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	681b      	ldr	r3, [r3, #0]
 80050d6:	430a      	orrs	r2, r1
 80050d8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050de:	f003 0302 	and.w	r3, r3, #2
 80050e2:	2b00      	cmp	r3, #0
 80050e4:	d00a      	beq.n	80050fc <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	681b      	ldr	r3, [r3, #0]
 80050ea:	685b      	ldr	r3, [r3, #4]
 80050ec:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	681b      	ldr	r3, [r3, #0]
 80050f8:	430a      	orrs	r2, r1
 80050fa:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005100:	f003 0304 	and.w	r3, r3, #4
 8005104:	2b00      	cmp	r3, #0
 8005106:	d00a      	beq.n	800511e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	681b      	ldr	r3, [r3, #0]
 800510c:	685b      	ldr	r3, [r3, #4]
 800510e:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	681b      	ldr	r3, [r3, #0]
 800511a:	430a      	orrs	r2, r1
 800511c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005122:	f003 0308 	and.w	r3, r3, #8
 8005126:	2b00      	cmp	r3, #0
 8005128:	d00a      	beq.n	8005140 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	681b      	ldr	r3, [r3, #0]
 800512e:	685b      	ldr	r3, [r3, #4]
 8005130:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	681b      	ldr	r3, [r3, #0]
 800513c:	430a      	orrs	r2, r1
 800513e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005144:	f003 0310 	and.w	r3, r3, #16
 8005148:	2b00      	cmp	r3, #0
 800514a:	d00a      	beq.n	8005162 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	681b      	ldr	r3, [r3, #0]
 8005150:	689b      	ldr	r3, [r3, #8]
 8005152:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	681b      	ldr	r3, [r3, #0]
 800515e:	430a      	orrs	r2, r1
 8005160:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005166:	f003 0320 	and.w	r3, r3, #32
 800516a:	2b00      	cmp	r3, #0
 800516c:	d00a      	beq.n	8005184 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	681b      	ldr	r3, [r3, #0]
 8005172:	689b      	ldr	r3, [r3, #8]
 8005174:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	681b      	ldr	r3, [r3, #0]
 8005180:	430a      	orrs	r2, r1
 8005182:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005188:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800518c:	2b00      	cmp	r3, #0
 800518e:	d01a      	beq.n	80051c6 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	681b      	ldr	r3, [r3, #0]
 8005194:	685b      	ldr	r3, [r3, #4]
 8005196:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	681b      	ldr	r3, [r3, #0]
 80051a2:	430a      	orrs	r2, r1
 80051a4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80051aa:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80051ae:	d10a      	bne.n	80051c6 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	681b      	ldr	r3, [r3, #0]
 80051b4:	685b      	ldr	r3, [r3, #4]
 80051b6:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	681b      	ldr	r3, [r3, #0]
 80051c2:	430a      	orrs	r2, r1
 80051c4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051ca:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80051ce:	2b00      	cmp	r3, #0
 80051d0:	d00a      	beq.n	80051e8 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	681b      	ldr	r3, [r3, #0]
 80051d6:	685b      	ldr	r3, [r3, #4]
 80051d8:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	681b      	ldr	r3, [r3, #0]
 80051e4:	430a      	orrs	r2, r1
 80051e6:	605a      	str	r2, [r3, #4]
  }
}
 80051e8:	bf00      	nop
 80051ea:	370c      	adds	r7, #12
 80051ec:	46bd      	mov	sp, r7
 80051ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051f2:	4770      	bx	lr

080051f4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80051f4:	b580      	push	{r7, lr}
 80051f6:	b086      	sub	sp, #24
 80051f8:	af02      	add	r7, sp, #8
 80051fa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	2200      	movs	r2, #0
 8005200:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8005204:	f7fc fc9c 	bl	8001b40 <HAL_GetTick>
 8005208:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	681b      	ldr	r3, [r3, #0]
 800520e:	681b      	ldr	r3, [r3, #0]
 8005210:	f003 0308 	and.w	r3, r3, #8
 8005214:	2b08      	cmp	r3, #8
 8005216:	d10e      	bne.n	8005236 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005218:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800521c:	9300      	str	r3, [sp, #0]
 800521e:	68fb      	ldr	r3, [r7, #12]
 8005220:	2200      	movs	r2, #0
 8005222:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8005226:	6878      	ldr	r0, [r7, #4]
 8005228:	f000 f82d 	bl	8005286 <UART_WaitOnFlagUntilTimeout>
 800522c:	4603      	mov	r3, r0
 800522e:	2b00      	cmp	r3, #0
 8005230:	d001      	beq.n	8005236 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005232:	2303      	movs	r3, #3
 8005234:	e023      	b.n	800527e <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	681b      	ldr	r3, [r3, #0]
 800523a:	681b      	ldr	r3, [r3, #0]
 800523c:	f003 0304 	and.w	r3, r3, #4
 8005240:	2b04      	cmp	r3, #4
 8005242:	d10e      	bne.n	8005262 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005244:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005248:	9300      	str	r3, [sp, #0]
 800524a:	68fb      	ldr	r3, [r7, #12]
 800524c:	2200      	movs	r2, #0
 800524e:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8005252:	6878      	ldr	r0, [r7, #4]
 8005254:	f000 f817 	bl	8005286 <UART_WaitOnFlagUntilTimeout>
 8005258:	4603      	mov	r3, r0
 800525a:	2b00      	cmp	r3, #0
 800525c:	d001      	beq.n	8005262 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800525e:	2303      	movs	r3, #3
 8005260:	e00d      	b.n	800527e <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	2220      	movs	r2, #32
 8005266:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	2220      	movs	r2, #32
 800526c:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	2200      	movs	r2, #0
 8005272:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	2200      	movs	r2, #0
 8005278:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 800527c:	2300      	movs	r3, #0
}
 800527e:	4618      	mov	r0, r3
 8005280:	3710      	adds	r7, #16
 8005282:	46bd      	mov	sp, r7
 8005284:	bd80      	pop	{r7, pc}

08005286 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8005286:	b580      	push	{r7, lr}
 8005288:	b09c      	sub	sp, #112	; 0x70
 800528a:	af00      	add	r7, sp, #0
 800528c:	60f8      	str	r0, [r7, #12]
 800528e:	60b9      	str	r1, [r7, #8]
 8005290:	603b      	str	r3, [r7, #0]
 8005292:	4613      	mov	r3, r2
 8005294:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005296:	e0a5      	b.n	80053e4 <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005298:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800529a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800529e:	f000 80a1 	beq.w	80053e4 <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80052a2:	f7fc fc4d 	bl	8001b40 <HAL_GetTick>
 80052a6:	4602      	mov	r2, r0
 80052a8:	683b      	ldr	r3, [r7, #0]
 80052aa:	1ad3      	subs	r3, r2, r3
 80052ac:	6fba      	ldr	r2, [r7, #120]	; 0x78
 80052ae:	429a      	cmp	r2, r3
 80052b0:	d302      	bcc.n	80052b8 <UART_WaitOnFlagUntilTimeout+0x32>
 80052b2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80052b4:	2b00      	cmp	r3, #0
 80052b6:	d13e      	bne.n	8005336 <UART_WaitOnFlagUntilTimeout+0xb0>
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                USART_CR1_TXEIE_TXFNFIE));
#else
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80052b8:	68fb      	ldr	r3, [r7, #12]
 80052ba:	681b      	ldr	r3, [r3, #0]
 80052bc:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80052be:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80052c0:	e853 3f00 	ldrex	r3, [r3]
 80052c4:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 80052c6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80052c8:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80052cc:	667b      	str	r3, [r7, #100]	; 0x64
 80052ce:	68fb      	ldr	r3, [r7, #12]
 80052d0:	681b      	ldr	r3, [r3, #0]
 80052d2:	461a      	mov	r2, r3
 80052d4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80052d6:	65fb      	str	r3, [r7, #92]	; 0x5c
 80052d8:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80052da:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80052dc:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80052de:	e841 2300 	strex	r3, r2, [r1]
 80052e2:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 80052e4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80052e6:	2b00      	cmp	r3, #0
 80052e8:	d1e6      	bne.n	80052b8 <UART_WaitOnFlagUntilTimeout+0x32>
#endif /* USART_CR1_FIFOEN */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80052ea:	68fb      	ldr	r3, [r7, #12]
 80052ec:	681b      	ldr	r3, [r3, #0]
 80052ee:	3308      	adds	r3, #8
 80052f0:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80052f2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80052f4:	e853 3f00 	ldrex	r3, [r3]
 80052f8:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80052fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80052fc:	f023 0301 	bic.w	r3, r3, #1
 8005300:	663b      	str	r3, [r7, #96]	; 0x60
 8005302:	68fb      	ldr	r3, [r7, #12]
 8005304:	681b      	ldr	r3, [r3, #0]
 8005306:	3308      	adds	r3, #8
 8005308:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800530a:	64ba      	str	r2, [r7, #72]	; 0x48
 800530c:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800530e:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8005310:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005312:	e841 2300 	strex	r3, r2, [r1]
 8005316:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8005318:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800531a:	2b00      	cmp	r3, #0
 800531c:	d1e5      	bne.n	80052ea <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 800531e:	68fb      	ldr	r3, [r7, #12]
 8005320:	2220      	movs	r2, #32
 8005322:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8005324:	68fb      	ldr	r3, [r7, #12]
 8005326:	2220      	movs	r2, #32
 8005328:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 800532a:	68fb      	ldr	r3, [r7, #12]
 800532c:	2200      	movs	r2, #0
 800532e:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 8005332:	2303      	movs	r3, #3
 8005334:	e067      	b.n	8005406 <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8005336:	68fb      	ldr	r3, [r7, #12]
 8005338:	681b      	ldr	r3, [r3, #0]
 800533a:	681b      	ldr	r3, [r3, #0]
 800533c:	f003 0304 	and.w	r3, r3, #4
 8005340:	2b00      	cmp	r3, #0
 8005342:	d04f      	beq.n	80053e4 <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8005344:	68fb      	ldr	r3, [r7, #12]
 8005346:	681b      	ldr	r3, [r3, #0]
 8005348:	69db      	ldr	r3, [r3, #28]
 800534a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800534e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005352:	d147      	bne.n	80053e4 <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005354:	68fb      	ldr	r3, [r7, #12]
 8005356:	681b      	ldr	r3, [r3, #0]
 8005358:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800535c:	621a      	str	r2, [r3, #32]
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                  USART_CR1_TXEIE_TXFNFIE));
#else
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800535e:	68fb      	ldr	r3, [r7, #12]
 8005360:	681b      	ldr	r3, [r3, #0]
 8005362:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005364:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005366:	e853 3f00 	ldrex	r3, [r3]
 800536a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800536c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800536e:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8005372:	66fb      	str	r3, [r7, #108]	; 0x6c
 8005374:	68fb      	ldr	r3, [r7, #12]
 8005376:	681b      	ldr	r3, [r3, #0]
 8005378:	461a      	mov	r2, r3
 800537a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800537c:	637b      	str	r3, [r7, #52]	; 0x34
 800537e:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005380:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8005382:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005384:	e841 2300 	strex	r3, r2, [r1]
 8005388:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800538a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800538c:	2b00      	cmp	r3, #0
 800538e:	d1e6      	bne.n	800535e <UART_WaitOnFlagUntilTimeout+0xd8>
#endif /* USART_CR1_FIFOEN */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005390:	68fb      	ldr	r3, [r7, #12]
 8005392:	681b      	ldr	r3, [r3, #0]
 8005394:	3308      	adds	r3, #8
 8005396:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005398:	697b      	ldr	r3, [r7, #20]
 800539a:	e853 3f00 	ldrex	r3, [r3]
 800539e:	613b      	str	r3, [r7, #16]
   return(result);
 80053a0:	693b      	ldr	r3, [r7, #16]
 80053a2:	f023 0301 	bic.w	r3, r3, #1
 80053a6:	66bb      	str	r3, [r7, #104]	; 0x68
 80053a8:	68fb      	ldr	r3, [r7, #12]
 80053aa:	681b      	ldr	r3, [r3, #0]
 80053ac:	3308      	adds	r3, #8
 80053ae:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80053b0:	623a      	str	r2, [r7, #32]
 80053b2:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80053b4:	69f9      	ldr	r1, [r7, #28]
 80053b6:	6a3a      	ldr	r2, [r7, #32]
 80053b8:	e841 2300 	strex	r3, r2, [r1]
 80053bc:	61bb      	str	r3, [r7, #24]
   return(result);
 80053be:	69bb      	ldr	r3, [r7, #24]
 80053c0:	2b00      	cmp	r3, #0
 80053c2:	d1e5      	bne.n	8005390 <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 80053c4:	68fb      	ldr	r3, [r7, #12]
 80053c6:	2220      	movs	r2, #32
 80053c8:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 80053ca:	68fb      	ldr	r3, [r7, #12]
 80053cc:	2220      	movs	r2, #32
 80053ce:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80053d0:	68fb      	ldr	r3, [r7, #12]
 80053d2:	2220      	movs	r2, #32
 80053d4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80053d8:	68fb      	ldr	r3, [r7, #12]
 80053da:	2200      	movs	r2, #0
 80053dc:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 80053e0:	2303      	movs	r3, #3
 80053e2:	e010      	b.n	8005406 <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80053e4:	68fb      	ldr	r3, [r7, #12]
 80053e6:	681b      	ldr	r3, [r3, #0]
 80053e8:	69da      	ldr	r2, [r3, #28]
 80053ea:	68bb      	ldr	r3, [r7, #8]
 80053ec:	4013      	ands	r3, r2
 80053ee:	68ba      	ldr	r2, [r7, #8]
 80053f0:	429a      	cmp	r2, r3
 80053f2:	bf0c      	ite	eq
 80053f4:	2301      	moveq	r3, #1
 80053f6:	2300      	movne	r3, #0
 80053f8:	b2db      	uxtb	r3, r3
 80053fa:	461a      	mov	r2, r3
 80053fc:	79fb      	ldrb	r3, [r7, #7]
 80053fe:	429a      	cmp	r2, r3
 8005400:	f43f af4a 	beq.w	8005298 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005404:	2300      	movs	r3, #0
}
 8005406:	4618      	mov	r0, r3
 8005408:	3770      	adds	r7, #112	; 0x70
 800540a:	46bd      	mov	sp, r7
 800540c:	bd80      	pop	{r7, pc}
	...

08005410 <__NVIC_SetPriority>:
{
 8005410:	b480      	push	{r7}
 8005412:	b083      	sub	sp, #12
 8005414:	af00      	add	r7, sp, #0
 8005416:	4603      	mov	r3, r0
 8005418:	6039      	str	r1, [r7, #0]
 800541a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800541c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005420:	2b00      	cmp	r3, #0
 8005422:	db0a      	blt.n	800543a <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005424:	683b      	ldr	r3, [r7, #0]
 8005426:	b2da      	uxtb	r2, r3
 8005428:	490c      	ldr	r1, [pc, #48]	; (800545c <__NVIC_SetPriority+0x4c>)
 800542a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800542e:	0112      	lsls	r2, r2, #4
 8005430:	b2d2      	uxtb	r2, r2
 8005432:	440b      	add	r3, r1
 8005434:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8005438:	e00a      	b.n	8005450 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800543a:	683b      	ldr	r3, [r7, #0]
 800543c:	b2da      	uxtb	r2, r3
 800543e:	4908      	ldr	r1, [pc, #32]	; (8005460 <__NVIC_SetPriority+0x50>)
 8005440:	79fb      	ldrb	r3, [r7, #7]
 8005442:	f003 030f 	and.w	r3, r3, #15
 8005446:	3b04      	subs	r3, #4
 8005448:	0112      	lsls	r2, r2, #4
 800544a:	b2d2      	uxtb	r2, r2
 800544c:	440b      	add	r3, r1
 800544e:	761a      	strb	r2, [r3, #24]
}
 8005450:	bf00      	nop
 8005452:	370c      	adds	r7, #12
 8005454:	46bd      	mov	sp, r7
 8005456:	f85d 7b04 	ldr.w	r7, [sp], #4
 800545a:	4770      	bx	lr
 800545c:	e000e100 	.word	0xe000e100
 8005460:	e000ed00 	.word	0xe000ed00

08005464 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 8005464:	b580      	push	{r7, lr}
 8005466:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 8005468:	4b05      	ldr	r3, [pc, #20]	; (8005480 <SysTick_Handler+0x1c>)
 800546a:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 800546c:	f001 fd28 	bl	8006ec0 <xTaskGetSchedulerState>
 8005470:	4603      	mov	r3, r0
 8005472:	2b01      	cmp	r3, #1
 8005474:	d001      	beq.n	800547a <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 8005476:	f002 fb0f 	bl	8007a98 <xPortSysTickHandler>
  }
}
 800547a:	bf00      	nop
 800547c:	bd80      	pop	{r7, pc}
 800547e:	bf00      	nop
 8005480:	e000e010 	.word	0xe000e010

08005484 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8005484:	b580      	push	{r7, lr}
 8005486:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8005488:	2100      	movs	r1, #0
 800548a:	f06f 0004 	mvn.w	r0, #4
 800548e:	f7ff ffbf 	bl	8005410 <__NVIC_SetPriority>
#endif
}
 8005492:	bf00      	nop
 8005494:	bd80      	pop	{r7, pc}
	...

08005498 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8005498:	b480      	push	{r7}
 800549a:	b083      	sub	sp, #12
 800549c:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800549e:	f3ef 8305 	mrs	r3, IPSR
 80054a2:	603b      	str	r3, [r7, #0]
  return(result);
 80054a4:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 80054a6:	2b00      	cmp	r3, #0
 80054a8:	d003      	beq.n	80054b2 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 80054aa:	f06f 0305 	mvn.w	r3, #5
 80054ae:	607b      	str	r3, [r7, #4]
 80054b0:	e00c      	b.n	80054cc <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 80054b2:	4b0a      	ldr	r3, [pc, #40]	; (80054dc <osKernelInitialize+0x44>)
 80054b4:	681b      	ldr	r3, [r3, #0]
 80054b6:	2b00      	cmp	r3, #0
 80054b8:	d105      	bne.n	80054c6 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 80054ba:	4b08      	ldr	r3, [pc, #32]	; (80054dc <osKernelInitialize+0x44>)
 80054bc:	2201      	movs	r2, #1
 80054be:	601a      	str	r2, [r3, #0]
      stat = osOK;
 80054c0:	2300      	movs	r3, #0
 80054c2:	607b      	str	r3, [r7, #4]
 80054c4:	e002      	b.n	80054cc <osKernelInitialize+0x34>
    } else {
      stat = osError;
 80054c6:	f04f 33ff 	mov.w	r3, #4294967295
 80054ca:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 80054cc:	687b      	ldr	r3, [r7, #4]
}
 80054ce:	4618      	mov	r0, r3
 80054d0:	370c      	adds	r7, #12
 80054d2:	46bd      	mov	sp, r7
 80054d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054d8:	4770      	bx	lr
 80054da:	bf00      	nop
 80054dc:	200003ec 	.word	0x200003ec

080054e0 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 80054e0:	b580      	push	{r7, lr}
 80054e2:	b082      	sub	sp, #8
 80054e4:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80054e6:	f3ef 8305 	mrs	r3, IPSR
 80054ea:	603b      	str	r3, [r7, #0]
  return(result);
 80054ec:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 80054ee:	2b00      	cmp	r3, #0
 80054f0:	d003      	beq.n	80054fa <osKernelStart+0x1a>
    stat = osErrorISR;
 80054f2:	f06f 0305 	mvn.w	r3, #5
 80054f6:	607b      	str	r3, [r7, #4]
 80054f8:	e010      	b.n	800551c <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 80054fa:	4b0b      	ldr	r3, [pc, #44]	; (8005528 <osKernelStart+0x48>)
 80054fc:	681b      	ldr	r3, [r3, #0]
 80054fe:	2b01      	cmp	r3, #1
 8005500:	d109      	bne.n	8005516 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8005502:	f7ff ffbf 	bl	8005484 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8005506:	4b08      	ldr	r3, [pc, #32]	; (8005528 <osKernelStart+0x48>)
 8005508:	2202      	movs	r2, #2
 800550a:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 800550c:	f001 f87c 	bl	8006608 <vTaskStartScheduler>
      stat = osOK;
 8005510:	2300      	movs	r3, #0
 8005512:	607b      	str	r3, [r7, #4]
 8005514:	e002      	b.n	800551c <osKernelStart+0x3c>
    } else {
      stat = osError;
 8005516:	f04f 33ff 	mov.w	r3, #4294967295
 800551a:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800551c:	687b      	ldr	r3, [r7, #4]
}
 800551e:	4618      	mov	r0, r3
 8005520:	3708      	adds	r7, #8
 8005522:	46bd      	mov	sp, r7
 8005524:	bd80      	pop	{r7, pc}
 8005526:	bf00      	nop
 8005528:	200003ec 	.word	0x200003ec

0800552c <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 800552c:	b580      	push	{r7, lr}
 800552e:	b08e      	sub	sp, #56	; 0x38
 8005530:	af04      	add	r7, sp, #16
 8005532:	60f8      	str	r0, [r7, #12]
 8005534:	60b9      	str	r1, [r7, #8]
 8005536:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8005538:	2300      	movs	r3, #0
 800553a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800553c:	f3ef 8305 	mrs	r3, IPSR
 8005540:	617b      	str	r3, [r7, #20]
  return(result);
 8005542:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8005544:	2b00      	cmp	r3, #0
 8005546:	d17e      	bne.n	8005646 <osThreadNew+0x11a>
 8005548:	68fb      	ldr	r3, [r7, #12]
 800554a:	2b00      	cmp	r3, #0
 800554c:	d07b      	beq.n	8005646 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 800554e:	2380      	movs	r3, #128	; 0x80
 8005550:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 8005552:	2318      	movs	r3, #24
 8005554:	61fb      	str	r3, [r7, #28]

    name = NULL;
 8005556:	2300      	movs	r3, #0
 8005558:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 800555a:	f04f 33ff 	mov.w	r3, #4294967295
 800555e:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	2b00      	cmp	r3, #0
 8005564:	d045      	beq.n	80055f2 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	681b      	ldr	r3, [r3, #0]
 800556a:	2b00      	cmp	r3, #0
 800556c:	d002      	beq.n	8005574 <osThreadNew+0x48>
        name = attr->name;
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	681b      	ldr	r3, [r3, #0]
 8005572:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	699b      	ldr	r3, [r3, #24]
 8005578:	2b00      	cmp	r3, #0
 800557a:	d002      	beq.n	8005582 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	699b      	ldr	r3, [r3, #24]
 8005580:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8005582:	69fb      	ldr	r3, [r7, #28]
 8005584:	2b00      	cmp	r3, #0
 8005586:	d008      	beq.n	800559a <osThreadNew+0x6e>
 8005588:	69fb      	ldr	r3, [r7, #28]
 800558a:	2b38      	cmp	r3, #56	; 0x38
 800558c:	d805      	bhi.n	800559a <osThreadNew+0x6e>
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	685b      	ldr	r3, [r3, #4]
 8005592:	f003 0301 	and.w	r3, r3, #1
 8005596:	2b00      	cmp	r3, #0
 8005598:	d001      	beq.n	800559e <osThreadNew+0x72>
        return (NULL);
 800559a:	2300      	movs	r3, #0
 800559c:	e054      	b.n	8005648 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 800559e:	687b      	ldr	r3, [r7, #4]
 80055a0:	695b      	ldr	r3, [r3, #20]
 80055a2:	2b00      	cmp	r3, #0
 80055a4:	d003      	beq.n	80055ae <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 80055a6:	687b      	ldr	r3, [r7, #4]
 80055a8:	695b      	ldr	r3, [r3, #20]
 80055aa:	089b      	lsrs	r3, r3, #2
 80055ac:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	689b      	ldr	r3, [r3, #8]
 80055b2:	2b00      	cmp	r3, #0
 80055b4:	d00e      	beq.n	80055d4 <osThreadNew+0xa8>
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	68db      	ldr	r3, [r3, #12]
 80055ba:	2bbb      	cmp	r3, #187	; 0xbb
 80055bc:	d90a      	bls.n	80055d4 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80055be:	687b      	ldr	r3, [r7, #4]
 80055c0:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80055c2:	2b00      	cmp	r3, #0
 80055c4:	d006      	beq.n	80055d4 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80055c6:	687b      	ldr	r3, [r7, #4]
 80055c8:	695b      	ldr	r3, [r3, #20]
 80055ca:	2b00      	cmp	r3, #0
 80055cc:	d002      	beq.n	80055d4 <osThreadNew+0xa8>
        mem = 1;
 80055ce:	2301      	movs	r3, #1
 80055d0:	61bb      	str	r3, [r7, #24]
 80055d2:	e010      	b.n	80055f6 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	689b      	ldr	r3, [r3, #8]
 80055d8:	2b00      	cmp	r3, #0
 80055da:	d10c      	bne.n	80055f6 <osThreadNew+0xca>
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	68db      	ldr	r3, [r3, #12]
 80055e0:	2b00      	cmp	r3, #0
 80055e2:	d108      	bne.n	80055f6 <osThreadNew+0xca>
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	691b      	ldr	r3, [r3, #16]
 80055e8:	2b00      	cmp	r3, #0
 80055ea:	d104      	bne.n	80055f6 <osThreadNew+0xca>
          mem = 0;
 80055ec:	2300      	movs	r3, #0
 80055ee:	61bb      	str	r3, [r7, #24]
 80055f0:	e001      	b.n	80055f6 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 80055f2:	2300      	movs	r3, #0
 80055f4:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 80055f6:	69bb      	ldr	r3, [r7, #24]
 80055f8:	2b01      	cmp	r3, #1
 80055fa:	d110      	bne.n	800561e <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8005600:	687a      	ldr	r2, [r7, #4]
 8005602:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8005604:	9202      	str	r2, [sp, #8]
 8005606:	9301      	str	r3, [sp, #4]
 8005608:	69fb      	ldr	r3, [r7, #28]
 800560a:	9300      	str	r3, [sp, #0]
 800560c:	68bb      	ldr	r3, [r7, #8]
 800560e:	6a3a      	ldr	r2, [r7, #32]
 8005610:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8005612:	68f8      	ldr	r0, [r7, #12]
 8005614:	f000 fe0c 	bl	8006230 <xTaskCreateStatic>
 8005618:	4603      	mov	r3, r0
 800561a:	613b      	str	r3, [r7, #16]
 800561c:	e013      	b.n	8005646 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 800561e:	69bb      	ldr	r3, [r7, #24]
 8005620:	2b00      	cmp	r3, #0
 8005622:	d110      	bne.n	8005646 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8005624:	6a3b      	ldr	r3, [r7, #32]
 8005626:	b29a      	uxth	r2, r3
 8005628:	f107 0310 	add.w	r3, r7, #16
 800562c:	9301      	str	r3, [sp, #4]
 800562e:	69fb      	ldr	r3, [r7, #28]
 8005630:	9300      	str	r3, [sp, #0]
 8005632:	68bb      	ldr	r3, [r7, #8]
 8005634:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8005636:	68f8      	ldr	r0, [r7, #12]
 8005638:	f000 fe57 	bl	80062ea <xTaskCreate>
 800563c:	4603      	mov	r3, r0
 800563e:	2b01      	cmp	r3, #1
 8005640:	d001      	beq.n	8005646 <osThreadNew+0x11a>
            hTask = NULL;
 8005642:	2300      	movs	r3, #0
 8005644:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 8005646:	693b      	ldr	r3, [r7, #16]
}
 8005648:	4618      	mov	r0, r3
 800564a:	3728      	adds	r7, #40	; 0x28
 800564c:	46bd      	mov	sp, r7
 800564e:	bd80      	pop	{r7, pc}

08005650 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8005650:	b580      	push	{r7, lr}
 8005652:	b084      	sub	sp, #16
 8005654:	af00      	add	r7, sp, #0
 8005656:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005658:	f3ef 8305 	mrs	r3, IPSR
 800565c:	60bb      	str	r3, [r7, #8]
  return(result);
 800565e:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8005660:	2b00      	cmp	r3, #0
 8005662:	d003      	beq.n	800566c <osDelay+0x1c>
    stat = osErrorISR;
 8005664:	f06f 0305 	mvn.w	r3, #5
 8005668:	60fb      	str	r3, [r7, #12]
 800566a:	e007      	b.n	800567c <osDelay+0x2c>
  }
  else {
    stat = osOK;
 800566c:	2300      	movs	r3, #0
 800566e:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8005670:	687b      	ldr	r3, [r7, #4]
 8005672:	2b00      	cmp	r3, #0
 8005674:	d002      	beq.n	800567c <osDelay+0x2c>
      vTaskDelay(ticks);
 8005676:	6878      	ldr	r0, [r7, #4]
 8005678:	f000 ff92 	bl	80065a0 <vTaskDelay>
    }
  }

  return (stat);
 800567c:	68fb      	ldr	r3, [r7, #12]
}
 800567e:	4618      	mov	r0, r3
 8005680:	3710      	adds	r7, #16
 8005682:	46bd      	mov	sp, r7
 8005684:	bd80      	pop	{r7, pc}
	...

08005688 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8005688:	b480      	push	{r7}
 800568a:	b085      	sub	sp, #20
 800568c:	af00      	add	r7, sp, #0
 800568e:	60f8      	str	r0, [r7, #12]
 8005690:	60b9      	str	r1, [r7, #8]
 8005692:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8005694:	68fb      	ldr	r3, [r7, #12]
 8005696:	4a07      	ldr	r2, [pc, #28]	; (80056b4 <vApplicationGetIdleTaskMemory+0x2c>)
 8005698:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800569a:	68bb      	ldr	r3, [r7, #8]
 800569c:	4a06      	ldr	r2, [pc, #24]	; (80056b8 <vApplicationGetIdleTaskMemory+0x30>)
 800569e:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	2280      	movs	r2, #128	; 0x80
 80056a4:	601a      	str	r2, [r3, #0]
}
 80056a6:	bf00      	nop
 80056a8:	3714      	adds	r7, #20
 80056aa:	46bd      	mov	sp, r7
 80056ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056b0:	4770      	bx	lr
 80056b2:	bf00      	nop
 80056b4:	200003f0 	.word	0x200003f0
 80056b8:	200004ac 	.word	0x200004ac

080056bc <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 80056bc:	b480      	push	{r7}
 80056be:	b085      	sub	sp, #20
 80056c0:	af00      	add	r7, sp, #0
 80056c2:	60f8      	str	r0, [r7, #12]
 80056c4:	60b9      	str	r1, [r7, #8]
 80056c6:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 80056c8:	68fb      	ldr	r3, [r7, #12]
 80056ca:	4a07      	ldr	r2, [pc, #28]	; (80056e8 <vApplicationGetTimerTaskMemory+0x2c>)
 80056cc:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 80056ce:	68bb      	ldr	r3, [r7, #8]
 80056d0:	4a06      	ldr	r2, [pc, #24]	; (80056ec <vApplicationGetTimerTaskMemory+0x30>)
 80056d2:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	f44f 7280 	mov.w	r2, #256	; 0x100
 80056da:	601a      	str	r2, [r3, #0]
}
 80056dc:	bf00      	nop
 80056de:	3714      	adds	r7, #20
 80056e0:	46bd      	mov	sp, r7
 80056e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056e6:	4770      	bx	lr
 80056e8:	200006ac 	.word	0x200006ac
 80056ec:	20000768 	.word	0x20000768

080056f0 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80056f0:	b480      	push	{r7}
 80056f2:	b083      	sub	sp, #12
 80056f4:	af00      	add	r7, sp, #0
 80056f6:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	f103 0208 	add.w	r2, r3, #8
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8005702:	687b      	ldr	r3, [r7, #4]
 8005704:	f04f 32ff 	mov.w	r2, #4294967295
 8005708:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800570a:	687b      	ldr	r3, [r7, #4]
 800570c:	f103 0208 	add.w	r2, r3, #8
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	f103 0208 	add.w	r2, r3, #8
 800571a:	687b      	ldr	r3, [r7, #4]
 800571c:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800571e:	687b      	ldr	r3, [r7, #4]
 8005720:	2200      	movs	r2, #0
 8005722:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8005724:	bf00      	nop
 8005726:	370c      	adds	r7, #12
 8005728:	46bd      	mov	sp, r7
 800572a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800572e:	4770      	bx	lr

08005730 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8005730:	b480      	push	{r7}
 8005732:	b083      	sub	sp, #12
 8005734:	af00      	add	r7, sp, #0
 8005736:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	2200      	movs	r2, #0
 800573c:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800573e:	bf00      	nop
 8005740:	370c      	adds	r7, #12
 8005742:	46bd      	mov	sp, r7
 8005744:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005748:	4770      	bx	lr

0800574a <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800574a:	b480      	push	{r7}
 800574c:	b085      	sub	sp, #20
 800574e:	af00      	add	r7, sp, #0
 8005750:	6078      	str	r0, [r7, #4]
 8005752:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8005754:	687b      	ldr	r3, [r7, #4]
 8005756:	685b      	ldr	r3, [r3, #4]
 8005758:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800575a:	683b      	ldr	r3, [r7, #0]
 800575c:	68fa      	ldr	r2, [r7, #12]
 800575e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8005760:	68fb      	ldr	r3, [r7, #12]
 8005762:	689a      	ldr	r2, [r3, #8]
 8005764:	683b      	ldr	r3, [r7, #0]
 8005766:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8005768:	68fb      	ldr	r3, [r7, #12]
 800576a:	689b      	ldr	r3, [r3, #8]
 800576c:	683a      	ldr	r2, [r7, #0]
 800576e:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8005770:	68fb      	ldr	r3, [r7, #12]
 8005772:	683a      	ldr	r2, [r7, #0]
 8005774:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8005776:	683b      	ldr	r3, [r7, #0]
 8005778:	687a      	ldr	r2, [r7, #4]
 800577a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	681b      	ldr	r3, [r3, #0]
 8005780:	1c5a      	adds	r2, r3, #1
 8005782:	687b      	ldr	r3, [r7, #4]
 8005784:	601a      	str	r2, [r3, #0]
}
 8005786:	bf00      	nop
 8005788:	3714      	adds	r7, #20
 800578a:	46bd      	mov	sp, r7
 800578c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005790:	4770      	bx	lr

08005792 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8005792:	b480      	push	{r7}
 8005794:	b085      	sub	sp, #20
 8005796:	af00      	add	r7, sp, #0
 8005798:	6078      	str	r0, [r7, #4]
 800579a:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800579c:	683b      	ldr	r3, [r7, #0]
 800579e:	681b      	ldr	r3, [r3, #0]
 80057a0:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80057a2:	68bb      	ldr	r3, [r7, #8]
 80057a4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80057a8:	d103      	bne.n	80057b2 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80057aa:	687b      	ldr	r3, [r7, #4]
 80057ac:	691b      	ldr	r3, [r3, #16]
 80057ae:	60fb      	str	r3, [r7, #12]
 80057b0:	e00c      	b.n	80057cc <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80057b2:	687b      	ldr	r3, [r7, #4]
 80057b4:	3308      	adds	r3, #8
 80057b6:	60fb      	str	r3, [r7, #12]
 80057b8:	e002      	b.n	80057c0 <vListInsert+0x2e>
 80057ba:	68fb      	ldr	r3, [r7, #12]
 80057bc:	685b      	ldr	r3, [r3, #4]
 80057be:	60fb      	str	r3, [r7, #12]
 80057c0:	68fb      	ldr	r3, [r7, #12]
 80057c2:	685b      	ldr	r3, [r3, #4]
 80057c4:	681b      	ldr	r3, [r3, #0]
 80057c6:	68ba      	ldr	r2, [r7, #8]
 80057c8:	429a      	cmp	r2, r3
 80057ca:	d2f6      	bcs.n	80057ba <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80057cc:	68fb      	ldr	r3, [r7, #12]
 80057ce:	685a      	ldr	r2, [r3, #4]
 80057d0:	683b      	ldr	r3, [r7, #0]
 80057d2:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80057d4:	683b      	ldr	r3, [r7, #0]
 80057d6:	685b      	ldr	r3, [r3, #4]
 80057d8:	683a      	ldr	r2, [r7, #0]
 80057da:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80057dc:	683b      	ldr	r3, [r7, #0]
 80057de:	68fa      	ldr	r2, [r7, #12]
 80057e0:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80057e2:	68fb      	ldr	r3, [r7, #12]
 80057e4:	683a      	ldr	r2, [r7, #0]
 80057e6:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 80057e8:	683b      	ldr	r3, [r7, #0]
 80057ea:	687a      	ldr	r2, [r7, #4]
 80057ec:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80057ee:	687b      	ldr	r3, [r7, #4]
 80057f0:	681b      	ldr	r3, [r3, #0]
 80057f2:	1c5a      	adds	r2, r3, #1
 80057f4:	687b      	ldr	r3, [r7, #4]
 80057f6:	601a      	str	r2, [r3, #0]
}
 80057f8:	bf00      	nop
 80057fa:	3714      	adds	r7, #20
 80057fc:	46bd      	mov	sp, r7
 80057fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005802:	4770      	bx	lr

08005804 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8005804:	b480      	push	{r7}
 8005806:	b085      	sub	sp, #20
 8005808:	af00      	add	r7, sp, #0
 800580a:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	691b      	ldr	r3, [r3, #16]
 8005810:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8005812:	687b      	ldr	r3, [r7, #4]
 8005814:	685b      	ldr	r3, [r3, #4]
 8005816:	687a      	ldr	r2, [r7, #4]
 8005818:	6892      	ldr	r2, [r2, #8]
 800581a:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	689b      	ldr	r3, [r3, #8]
 8005820:	687a      	ldr	r2, [r7, #4]
 8005822:	6852      	ldr	r2, [r2, #4]
 8005824:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8005826:	68fb      	ldr	r3, [r7, #12]
 8005828:	685b      	ldr	r3, [r3, #4]
 800582a:	687a      	ldr	r2, [r7, #4]
 800582c:	429a      	cmp	r2, r3
 800582e:	d103      	bne.n	8005838 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8005830:	687b      	ldr	r3, [r7, #4]
 8005832:	689a      	ldr	r2, [r3, #8]
 8005834:	68fb      	ldr	r3, [r7, #12]
 8005836:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8005838:	687b      	ldr	r3, [r7, #4]
 800583a:	2200      	movs	r2, #0
 800583c:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800583e:	68fb      	ldr	r3, [r7, #12]
 8005840:	681b      	ldr	r3, [r3, #0]
 8005842:	1e5a      	subs	r2, r3, #1
 8005844:	68fb      	ldr	r3, [r7, #12]
 8005846:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8005848:	68fb      	ldr	r3, [r7, #12]
 800584a:	681b      	ldr	r3, [r3, #0]
}
 800584c:	4618      	mov	r0, r3
 800584e:	3714      	adds	r7, #20
 8005850:	46bd      	mov	sp, r7
 8005852:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005856:	4770      	bx	lr

08005858 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8005858:	b580      	push	{r7, lr}
 800585a:	b084      	sub	sp, #16
 800585c:	af00      	add	r7, sp, #0
 800585e:	6078      	str	r0, [r7, #4]
 8005860:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8005862:	687b      	ldr	r3, [r7, #4]
 8005864:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8005866:	68fb      	ldr	r3, [r7, #12]
 8005868:	2b00      	cmp	r3, #0
 800586a:	d10a      	bne.n	8005882 <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800586c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005870:	f383 8811 	msr	BASEPRI, r3
 8005874:	f3bf 8f6f 	isb	sy
 8005878:	f3bf 8f4f 	dsb	sy
 800587c:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800587e:	bf00      	nop
 8005880:	e7fe      	b.n	8005880 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8005882:	f002 f877 	bl	8007974 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8005886:	68fb      	ldr	r3, [r7, #12]
 8005888:	681a      	ldr	r2, [r3, #0]
 800588a:	68fb      	ldr	r3, [r7, #12]
 800588c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800588e:	68f9      	ldr	r1, [r7, #12]
 8005890:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8005892:	fb01 f303 	mul.w	r3, r1, r3
 8005896:	441a      	add	r2, r3
 8005898:	68fb      	ldr	r3, [r7, #12]
 800589a:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800589c:	68fb      	ldr	r3, [r7, #12]
 800589e:	2200      	movs	r2, #0
 80058a0:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 80058a2:	68fb      	ldr	r3, [r7, #12]
 80058a4:	681a      	ldr	r2, [r3, #0]
 80058a6:	68fb      	ldr	r3, [r7, #12]
 80058a8:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80058aa:	68fb      	ldr	r3, [r7, #12]
 80058ac:	681a      	ldr	r2, [r3, #0]
 80058ae:	68fb      	ldr	r3, [r7, #12]
 80058b0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80058b2:	3b01      	subs	r3, #1
 80058b4:	68f9      	ldr	r1, [r7, #12]
 80058b6:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80058b8:	fb01 f303 	mul.w	r3, r1, r3
 80058bc:	441a      	add	r2, r3
 80058be:	68fb      	ldr	r3, [r7, #12]
 80058c0:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 80058c2:	68fb      	ldr	r3, [r7, #12]
 80058c4:	22ff      	movs	r2, #255	; 0xff
 80058c6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 80058ca:	68fb      	ldr	r3, [r7, #12]
 80058cc:	22ff      	movs	r2, #255	; 0xff
 80058ce:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 80058d2:	683b      	ldr	r3, [r7, #0]
 80058d4:	2b00      	cmp	r3, #0
 80058d6:	d114      	bne.n	8005902 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80058d8:	68fb      	ldr	r3, [r7, #12]
 80058da:	691b      	ldr	r3, [r3, #16]
 80058dc:	2b00      	cmp	r3, #0
 80058de:	d01a      	beq.n	8005916 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80058e0:	68fb      	ldr	r3, [r7, #12]
 80058e2:	3310      	adds	r3, #16
 80058e4:	4618      	mov	r0, r3
 80058e6:	f001 f929 	bl	8006b3c <xTaskRemoveFromEventList>
 80058ea:	4603      	mov	r3, r0
 80058ec:	2b00      	cmp	r3, #0
 80058ee:	d012      	beq.n	8005916 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 80058f0:	4b0c      	ldr	r3, [pc, #48]	; (8005924 <xQueueGenericReset+0xcc>)
 80058f2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80058f6:	601a      	str	r2, [r3, #0]
 80058f8:	f3bf 8f4f 	dsb	sy
 80058fc:	f3bf 8f6f 	isb	sy
 8005900:	e009      	b.n	8005916 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8005902:	68fb      	ldr	r3, [r7, #12]
 8005904:	3310      	adds	r3, #16
 8005906:	4618      	mov	r0, r3
 8005908:	f7ff fef2 	bl	80056f0 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800590c:	68fb      	ldr	r3, [r7, #12]
 800590e:	3324      	adds	r3, #36	; 0x24
 8005910:	4618      	mov	r0, r3
 8005912:	f7ff feed 	bl	80056f0 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8005916:	f002 f85d 	bl	80079d4 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800591a:	2301      	movs	r3, #1
}
 800591c:	4618      	mov	r0, r3
 800591e:	3710      	adds	r7, #16
 8005920:	46bd      	mov	sp, r7
 8005922:	bd80      	pop	{r7, pc}
 8005924:	e000ed04 	.word	0xe000ed04

08005928 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8005928:	b580      	push	{r7, lr}
 800592a:	b08e      	sub	sp, #56	; 0x38
 800592c:	af02      	add	r7, sp, #8
 800592e:	60f8      	str	r0, [r7, #12]
 8005930:	60b9      	str	r1, [r7, #8]
 8005932:	607a      	str	r2, [r7, #4]
 8005934:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8005936:	68fb      	ldr	r3, [r7, #12]
 8005938:	2b00      	cmp	r3, #0
 800593a:	d10a      	bne.n	8005952 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 800593c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005940:	f383 8811 	msr	BASEPRI, r3
 8005944:	f3bf 8f6f 	isb	sy
 8005948:	f3bf 8f4f 	dsb	sy
 800594c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800594e:	bf00      	nop
 8005950:	e7fe      	b.n	8005950 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8005952:	683b      	ldr	r3, [r7, #0]
 8005954:	2b00      	cmp	r3, #0
 8005956:	d10a      	bne.n	800596e <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8005958:	f04f 0350 	mov.w	r3, #80	; 0x50
 800595c:	f383 8811 	msr	BASEPRI, r3
 8005960:	f3bf 8f6f 	isb	sy
 8005964:	f3bf 8f4f 	dsb	sy
 8005968:	627b      	str	r3, [r7, #36]	; 0x24
}
 800596a:	bf00      	nop
 800596c:	e7fe      	b.n	800596c <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800596e:	687b      	ldr	r3, [r7, #4]
 8005970:	2b00      	cmp	r3, #0
 8005972:	d002      	beq.n	800597a <xQueueGenericCreateStatic+0x52>
 8005974:	68bb      	ldr	r3, [r7, #8]
 8005976:	2b00      	cmp	r3, #0
 8005978:	d001      	beq.n	800597e <xQueueGenericCreateStatic+0x56>
 800597a:	2301      	movs	r3, #1
 800597c:	e000      	b.n	8005980 <xQueueGenericCreateStatic+0x58>
 800597e:	2300      	movs	r3, #0
 8005980:	2b00      	cmp	r3, #0
 8005982:	d10a      	bne.n	800599a <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8005984:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005988:	f383 8811 	msr	BASEPRI, r3
 800598c:	f3bf 8f6f 	isb	sy
 8005990:	f3bf 8f4f 	dsb	sy
 8005994:	623b      	str	r3, [r7, #32]
}
 8005996:	bf00      	nop
 8005998:	e7fe      	b.n	8005998 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800599a:	687b      	ldr	r3, [r7, #4]
 800599c:	2b00      	cmp	r3, #0
 800599e:	d102      	bne.n	80059a6 <xQueueGenericCreateStatic+0x7e>
 80059a0:	68bb      	ldr	r3, [r7, #8]
 80059a2:	2b00      	cmp	r3, #0
 80059a4:	d101      	bne.n	80059aa <xQueueGenericCreateStatic+0x82>
 80059a6:	2301      	movs	r3, #1
 80059a8:	e000      	b.n	80059ac <xQueueGenericCreateStatic+0x84>
 80059aa:	2300      	movs	r3, #0
 80059ac:	2b00      	cmp	r3, #0
 80059ae:	d10a      	bne.n	80059c6 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 80059b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80059b4:	f383 8811 	msr	BASEPRI, r3
 80059b8:	f3bf 8f6f 	isb	sy
 80059bc:	f3bf 8f4f 	dsb	sy
 80059c0:	61fb      	str	r3, [r7, #28]
}
 80059c2:	bf00      	nop
 80059c4:	e7fe      	b.n	80059c4 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 80059c6:	2350      	movs	r3, #80	; 0x50
 80059c8:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 80059ca:	697b      	ldr	r3, [r7, #20]
 80059cc:	2b50      	cmp	r3, #80	; 0x50
 80059ce:	d00a      	beq.n	80059e6 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 80059d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80059d4:	f383 8811 	msr	BASEPRI, r3
 80059d8:	f3bf 8f6f 	isb	sy
 80059dc:	f3bf 8f4f 	dsb	sy
 80059e0:	61bb      	str	r3, [r7, #24]
}
 80059e2:	bf00      	nop
 80059e4:	e7fe      	b.n	80059e4 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 80059e6:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80059e8:	683b      	ldr	r3, [r7, #0]
 80059ea:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 80059ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80059ee:	2b00      	cmp	r3, #0
 80059f0:	d00d      	beq.n	8005a0e <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 80059f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80059f4:	2201      	movs	r2, #1
 80059f6:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80059fa:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 80059fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005a00:	9300      	str	r3, [sp, #0]
 8005a02:	4613      	mov	r3, r2
 8005a04:	687a      	ldr	r2, [r7, #4]
 8005a06:	68b9      	ldr	r1, [r7, #8]
 8005a08:	68f8      	ldr	r0, [r7, #12]
 8005a0a:	f000 f805 	bl	8005a18 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8005a0e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8005a10:	4618      	mov	r0, r3
 8005a12:	3730      	adds	r7, #48	; 0x30
 8005a14:	46bd      	mov	sp, r7
 8005a16:	bd80      	pop	{r7, pc}

08005a18 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8005a18:	b580      	push	{r7, lr}
 8005a1a:	b084      	sub	sp, #16
 8005a1c:	af00      	add	r7, sp, #0
 8005a1e:	60f8      	str	r0, [r7, #12]
 8005a20:	60b9      	str	r1, [r7, #8]
 8005a22:	607a      	str	r2, [r7, #4]
 8005a24:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8005a26:	68bb      	ldr	r3, [r7, #8]
 8005a28:	2b00      	cmp	r3, #0
 8005a2a:	d103      	bne.n	8005a34 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8005a2c:	69bb      	ldr	r3, [r7, #24]
 8005a2e:	69ba      	ldr	r2, [r7, #24]
 8005a30:	601a      	str	r2, [r3, #0]
 8005a32:	e002      	b.n	8005a3a <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8005a34:	69bb      	ldr	r3, [r7, #24]
 8005a36:	687a      	ldr	r2, [r7, #4]
 8005a38:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8005a3a:	69bb      	ldr	r3, [r7, #24]
 8005a3c:	68fa      	ldr	r2, [r7, #12]
 8005a3e:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8005a40:	69bb      	ldr	r3, [r7, #24]
 8005a42:	68ba      	ldr	r2, [r7, #8]
 8005a44:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8005a46:	2101      	movs	r1, #1
 8005a48:	69b8      	ldr	r0, [r7, #24]
 8005a4a:	f7ff ff05 	bl	8005858 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8005a4e:	69bb      	ldr	r3, [r7, #24]
 8005a50:	78fa      	ldrb	r2, [r7, #3]
 8005a52:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8005a56:	bf00      	nop
 8005a58:	3710      	adds	r7, #16
 8005a5a:	46bd      	mov	sp, r7
 8005a5c:	bd80      	pop	{r7, pc}
	...

08005a60 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8005a60:	b580      	push	{r7, lr}
 8005a62:	b08e      	sub	sp, #56	; 0x38
 8005a64:	af00      	add	r7, sp, #0
 8005a66:	60f8      	str	r0, [r7, #12]
 8005a68:	60b9      	str	r1, [r7, #8]
 8005a6a:	607a      	str	r2, [r7, #4]
 8005a6c:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8005a6e:	2300      	movs	r3, #0
 8005a70:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8005a72:	68fb      	ldr	r3, [r7, #12]
 8005a74:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8005a76:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a78:	2b00      	cmp	r3, #0
 8005a7a:	d10a      	bne.n	8005a92 <xQueueGenericSend+0x32>
	__asm volatile
 8005a7c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005a80:	f383 8811 	msr	BASEPRI, r3
 8005a84:	f3bf 8f6f 	isb	sy
 8005a88:	f3bf 8f4f 	dsb	sy
 8005a8c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8005a8e:	bf00      	nop
 8005a90:	e7fe      	b.n	8005a90 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005a92:	68bb      	ldr	r3, [r7, #8]
 8005a94:	2b00      	cmp	r3, #0
 8005a96:	d103      	bne.n	8005aa0 <xQueueGenericSend+0x40>
 8005a98:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a9a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a9c:	2b00      	cmp	r3, #0
 8005a9e:	d101      	bne.n	8005aa4 <xQueueGenericSend+0x44>
 8005aa0:	2301      	movs	r3, #1
 8005aa2:	e000      	b.n	8005aa6 <xQueueGenericSend+0x46>
 8005aa4:	2300      	movs	r3, #0
 8005aa6:	2b00      	cmp	r3, #0
 8005aa8:	d10a      	bne.n	8005ac0 <xQueueGenericSend+0x60>
	__asm volatile
 8005aaa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005aae:	f383 8811 	msr	BASEPRI, r3
 8005ab2:	f3bf 8f6f 	isb	sy
 8005ab6:	f3bf 8f4f 	dsb	sy
 8005aba:	627b      	str	r3, [r7, #36]	; 0x24
}
 8005abc:	bf00      	nop
 8005abe:	e7fe      	b.n	8005abe <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8005ac0:	683b      	ldr	r3, [r7, #0]
 8005ac2:	2b02      	cmp	r3, #2
 8005ac4:	d103      	bne.n	8005ace <xQueueGenericSend+0x6e>
 8005ac6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005ac8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005aca:	2b01      	cmp	r3, #1
 8005acc:	d101      	bne.n	8005ad2 <xQueueGenericSend+0x72>
 8005ace:	2301      	movs	r3, #1
 8005ad0:	e000      	b.n	8005ad4 <xQueueGenericSend+0x74>
 8005ad2:	2300      	movs	r3, #0
 8005ad4:	2b00      	cmp	r3, #0
 8005ad6:	d10a      	bne.n	8005aee <xQueueGenericSend+0x8e>
	__asm volatile
 8005ad8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005adc:	f383 8811 	msr	BASEPRI, r3
 8005ae0:	f3bf 8f6f 	isb	sy
 8005ae4:	f3bf 8f4f 	dsb	sy
 8005ae8:	623b      	str	r3, [r7, #32]
}
 8005aea:	bf00      	nop
 8005aec:	e7fe      	b.n	8005aec <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8005aee:	f001 f9e7 	bl	8006ec0 <xTaskGetSchedulerState>
 8005af2:	4603      	mov	r3, r0
 8005af4:	2b00      	cmp	r3, #0
 8005af6:	d102      	bne.n	8005afe <xQueueGenericSend+0x9e>
 8005af8:	687b      	ldr	r3, [r7, #4]
 8005afa:	2b00      	cmp	r3, #0
 8005afc:	d101      	bne.n	8005b02 <xQueueGenericSend+0xa2>
 8005afe:	2301      	movs	r3, #1
 8005b00:	e000      	b.n	8005b04 <xQueueGenericSend+0xa4>
 8005b02:	2300      	movs	r3, #0
 8005b04:	2b00      	cmp	r3, #0
 8005b06:	d10a      	bne.n	8005b1e <xQueueGenericSend+0xbe>
	__asm volatile
 8005b08:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005b0c:	f383 8811 	msr	BASEPRI, r3
 8005b10:	f3bf 8f6f 	isb	sy
 8005b14:	f3bf 8f4f 	dsb	sy
 8005b18:	61fb      	str	r3, [r7, #28]
}
 8005b1a:	bf00      	nop
 8005b1c:	e7fe      	b.n	8005b1c <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8005b1e:	f001 ff29 	bl	8007974 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8005b22:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005b24:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005b26:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005b28:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005b2a:	429a      	cmp	r2, r3
 8005b2c:	d302      	bcc.n	8005b34 <xQueueGenericSend+0xd4>
 8005b2e:	683b      	ldr	r3, [r7, #0]
 8005b30:	2b02      	cmp	r3, #2
 8005b32:	d129      	bne.n	8005b88 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8005b34:	683a      	ldr	r2, [r7, #0]
 8005b36:	68b9      	ldr	r1, [r7, #8]
 8005b38:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005b3a:	f000 fa0b 	bl	8005f54 <prvCopyDataToQueue>
 8005b3e:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005b40:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005b42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b44:	2b00      	cmp	r3, #0
 8005b46:	d010      	beq.n	8005b6a <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005b48:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005b4a:	3324      	adds	r3, #36	; 0x24
 8005b4c:	4618      	mov	r0, r3
 8005b4e:	f000 fff5 	bl	8006b3c <xTaskRemoveFromEventList>
 8005b52:	4603      	mov	r3, r0
 8005b54:	2b00      	cmp	r3, #0
 8005b56:	d013      	beq.n	8005b80 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8005b58:	4b3f      	ldr	r3, [pc, #252]	; (8005c58 <xQueueGenericSend+0x1f8>)
 8005b5a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005b5e:	601a      	str	r2, [r3, #0]
 8005b60:	f3bf 8f4f 	dsb	sy
 8005b64:	f3bf 8f6f 	isb	sy
 8005b68:	e00a      	b.n	8005b80 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8005b6a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005b6c:	2b00      	cmp	r3, #0
 8005b6e:	d007      	beq.n	8005b80 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8005b70:	4b39      	ldr	r3, [pc, #228]	; (8005c58 <xQueueGenericSend+0x1f8>)
 8005b72:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005b76:	601a      	str	r2, [r3, #0]
 8005b78:	f3bf 8f4f 	dsb	sy
 8005b7c:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8005b80:	f001 ff28 	bl	80079d4 <vPortExitCritical>
				return pdPASS;
 8005b84:	2301      	movs	r3, #1
 8005b86:	e063      	b.n	8005c50 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8005b88:	687b      	ldr	r3, [r7, #4]
 8005b8a:	2b00      	cmp	r3, #0
 8005b8c:	d103      	bne.n	8005b96 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8005b8e:	f001 ff21 	bl	80079d4 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8005b92:	2300      	movs	r3, #0
 8005b94:	e05c      	b.n	8005c50 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8005b96:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005b98:	2b00      	cmp	r3, #0
 8005b9a:	d106      	bne.n	8005baa <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8005b9c:	f107 0314 	add.w	r3, r7, #20
 8005ba0:	4618      	mov	r0, r3
 8005ba2:	f001 f82f 	bl	8006c04 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8005ba6:	2301      	movs	r3, #1
 8005ba8:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8005baa:	f001 ff13 	bl	80079d4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8005bae:	f000 fd9b 	bl	80066e8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8005bb2:	f001 fedf 	bl	8007974 <vPortEnterCritical>
 8005bb6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005bb8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005bbc:	b25b      	sxtb	r3, r3
 8005bbe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005bc2:	d103      	bne.n	8005bcc <xQueueGenericSend+0x16c>
 8005bc4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005bc6:	2200      	movs	r2, #0
 8005bc8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005bcc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005bce:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005bd2:	b25b      	sxtb	r3, r3
 8005bd4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005bd8:	d103      	bne.n	8005be2 <xQueueGenericSend+0x182>
 8005bda:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005bdc:	2200      	movs	r2, #0
 8005bde:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005be2:	f001 fef7 	bl	80079d4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8005be6:	1d3a      	adds	r2, r7, #4
 8005be8:	f107 0314 	add.w	r3, r7, #20
 8005bec:	4611      	mov	r1, r2
 8005bee:	4618      	mov	r0, r3
 8005bf0:	f001 f81e 	bl	8006c30 <xTaskCheckForTimeOut>
 8005bf4:	4603      	mov	r3, r0
 8005bf6:	2b00      	cmp	r3, #0
 8005bf8:	d124      	bne.n	8005c44 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8005bfa:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005bfc:	f000 faa2 	bl	8006144 <prvIsQueueFull>
 8005c00:	4603      	mov	r3, r0
 8005c02:	2b00      	cmp	r3, #0
 8005c04:	d018      	beq.n	8005c38 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8005c06:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005c08:	3310      	adds	r3, #16
 8005c0a:	687a      	ldr	r2, [r7, #4]
 8005c0c:	4611      	mov	r1, r2
 8005c0e:	4618      	mov	r0, r3
 8005c10:	f000 ff44 	bl	8006a9c <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8005c14:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005c16:	f000 fa2d 	bl	8006074 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8005c1a:	f000 fd73 	bl	8006704 <xTaskResumeAll>
 8005c1e:	4603      	mov	r3, r0
 8005c20:	2b00      	cmp	r3, #0
 8005c22:	f47f af7c 	bne.w	8005b1e <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8005c26:	4b0c      	ldr	r3, [pc, #48]	; (8005c58 <xQueueGenericSend+0x1f8>)
 8005c28:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005c2c:	601a      	str	r2, [r3, #0]
 8005c2e:	f3bf 8f4f 	dsb	sy
 8005c32:	f3bf 8f6f 	isb	sy
 8005c36:	e772      	b.n	8005b1e <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8005c38:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005c3a:	f000 fa1b 	bl	8006074 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8005c3e:	f000 fd61 	bl	8006704 <xTaskResumeAll>
 8005c42:	e76c      	b.n	8005b1e <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8005c44:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005c46:	f000 fa15 	bl	8006074 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8005c4a:	f000 fd5b 	bl	8006704 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8005c4e:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8005c50:	4618      	mov	r0, r3
 8005c52:	3738      	adds	r7, #56	; 0x38
 8005c54:	46bd      	mov	sp, r7
 8005c56:	bd80      	pop	{r7, pc}
 8005c58:	e000ed04 	.word	0xe000ed04

08005c5c <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8005c5c:	b580      	push	{r7, lr}
 8005c5e:	b090      	sub	sp, #64	; 0x40
 8005c60:	af00      	add	r7, sp, #0
 8005c62:	60f8      	str	r0, [r7, #12]
 8005c64:	60b9      	str	r1, [r7, #8]
 8005c66:	607a      	str	r2, [r7, #4]
 8005c68:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8005c6a:	68fb      	ldr	r3, [r7, #12]
 8005c6c:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 8005c6e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005c70:	2b00      	cmp	r3, #0
 8005c72:	d10a      	bne.n	8005c8a <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8005c74:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005c78:	f383 8811 	msr	BASEPRI, r3
 8005c7c:	f3bf 8f6f 	isb	sy
 8005c80:	f3bf 8f4f 	dsb	sy
 8005c84:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8005c86:	bf00      	nop
 8005c88:	e7fe      	b.n	8005c88 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005c8a:	68bb      	ldr	r3, [r7, #8]
 8005c8c:	2b00      	cmp	r3, #0
 8005c8e:	d103      	bne.n	8005c98 <xQueueGenericSendFromISR+0x3c>
 8005c90:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005c92:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c94:	2b00      	cmp	r3, #0
 8005c96:	d101      	bne.n	8005c9c <xQueueGenericSendFromISR+0x40>
 8005c98:	2301      	movs	r3, #1
 8005c9a:	e000      	b.n	8005c9e <xQueueGenericSendFromISR+0x42>
 8005c9c:	2300      	movs	r3, #0
 8005c9e:	2b00      	cmp	r3, #0
 8005ca0:	d10a      	bne.n	8005cb8 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 8005ca2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005ca6:	f383 8811 	msr	BASEPRI, r3
 8005caa:	f3bf 8f6f 	isb	sy
 8005cae:	f3bf 8f4f 	dsb	sy
 8005cb2:	627b      	str	r3, [r7, #36]	; 0x24
}
 8005cb4:	bf00      	nop
 8005cb6:	e7fe      	b.n	8005cb6 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8005cb8:	683b      	ldr	r3, [r7, #0]
 8005cba:	2b02      	cmp	r3, #2
 8005cbc:	d103      	bne.n	8005cc6 <xQueueGenericSendFromISR+0x6a>
 8005cbe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005cc0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005cc2:	2b01      	cmp	r3, #1
 8005cc4:	d101      	bne.n	8005cca <xQueueGenericSendFromISR+0x6e>
 8005cc6:	2301      	movs	r3, #1
 8005cc8:	e000      	b.n	8005ccc <xQueueGenericSendFromISR+0x70>
 8005cca:	2300      	movs	r3, #0
 8005ccc:	2b00      	cmp	r3, #0
 8005cce:	d10a      	bne.n	8005ce6 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8005cd0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005cd4:	f383 8811 	msr	BASEPRI, r3
 8005cd8:	f3bf 8f6f 	isb	sy
 8005cdc:	f3bf 8f4f 	dsb	sy
 8005ce0:	623b      	str	r3, [r7, #32]
}
 8005ce2:	bf00      	nop
 8005ce4:	e7fe      	b.n	8005ce4 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8005ce6:	f001 ff27 	bl	8007b38 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8005cea:	f3ef 8211 	mrs	r2, BASEPRI
 8005cee:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005cf2:	f383 8811 	msr	BASEPRI, r3
 8005cf6:	f3bf 8f6f 	isb	sy
 8005cfa:	f3bf 8f4f 	dsb	sy
 8005cfe:	61fa      	str	r2, [r7, #28]
 8005d00:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8005d02:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8005d04:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8005d06:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005d08:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005d0a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005d0c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005d0e:	429a      	cmp	r2, r3
 8005d10:	d302      	bcc.n	8005d18 <xQueueGenericSendFromISR+0xbc>
 8005d12:	683b      	ldr	r3, [r7, #0]
 8005d14:	2b02      	cmp	r3, #2
 8005d16:	d12f      	bne.n	8005d78 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8005d18:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005d1a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005d1e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005d22:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005d24:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005d26:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8005d28:	683a      	ldr	r2, [r7, #0]
 8005d2a:	68b9      	ldr	r1, [r7, #8]
 8005d2c:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8005d2e:	f000 f911 	bl	8005f54 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8005d32:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8005d36:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005d3a:	d112      	bne.n	8005d62 <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005d3c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005d3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d40:	2b00      	cmp	r3, #0
 8005d42:	d016      	beq.n	8005d72 <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005d44:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005d46:	3324      	adds	r3, #36	; 0x24
 8005d48:	4618      	mov	r0, r3
 8005d4a:	f000 fef7 	bl	8006b3c <xTaskRemoveFromEventList>
 8005d4e:	4603      	mov	r3, r0
 8005d50:	2b00      	cmp	r3, #0
 8005d52:	d00e      	beq.n	8005d72 <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8005d54:	687b      	ldr	r3, [r7, #4]
 8005d56:	2b00      	cmp	r3, #0
 8005d58:	d00b      	beq.n	8005d72 <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8005d5a:	687b      	ldr	r3, [r7, #4]
 8005d5c:	2201      	movs	r2, #1
 8005d5e:	601a      	str	r2, [r3, #0]
 8005d60:	e007      	b.n	8005d72 <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8005d62:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8005d66:	3301      	adds	r3, #1
 8005d68:	b2db      	uxtb	r3, r3
 8005d6a:	b25a      	sxtb	r2, r3
 8005d6c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005d6e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8005d72:	2301      	movs	r3, #1
 8005d74:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 8005d76:	e001      	b.n	8005d7c <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8005d78:	2300      	movs	r3, #0
 8005d7a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005d7c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005d7e:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8005d80:	697b      	ldr	r3, [r7, #20]
 8005d82:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8005d86:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8005d88:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8005d8a:	4618      	mov	r0, r3
 8005d8c:	3740      	adds	r7, #64	; 0x40
 8005d8e:	46bd      	mov	sp, r7
 8005d90:	bd80      	pop	{r7, pc}
	...

08005d94 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8005d94:	b580      	push	{r7, lr}
 8005d96:	b08c      	sub	sp, #48	; 0x30
 8005d98:	af00      	add	r7, sp, #0
 8005d9a:	60f8      	str	r0, [r7, #12]
 8005d9c:	60b9      	str	r1, [r7, #8]
 8005d9e:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8005da0:	2300      	movs	r3, #0
 8005da2:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8005da4:	68fb      	ldr	r3, [r7, #12]
 8005da6:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8005da8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005daa:	2b00      	cmp	r3, #0
 8005dac:	d10a      	bne.n	8005dc4 <xQueueReceive+0x30>
	__asm volatile
 8005dae:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005db2:	f383 8811 	msr	BASEPRI, r3
 8005db6:	f3bf 8f6f 	isb	sy
 8005dba:	f3bf 8f4f 	dsb	sy
 8005dbe:	623b      	str	r3, [r7, #32]
}
 8005dc0:	bf00      	nop
 8005dc2:	e7fe      	b.n	8005dc2 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005dc4:	68bb      	ldr	r3, [r7, #8]
 8005dc6:	2b00      	cmp	r3, #0
 8005dc8:	d103      	bne.n	8005dd2 <xQueueReceive+0x3e>
 8005dca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005dcc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005dce:	2b00      	cmp	r3, #0
 8005dd0:	d101      	bne.n	8005dd6 <xQueueReceive+0x42>
 8005dd2:	2301      	movs	r3, #1
 8005dd4:	e000      	b.n	8005dd8 <xQueueReceive+0x44>
 8005dd6:	2300      	movs	r3, #0
 8005dd8:	2b00      	cmp	r3, #0
 8005dda:	d10a      	bne.n	8005df2 <xQueueReceive+0x5e>
	__asm volatile
 8005ddc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005de0:	f383 8811 	msr	BASEPRI, r3
 8005de4:	f3bf 8f6f 	isb	sy
 8005de8:	f3bf 8f4f 	dsb	sy
 8005dec:	61fb      	str	r3, [r7, #28]
}
 8005dee:	bf00      	nop
 8005df0:	e7fe      	b.n	8005df0 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8005df2:	f001 f865 	bl	8006ec0 <xTaskGetSchedulerState>
 8005df6:	4603      	mov	r3, r0
 8005df8:	2b00      	cmp	r3, #0
 8005dfa:	d102      	bne.n	8005e02 <xQueueReceive+0x6e>
 8005dfc:	687b      	ldr	r3, [r7, #4]
 8005dfe:	2b00      	cmp	r3, #0
 8005e00:	d101      	bne.n	8005e06 <xQueueReceive+0x72>
 8005e02:	2301      	movs	r3, #1
 8005e04:	e000      	b.n	8005e08 <xQueueReceive+0x74>
 8005e06:	2300      	movs	r3, #0
 8005e08:	2b00      	cmp	r3, #0
 8005e0a:	d10a      	bne.n	8005e22 <xQueueReceive+0x8e>
	__asm volatile
 8005e0c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005e10:	f383 8811 	msr	BASEPRI, r3
 8005e14:	f3bf 8f6f 	isb	sy
 8005e18:	f3bf 8f4f 	dsb	sy
 8005e1c:	61bb      	str	r3, [r7, #24]
}
 8005e1e:	bf00      	nop
 8005e20:	e7fe      	b.n	8005e20 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8005e22:	f001 fda7 	bl	8007974 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005e26:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005e28:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005e2a:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8005e2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e2e:	2b00      	cmp	r3, #0
 8005e30:	d01f      	beq.n	8005e72 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8005e32:	68b9      	ldr	r1, [r7, #8]
 8005e34:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005e36:	f000 f8f7 	bl	8006028 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8005e3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e3c:	1e5a      	subs	r2, r3, #1
 8005e3e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005e40:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005e42:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005e44:	691b      	ldr	r3, [r3, #16]
 8005e46:	2b00      	cmp	r3, #0
 8005e48:	d00f      	beq.n	8005e6a <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005e4a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005e4c:	3310      	adds	r3, #16
 8005e4e:	4618      	mov	r0, r3
 8005e50:	f000 fe74 	bl	8006b3c <xTaskRemoveFromEventList>
 8005e54:	4603      	mov	r3, r0
 8005e56:	2b00      	cmp	r3, #0
 8005e58:	d007      	beq.n	8005e6a <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8005e5a:	4b3d      	ldr	r3, [pc, #244]	; (8005f50 <xQueueReceive+0x1bc>)
 8005e5c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005e60:	601a      	str	r2, [r3, #0]
 8005e62:	f3bf 8f4f 	dsb	sy
 8005e66:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8005e6a:	f001 fdb3 	bl	80079d4 <vPortExitCritical>
				return pdPASS;
 8005e6e:	2301      	movs	r3, #1
 8005e70:	e069      	b.n	8005f46 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8005e72:	687b      	ldr	r3, [r7, #4]
 8005e74:	2b00      	cmp	r3, #0
 8005e76:	d103      	bne.n	8005e80 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8005e78:	f001 fdac 	bl	80079d4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8005e7c:	2300      	movs	r3, #0
 8005e7e:	e062      	b.n	8005f46 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8005e80:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005e82:	2b00      	cmp	r3, #0
 8005e84:	d106      	bne.n	8005e94 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8005e86:	f107 0310 	add.w	r3, r7, #16
 8005e8a:	4618      	mov	r0, r3
 8005e8c:	f000 feba 	bl	8006c04 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8005e90:	2301      	movs	r3, #1
 8005e92:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8005e94:	f001 fd9e 	bl	80079d4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8005e98:	f000 fc26 	bl	80066e8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8005e9c:	f001 fd6a 	bl	8007974 <vPortEnterCritical>
 8005ea0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005ea2:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005ea6:	b25b      	sxtb	r3, r3
 8005ea8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005eac:	d103      	bne.n	8005eb6 <xQueueReceive+0x122>
 8005eae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005eb0:	2200      	movs	r2, #0
 8005eb2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005eb6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005eb8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005ebc:	b25b      	sxtb	r3, r3
 8005ebe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005ec2:	d103      	bne.n	8005ecc <xQueueReceive+0x138>
 8005ec4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005ec6:	2200      	movs	r2, #0
 8005ec8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005ecc:	f001 fd82 	bl	80079d4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8005ed0:	1d3a      	adds	r2, r7, #4
 8005ed2:	f107 0310 	add.w	r3, r7, #16
 8005ed6:	4611      	mov	r1, r2
 8005ed8:	4618      	mov	r0, r3
 8005eda:	f000 fea9 	bl	8006c30 <xTaskCheckForTimeOut>
 8005ede:	4603      	mov	r3, r0
 8005ee0:	2b00      	cmp	r3, #0
 8005ee2:	d123      	bne.n	8005f2c <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8005ee4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005ee6:	f000 f917 	bl	8006118 <prvIsQueueEmpty>
 8005eea:	4603      	mov	r3, r0
 8005eec:	2b00      	cmp	r3, #0
 8005eee:	d017      	beq.n	8005f20 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8005ef0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005ef2:	3324      	adds	r3, #36	; 0x24
 8005ef4:	687a      	ldr	r2, [r7, #4]
 8005ef6:	4611      	mov	r1, r2
 8005ef8:	4618      	mov	r0, r3
 8005efa:	f000 fdcf 	bl	8006a9c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8005efe:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005f00:	f000 f8b8 	bl	8006074 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8005f04:	f000 fbfe 	bl	8006704 <xTaskResumeAll>
 8005f08:	4603      	mov	r3, r0
 8005f0a:	2b00      	cmp	r3, #0
 8005f0c:	d189      	bne.n	8005e22 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 8005f0e:	4b10      	ldr	r3, [pc, #64]	; (8005f50 <xQueueReceive+0x1bc>)
 8005f10:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005f14:	601a      	str	r2, [r3, #0]
 8005f16:	f3bf 8f4f 	dsb	sy
 8005f1a:	f3bf 8f6f 	isb	sy
 8005f1e:	e780      	b.n	8005e22 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8005f20:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005f22:	f000 f8a7 	bl	8006074 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8005f26:	f000 fbed 	bl	8006704 <xTaskResumeAll>
 8005f2a:	e77a      	b.n	8005e22 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8005f2c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005f2e:	f000 f8a1 	bl	8006074 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8005f32:	f000 fbe7 	bl	8006704 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8005f36:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005f38:	f000 f8ee 	bl	8006118 <prvIsQueueEmpty>
 8005f3c:	4603      	mov	r3, r0
 8005f3e:	2b00      	cmp	r3, #0
 8005f40:	f43f af6f 	beq.w	8005e22 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8005f44:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8005f46:	4618      	mov	r0, r3
 8005f48:	3730      	adds	r7, #48	; 0x30
 8005f4a:	46bd      	mov	sp, r7
 8005f4c:	bd80      	pop	{r7, pc}
 8005f4e:	bf00      	nop
 8005f50:	e000ed04 	.word	0xe000ed04

08005f54 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8005f54:	b580      	push	{r7, lr}
 8005f56:	b086      	sub	sp, #24
 8005f58:	af00      	add	r7, sp, #0
 8005f5a:	60f8      	str	r0, [r7, #12]
 8005f5c:	60b9      	str	r1, [r7, #8]
 8005f5e:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8005f60:	2300      	movs	r3, #0
 8005f62:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005f64:	68fb      	ldr	r3, [r7, #12]
 8005f66:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005f68:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8005f6a:	68fb      	ldr	r3, [r7, #12]
 8005f6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f6e:	2b00      	cmp	r3, #0
 8005f70:	d10d      	bne.n	8005f8e <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8005f72:	68fb      	ldr	r3, [r7, #12]
 8005f74:	681b      	ldr	r3, [r3, #0]
 8005f76:	2b00      	cmp	r3, #0
 8005f78:	d14d      	bne.n	8006016 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8005f7a:	68fb      	ldr	r3, [r7, #12]
 8005f7c:	689b      	ldr	r3, [r3, #8]
 8005f7e:	4618      	mov	r0, r3
 8005f80:	f000 ffbc 	bl	8006efc <xTaskPriorityDisinherit>
 8005f84:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8005f86:	68fb      	ldr	r3, [r7, #12]
 8005f88:	2200      	movs	r2, #0
 8005f8a:	609a      	str	r2, [r3, #8]
 8005f8c:	e043      	b.n	8006016 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8005f8e:	687b      	ldr	r3, [r7, #4]
 8005f90:	2b00      	cmp	r3, #0
 8005f92:	d119      	bne.n	8005fc8 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8005f94:	68fb      	ldr	r3, [r7, #12]
 8005f96:	6858      	ldr	r0, [r3, #4]
 8005f98:	68fb      	ldr	r3, [r7, #12]
 8005f9a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f9c:	461a      	mov	r2, r3
 8005f9e:	68b9      	ldr	r1, [r7, #8]
 8005fa0:	f002 f917 	bl	80081d2 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8005fa4:	68fb      	ldr	r3, [r7, #12]
 8005fa6:	685a      	ldr	r2, [r3, #4]
 8005fa8:	68fb      	ldr	r3, [r7, #12]
 8005faa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005fac:	441a      	add	r2, r3
 8005fae:	68fb      	ldr	r3, [r7, #12]
 8005fb0:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8005fb2:	68fb      	ldr	r3, [r7, #12]
 8005fb4:	685a      	ldr	r2, [r3, #4]
 8005fb6:	68fb      	ldr	r3, [r7, #12]
 8005fb8:	689b      	ldr	r3, [r3, #8]
 8005fba:	429a      	cmp	r2, r3
 8005fbc:	d32b      	bcc.n	8006016 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8005fbe:	68fb      	ldr	r3, [r7, #12]
 8005fc0:	681a      	ldr	r2, [r3, #0]
 8005fc2:	68fb      	ldr	r3, [r7, #12]
 8005fc4:	605a      	str	r2, [r3, #4]
 8005fc6:	e026      	b.n	8006016 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8005fc8:	68fb      	ldr	r3, [r7, #12]
 8005fca:	68d8      	ldr	r0, [r3, #12]
 8005fcc:	68fb      	ldr	r3, [r7, #12]
 8005fce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005fd0:	461a      	mov	r2, r3
 8005fd2:	68b9      	ldr	r1, [r7, #8]
 8005fd4:	f002 f8fd 	bl	80081d2 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8005fd8:	68fb      	ldr	r3, [r7, #12]
 8005fda:	68da      	ldr	r2, [r3, #12]
 8005fdc:	68fb      	ldr	r3, [r7, #12]
 8005fde:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005fe0:	425b      	negs	r3, r3
 8005fe2:	441a      	add	r2, r3
 8005fe4:	68fb      	ldr	r3, [r7, #12]
 8005fe6:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8005fe8:	68fb      	ldr	r3, [r7, #12]
 8005fea:	68da      	ldr	r2, [r3, #12]
 8005fec:	68fb      	ldr	r3, [r7, #12]
 8005fee:	681b      	ldr	r3, [r3, #0]
 8005ff0:	429a      	cmp	r2, r3
 8005ff2:	d207      	bcs.n	8006004 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8005ff4:	68fb      	ldr	r3, [r7, #12]
 8005ff6:	689a      	ldr	r2, [r3, #8]
 8005ff8:	68fb      	ldr	r3, [r7, #12]
 8005ffa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ffc:	425b      	negs	r3, r3
 8005ffe:	441a      	add	r2, r3
 8006000:	68fb      	ldr	r3, [r7, #12]
 8006002:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8006004:	687b      	ldr	r3, [r7, #4]
 8006006:	2b02      	cmp	r3, #2
 8006008:	d105      	bne.n	8006016 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800600a:	693b      	ldr	r3, [r7, #16]
 800600c:	2b00      	cmp	r3, #0
 800600e:	d002      	beq.n	8006016 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8006010:	693b      	ldr	r3, [r7, #16]
 8006012:	3b01      	subs	r3, #1
 8006014:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8006016:	693b      	ldr	r3, [r7, #16]
 8006018:	1c5a      	adds	r2, r3, #1
 800601a:	68fb      	ldr	r3, [r7, #12]
 800601c:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800601e:	697b      	ldr	r3, [r7, #20]
}
 8006020:	4618      	mov	r0, r3
 8006022:	3718      	adds	r7, #24
 8006024:	46bd      	mov	sp, r7
 8006026:	bd80      	pop	{r7, pc}

08006028 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8006028:	b580      	push	{r7, lr}
 800602a:	b082      	sub	sp, #8
 800602c:	af00      	add	r7, sp, #0
 800602e:	6078      	str	r0, [r7, #4]
 8006030:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8006032:	687b      	ldr	r3, [r7, #4]
 8006034:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006036:	2b00      	cmp	r3, #0
 8006038:	d018      	beq.n	800606c <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800603a:	687b      	ldr	r3, [r7, #4]
 800603c:	68da      	ldr	r2, [r3, #12]
 800603e:	687b      	ldr	r3, [r7, #4]
 8006040:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006042:	441a      	add	r2, r3
 8006044:	687b      	ldr	r3, [r7, #4]
 8006046:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8006048:	687b      	ldr	r3, [r7, #4]
 800604a:	68da      	ldr	r2, [r3, #12]
 800604c:	687b      	ldr	r3, [r7, #4]
 800604e:	689b      	ldr	r3, [r3, #8]
 8006050:	429a      	cmp	r2, r3
 8006052:	d303      	bcc.n	800605c <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8006054:	687b      	ldr	r3, [r7, #4]
 8006056:	681a      	ldr	r2, [r3, #0]
 8006058:	687b      	ldr	r3, [r7, #4]
 800605a:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800605c:	687b      	ldr	r3, [r7, #4]
 800605e:	68d9      	ldr	r1, [r3, #12]
 8006060:	687b      	ldr	r3, [r7, #4]
 8006062:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006064:	461a      	mov	r2, r3
 8006066:	6838      	ldr	r0, [r7, #0]
 8006068:	f002 f8b3 	bl	80081d2 <memcpy>
	}
}
 800606c:	bf00      	nop
 800606e:	3708      	adds	r7, #8
 8006070:	46bd      	mov	sp, r7
 8006072:	bd80      	pop	{r7, pc}

08006074 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8006074:	b580      	push	{r7, lr}
 8006076:	b084      	sub	sp, #16
 8006078:	af00      	add	r7, sp, #0
 800607a:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800607c:	f001 fc7a 	bl	8007974 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8006080:	687b      	ldr	r3, [r7, #4]
 8006082:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006086:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8006088:	e011      	b.n	80060ae <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800608a:	687b      	ldr	r3, [r7, #4]
 800608c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800608e:	2b00      	cmp	r3, #0
 8006090:	d012      	beq.n	80060b8 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006092:	687b      	ldr	r3, [r7, #4]
 8006094:	3324      	adds	r3, #36	; 0x24
 8006096:	4618      	mov	r0, r3
 8006098:	f000 fd50 	bl	8006b3c <xTaskRemoveFromEventList>
 800609c:	4603      	mov	r3, r0
 800609e:	2b00      	cmp	r3, #0
 80060a0:	d001      	beq.n	80060a6 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 80060a2:	f000 fe27 	bl	8006cf4 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 80060a6:	7bfb      	ldrb	r3, [r7, #15]
 80060a8:	3b01      	subs	r3, #1
 80060aa:	b2db      	uxtb	r3, r3
 80060ac:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80060ae:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80060b2:	2b00      	cmp	r3, #0
 80060b4:	dce9      	bgt.n	800608a <prvUnlockQueue+0x16>
 80060b6:	e000      	b.n	80060ba <prvUnlockQueue+0x46>
					break;
 80060b8:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 80060ba:	687b      	ldr	r3, [r7, #4]
 80060bc:	22ff      	movs	r2, #255	; 0xff
 80060be:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 80060c2:	f001 fc87 	bl	80079d4 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 80060c6:	f001 fc55 	bl	8007974 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 80060ca:	687b      	ldr	r3, [r7, #4]
 80060cc:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80060d0:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 80060d2:	e011      	b.n	80060f8 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80060d4:	687b      	ldr	r3, [r7, #4]
 80060d6:	691b      	ldr	r3, [r3, #16]
 80060d8:	2b00      	cmp	r3, #0
 80060da:	d012      	beq.n	8006102 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80060dc:	687b      	ldr	r3, [r7, #4]
 80060de:	3310      	adds	r3, #16
 80060e0:	4618      	mov	r0, r3
 80060e2:	f000 fd2b 	bl	8006b3c <xTaskRemoveFromEventList>
 80060e6:	4603      	mov	r3, r0
 80060e8:	2b00      	cmp	r3, #0
 80060ea:	d001      	beq.n	80060f0 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 80060ec:	f000 fe02 	bl	8006cf4 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 80060f0:	7bbb      	ldrb	r3, [r7, #14]
 80060f2:	3b01      	subs	r3, #1
 80060f4:	b2db      	uxtb	r3, r3
 80060f6:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80060f8:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80060fc:	2b00      	cmp	r3, #0
 80060fe:	dce9      	bgt.n	80060d4 <prvUnlockQueue+0x60>
 8006100:	e000      	b.n	8006104 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8006102:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8006104:	687b      	ldr	r3, [r7, #4]
 8006106:	22ff      	movs	r2, #255	; 0xff
 8006108:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800610c:	f001 fc62 	bl	80079d4 <vPortExitCritical>
}
 8006110:	bf00      	nop
 8006112:	3710      	adds	r7, #16
 8006114:	46bd      	mov	sp, r7
 8006116:	bd80      	pop	{r7, pc}

08006118 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8006118:	b580      	push	{r7, lr}
 800611a:	b084      	sub	sp, #16
 800611c:	af00      	add	r7, sp, #0
 800611e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8006120:	f001 fc28 	bl	8007974 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8006124:	687b      	ldr	r3, [r7, #4]
 8006126:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006128:	2b00      	cmp	r3, #0
 800612a:	d102      	bne.n	8006132 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800612c:	2301      	movs	r3, #1
 800612e:	60fb      	str	r3, [r7, #12]
 8006130:	e001      	b.n	8006136 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8006132:	2300      	movs	r3, #0
 8006134:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8006136:	f001 fc4d 	bl	80079d4 <vPortExitCritical>

	return xReturn;
 800613a:	68fb      	ldr	r3, [r7, #12]
}
 800613c:	4618      	mov	r0, r3
 800613e:	3710      	adds	r7, #16
 8006140:	46bd      	mov	sp, r7
 8006142:	bd80      	pop	{r7, pc}

08006144 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8006144:	b580      	push	{r7, lr}
 8006146:	b084      	sub	sp, #16
 8006148:	af00      	add	r7, sp, #0
 800614a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800614c:	f001 fc12 	bl	8007974 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8006150:	687b      	ldr	r3, [r7, #4]
 8006152:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006154:	687b      	ldr	r3, [r7, #4]
 8006156:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006158:	429a      	cmp	r2, r3
 800615a:	d102      	bne.n	8006162 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800615c:	2301      	movs	r3, #1
 800615e:	60fb      	str	r3, [r7, #12]
 8006160:	e001      	b.n	8006166 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8006162:	2300      	movs	r3, #0
 8006164:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8006166:	f001 fc35 	bl	80079d4 <vPortExitCritical>

	return xReturn;
 800616a:	68fb      	ldr	r3, [r7, #12]
}
 800616c:	4618      	mov	r0, r3
 800616e:	3710      	adds	r7, #16
 8006170:	46bd      	mov	sp, r7
 8006172:	bd80      	pop	{r7, pc}

08006174 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8006174:	b480      	push	{r7}
 8006176:	b085      	sub	sp, #20
 8006178:	af00      	add	r7, sp, #0
 800617a:	6078      	str	r0, [r7, #4]
 800617c:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800617e:	2300      	movs	r3, #0
 8006180:	60fb      	str	r3, [r7, #12]
 8006182:	e014      	b.n	80061ae <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8006184:	4a0f      	ldr	r2, [pc, #60]	; (80061c4 <vQueueAddToRegistry+0x50>)
 8006186:	68fb      	ldr	r3, [r7, #12]
 8006188:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800618c:	2b00      	cmp	r3, #0
 800618e:	d10b      	bne.n	80061a8 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8006190:	490c      	ldr	r1, [pc, #48]	; (80061c4 <vQueueAddToRegistry+0x50>)
 8006192:	68fb      	ldr	r3, [r7, #12]
 8006194:	683a      	ldr	r2, [r7, #0]
 8006196:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800619a:	4a0a      	ldr	r2, [pc, #40]	; (80061c4 <vQueueAddToRegistry+0x50>)
 800619c:	68fb      	ldr	r3, [r7, #12]
 800619e:	00db      	lsls	r3, r3, #3
 80061a0:	4413      	add	r3, r2
 80061a2:	687a      	ldr	r2, [r7, #4]
 80061a4:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 80061a6:	e006      	b.n	80061b6 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80061a8:	68fb      	ldr	r3, [r7, #12]
 80061aa:	3301      	adds	r3, #1
 80061ac:	60fb      	str	r3, [r7, #12]
 80061ae:	68fb      	ldr	r3, [r7, #12]
 80061b0:	2b07      	cmp	r3, #7
 80061b2:	d9e7      	bls.n	8006184 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 80061b4:	bf00      	nop
 80061b6:	bf00      	nop
 80061b8:	3714      	adds	r7, #20
 80061ba:	46bd      	mov	sp, r7
 80061bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061c0:	4770      	bx	lr
 80061c2:	bf00      	nop
 80061c4:	20000b68 	.word	0x20000b68

080061c8 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80061c8:	b580      	push	{r7, lr}
 80061ca:	b086      	sub	sp, #24
 80061cc:	af00      	add	r7, sp, #0
 80061ce:	60f8      	str	r0, [r7, #12]
 80061d0:	60b9      	str	r1, [r7, #8]
 80061d2:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 80061d4:	68fb      	ldr	r3, [r7, #12]
 80061d6:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 80061d8:	f001 fbcc 	bl	8007974 <vPortEnterCritical>
 80061dc:	697b      	ldr	r3, [r7, #20]
 80061de:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80061e2:	b25b      	sxtb	r3, r3
 80061e4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80061e8:	d103      	bne.n	80061f2 <vQueueWaitForMessageRestricted+0x2a>
 80061ea:	697b      	ldr	r3, [r7, #20]
 80061ec:	2200      	movs	r2, #0
 80061ee:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80061f2:	697b      	ldr	r3, [r7, #20]
 80061f4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80061f8:	b25b      	sxtb	r3, r3
 80061fa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80061fe:	d103      	bne.n	8006208 <vQueueWaitForMessageRestricted+0x40>
 8006200:	697b      	ldr	r3, [r7, #20]
 8006202:	2200      	movs	r2, #0
 8006204:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006208:	f001 fbe4 	bl	80079d4 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800620c:	697b      	ldr	r3, [r7, #20]
 800620e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006210:	2b00      	cmp	r3, #0
 8006212:	d106      	bne.n	8006222 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8006214:	697b      	ldr	r3, [r7, #20]
 8006216:	3324      	adds	r3, #36	; 0x24
 8006218:	687a      	ldr	r2, [r7, #4]
 800621a:	68b9      	ldr	r1, [r7, #8]
 800621c:	4618      	mov	r0, r3
 800621e:	f000 fc61 	bl	8006ae4 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8006222:	6978      	ldr	r0, [r7, #20]
 8006224:	f7ff ff26 	bl	8006074 <prvUnlockQueue>
	}
 8006228:	bf00      	nop
 800622a:	3718      	adds	r7, #24
 800622c:	46bd      	mov	sp, r7
 800622e:	bd80      	pop	{r7, pc}

08006230 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8006230:	b580      	push	{r7, lr}
 8006232:	b08e      	sub	sp, #56	; 0x38
 8006234:	af04      	add	r7, sp, #16
 8006236:	60f8      	str	r0, [r7, #12]
 8006238:	60b9      	str	r1, [r7, #8]
 800623a:	607a      	str	r2, [r7, #4]
 800623c:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800623e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006240:	2b00      	cmp	r3, #0
 8006242:	d10a      	bne.n	800625a <xTaskCreateStatic+0x2a>
	__asm volatile
 8006244:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006248:	f383 8811 	msr	BASEPRI, r3
 800624c:	f3bf 8f6f 	isb	sy
 8006250:	f3bf 8f4f 	dsb	sy
 8006254:	623b      	str	r3, [r7, #32]
}
 8006256:	bf00      	nop
 8006258:	e7fe      	b.n	8006258 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800625a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800625c:	2b00      	cmp	r3, #0
 800625e:	d10a      	bne.n	8006276 <xTaskCreateStatic+0x46>
	__asm volatile
 8006260:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006264:	f383 8811 	msr	BASEPRI, r3
 8006268:	f3bf 8f6f 	isb	sy
 800626c:	f3bf 8f4f 	dsb	sy
 8006270:	61fb      	str	r3, [r7, #28]
}
 8006272:	bf00      	nop
 8006274:	e7fe      	b.n	8006274 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8006276:	23bc      	movs	r3, #188	; 0xbc
 8006278:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800627a:	693b      	ldr	r3, [r7, #16]
 800627c:	2bbc      	cmp	r3, #188	; 0xbc
 800627e:	d00a      	beq.n	8006296 <xTaskCreateStatic+0x66>
	__asm volatile
 8006280:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006284:	f383 8811 	msr	BASEPRI, r3
 8006288:	f3bf 8f6f 	isb	sy
 800628c:	f3bf 8f4f 	dsb	sy
 8006290:	61bb      	str	r3, [r7, #24]
}
 8006292:	bf00      	nop
 8006294:	e7fe      	b.n	8006294 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8006296:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8006298:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800629a:	2b00      	cmp	r3, #0
 800629c:	d01e      	beq.n	80062dc <xTaskCreateStatic+0xac>
 800629e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80062a0:	2b00      	cmp	r3, #0
 80062a2:	d01b      	beq.n	80062dc <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80062a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80062a6:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80062a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80062aa:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80062ac:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80062ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80062b0:	2202      	movs	r2, #2
 80062b2:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80062b6:	2300      	movs	r3, #0
 80062b8:	9303      	str	r3, [sp, #12]
 80062ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80062bc:	9302      	str	r3, [sp, #8]
 80062be:	f107 0314 	add.w	r3, r7, #20
 80062c2:	9301      	str	r3, [sp, #4]
 80062c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80062c6:	9300      	str	r3, [sp, #0]
 80062c8:	683b      	ldr	r3, [r7, #0]
 80062ca:	687a      	ldr	r2, [r7, #4]
 80062cc:	68b9      	ldr	r1, [r7, #8]
 80062ce:	68f8      	ldr	r0, [r7, #12]
 80062d0:	f000 f850 	bl	8006374 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80062d4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80062d6:	f000 f8f3 	bl	80064c0 <prvAddNewTaskToReadyList>
 80062da:	e001      	b.n	80062e0 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 80062dc:	2300      	movs	r3, #0
 80062de:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 80062e0:	697b      	ldr	r3, [r7, #20]
	}
 80062e2:	4618      	mov	r0, r3
 80062e4:	3728      	adds	r7, #40	; 0x28
 80062e6:	46bd      	mov	sp, r7
 80062e8:	bd80      	pop	{r7, pc}

080062ea <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80062ea:	b580      	push	{r7, lr}
 80062ec:	b08c      	sub	sp, #48	; 0x30
 80062ee:	af04      	add	r7, sp, #16
 80062f0:	60f8      	str	r0, [r7, #12]
 80062f2:	60b9      	str	r1, [r7, #8]
 80062f4:	603b      	str	r3, [r7, #0]
 80062f6:	4613      	mov	r3, r2
 80062f8:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80062fa:	88fb      	ldrh	r3, [r7, #6]
 80062fc:	009b      	lsls	r3, r3, #2
 80062fe:	4618      	mov	r0, r3
 8006300:	f001 fc5a 	bl	8007bb8 <pvPortMalloc>
 8006304:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8006306:	697b      	ldr	r3, [r7, #20]
 8006308:	2b00      	cmp	r3, #0
 800630a:	d00e      	beq.n	800632a <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800630c:	20bc      	movs	r0, #188	; 0xbc
 800630e:	f001 fc53 	bl	8007bb8 <pvPortMalloc>
 8006312:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8006314:	69fb      	ldr	r3, [r7, #28]
 8006316:	2b00      	cmp	r3, #0
 8006318:	d003      	beq.n	8006322 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800631a:	69fb      	ldr	r3, [r7, #28]
 800631c:	697a      	ldr	r2, [r7, #20]
 800631e:	631a      	str	r2, [r3, #48]	; 0x30
 8006320:	e005      	b.n	800632e <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8006322:	6978      	ldr	r0, [r7, #20]
 8006324:	f001 fd14 	bl	8007d50 <vPortFree>
 8006328:	e001      	b.n	800632e <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800632a:	2300      	movs	r3, #0
 800632c:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800632e:	69fb      	ldr	r3, [r7, #28]
 8006330:	2b00      	cmp	r3, #0
 8006332:	d017      	beq.n	8006364 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8006334:	69fb      	ldr	r3, [r7, #28]
 8006336:	2200      	movs	r2, #0
 8006338:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800633c:	88fa      	ldrh	r2, [r7, #6]
 800633e:	2300      	movs	r3, #0
 8006340:	9303      	str	r3, [sp, #12]
 8006342:	69fb      	ldr	r3, [r7, #28]
 8006344:	9302      	str	r3, [sp, #8]
 8006346:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006348:	9301      	str	r3, [sp, #4]
 800634a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800634c:	9300      	str	r3, [sp, #0]
 800634e:	683b      	ldr	r3, [r7, #0]
 8006350:	68b9      	ldr	r1, [r7, #8]
 8006352:	68f8      	ldr	r0, [r7, #12]
 8006354:	f000 f80e 	bl	8006374 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8006358:	69f8      	ldr	r0, [r7, #28]
 800635a:	f000 f8b1 	bl	80064c0 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800635e:	2301      	movs	r3, #1
 8006360:	61bb      	str	r3, [r7, #24]
 8006362:	e002      	b.n	800636a <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8006364:	f04f 33ff 	mov.w	r3, #4294967295
 8006368:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800636a:	69bb      	ldr	r3, [r7, #24]
	}
 800636c:	4618      	mov	r0, r3
 800636e:	3720      	adds	r7, #32
 8006370:	46bd      	mov	sp, r7
 8006372:	bd80      	pop	{r7, pc}

08006374 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8006374:	b580      	push	{r7, lr}
 8006376:	b088      	sub	sp, #32
 8006378:	af00      	add	r7, sp, #0
 800637a:	60f8      	str	r0, [r7, #12]
 800637c:	60b9      	str	r1, [r7, #8]
 800637e:	607a      	str	r2, [r7, #4]
 8006380:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8006382:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006384:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8006386:	687b      	ldr	r3, [r7, #4]
 8006388:	009b      	lsls	r3, r3, #2
 800638a:	461a      	mov	r2, r3
 800638c:	21a5      	movs	r1, #165	; 0xa5
 800638e:	f001 ff2e 	bl	80081ee <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8006392:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006394:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006396:	687b      	ldr	r3, [r7, #4]
 8006398:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800639c:	3b01      	subs	r3, #1
 800639e:	009b      	lsls	r3, r3, #2
 80063a0:	4413      	add	r3, r2
 80063a2:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 80063a4:	69bb      	ldr	r3, [r7, #24]
 80063a6:	f023 0307 	bic.w	r3, r3, #7
 80063aa:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80063ac:	69bb      	ldr	r3, [r7, #24]
 80063ae:	f003 0307 	and.w	r3, r3, #7
 80063b2:	2b00      	cmp	r3, #0
 80063b4:	d00a      	beq.n	80063cc <prvInitialiseNewTask+0x58>
	__asm volatile
 80063b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80063ba:	f383 8811 	msr	BASEPRI, r3
 80063be:	f3bf 8f6f 	isb	sy
 80063c2:	f3bf 8f4f 	dsb	sy
 80063c6:	617b      	str	r3, [r7, #20]
}
 80063c8:	bf00      	nop
 80063ca:	e7fe      	b.n	80063ca <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 80063cc:	68bb      	ldr	r3, [r7, #8]
 80063ce:	2b00      	cmp	r3, #0
 80063d0:	d01f      	beq.n	8006412 <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80063d2:	2300      	movs	r3, #0
 80063d4:	61fb      	str	r3, [r7, #28]
 80063d6:	e012      	b.n	80063fe <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80063d8:	68ba      	ldr	r2, [r7, #8]
 80063da:	69fb      	ldr	r3, [r7, #28]
 80063dc:	4413      	add	r3, r2
 80063de:	7819      	ldrb	r1, [r3, #0]
 80063e0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80063e2:	69fb      	ldr	r3, [r7, #28]
 80063e4:	4413      	add	r3, r2
 80063e6:	3334      	adds	r3, #52	; 0x34
 80063e8:	460a      	mov	r2, r1
 80063ea:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 80063ec:	68ba      	ldr	r2, [r7, #8]
 80063ee:	69fb      	ldr	r3, [r7, #28]
 80063f0:	4413      	add	r3, r2
 80063f2:	781b      	ldrb	r3, [r3, #0]
 80063f4:	2b00      	cmp	r3, #0
 80063f6:	d006      	beq.n	8006406 <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80063f8:	69fb      	ldr	r3, [r7, #28]
 80063fa:	3301      	adds	r3, #1
 80063fc:	61fb      	str	r3, [r7, #28]
 80063fe:	69fb      	ldr	r3, [r7, #28]
 8006400:	2b0f      	cmp	r3, #15
 8006402:	d9e9      	bls.n	80063d8 <prvInitialiseNewTask+0x64>
 8006404:	e000      	b.n	8006408 <prvInitialiseNewTask+0x94>
			{
				break;
 8006406:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8006408:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800640a:	2200      	movs	r2, #0
 800640c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8006410:	e003      	b.n	800641a <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8006412:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006414:	2200      	movs	r2, #0
 8006416:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800641a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800641c:	2b37      	cmp	r3, #55	; 0x37
 800641e:	d901      	bls.n	8006424 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8006420:	2337      	movs	r3, #55	; 0x37
 8006422:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8006424:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006426:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006428:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800642a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800642c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800642e:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8006430:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006432:	2200      	movs	r2, #0
 8006434:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8006436:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006438:	3304      	adds	r3, #4
 800643a:	4618      	mov	r0, r3
 800643c:	f7ff f978 	bl	8005730 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8006440:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006442:	3318      	adds	r3, #24
 8006444:	4618      	mov	r0, r3
 8006446:	f7ff f973 	bl	8005730 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800644a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800644c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800644e:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006450:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006452:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8006456:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006458:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800645a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800645c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800645e:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8006460:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006462:	2200      	movs	r2, #0
 8006464:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8006468:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800646a:	2200      	movs	r2, #0
 800646c:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8006470:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006472:	3354      	adds	r3, #84	; 0x54
 8006474:	2260      	movs	r2, #96	; 0x60
 8006476:	2100      	movs	r1, #0
 8006478:	4618      	mov	r0, r3
 800647a:	f001 feb8 	bl	80081ee <memset>
 800647e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006480:	4a0c      	ldr	r2, [pc, #48]	; (80064b4 <prvInitialiseNewTask+0x140>)
 8006482:	659a      	str	r2, [r3, #88]	; 0x58
 8006484:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006486:	4a0c      	ldr	r2, [pc, #48]	; (80064b8 <prvInitialiseNewTask+0x144>)
 8006488:	65da      	str	r2, [r3, #92]	; 0x5c
 800648a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800648c:	4a0b      	ldr	r2, [pc, #44]	; (80064bc <prvInitialiseNewTask+0x148>)
 800648e:	661a      	str	r2, [r3, #96]	; 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8006490:	683a      	ldr	r2, [r7, #0]
 8006492:	68f9      	ldr	r1, [r7, #12]
 8006494:	69b8      	ldr	r0, [r7, #24]
 8006496:	f001 f941 	bl	800771c <pxPortInitialiseStack>
 800649a:	4602      	mov	r2, r0
 800649c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800649e:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 80064a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80064a2:	2b00      	cmp	r3, #0
 80064a4:	d002      	beq.n	80064ac <prvInitialiseNewTask+0x138>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80064a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80064a8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80064aa:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80064ac:	bf00      	nop
 80064ae:	3720      	adds	r7, #32
 80064b0:	46bd      	mov	sp, r7
 80064b2:	bd80      	pop	{r7, pc}
 80064b4:	0800cafc 	.word	0x0800cafc
 80064b8:	0800cb1c 	.word	0x0800cb1c
 80064bc:	0800cadc 	.word	0x0800cadc

080064c0 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80064c0:	b580      	push	{r7, lr}
 80064c2:	b082      	sub	sp, #8
 80064c4:	af00      	add	r7, sp, #0
 80064c6:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80064c8:	f001 fa54 	bl	8007974 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80064cc:	4b2d      	ldr	r3, [pc, #180]	; (8006584 <prvAddNewTaskToReadyList+0xc4>)
 80064ce:	681b      	ldr	r3, [r3, #0]
 80064d0:	3301      	adds	r3, #1
 80064d2:	4a2c      	ldr	r2, [pc, #176]	; (8006584 <prvAddNewTaskToReadyList+0xc4>)
 80064d4:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80064d6:	4b2c      	ldr	r3, [pc, #176]	; (8006588 <prvAddNewTaskToReadyList+0xc8>)
 80064d8:	681b      	ldr	r3, [r3, #0]
 80064da:	2b00      	cmp	r3, #0
 80064dc:	d109      	bne.n	80064f2 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80064de:	4a2a      	ldr	r2, [pc, #168]	; (8006588 <prvAddNewTaskToReadyList+0xc8>)
 80064e0:	687b      	ldr	r3, [r7, #4]
 80064e2:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80064e4:	4b27      	ldr	r3, [pc, #156]	; (8006584 <prvAddNewTaskToReadyList+0xc4>)
 80064e6:	681b      	ldr	r3, [r3, #0]
 80064e8:	2b01      	cmp	r3, #1
 80064ea:	d110      	bne.n	800650e <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80064ec:	f000 fc26 	bl	8006d3c <prvInitialiseTaskLists>
 80064f0:	e00d      	b.n	800650e <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80064f2:	4b26      	ldr	r3, [pc, #152]	; (800658c <prvAddNewTaskToReadyList+0xcc>)
 80064f4:	681b      	ldr	r3, [r3, #0]
 80064f6:	2b00      	cmp	r3, #0
 80064f8:	d109      	bne.n	800650e <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80064fa:	4b23      	ldr	r3, [pc, #140]	; (8006588 <prvAddNewTaskToReadyList+0xc8>)
 80064fc:	681b      	ldr	r3, [r3, #0]
 80064fe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006500:	687b      	ldr	r3, [r7, #4]
 8006502:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006504:	429a      	cmp	r2, r3
 8006506:	d802      	bhi.n	800650e <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8006508:	4a1f      	ldr	r2, [pc, #124]	; (8006588 <prvAddNewTaskToReadyList+0xc8>)
 800650a:	687b      	ldr	r3, [r7, #4]
 800650c:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800650e:	4b20      	ldr	r3, [pc, #128]	; (8006590 <prvAddNewTaskToReadyList+0xd0>)
 8006510:	681b      	ldr	r3, [r3, #0]
 8006512:	3301      	adds	r3, #1
 8006514:	4a1e      	ldr	r2, [pc, #120]	; (8006590 <prvAddNewTaskToReadyList+0xd0>)
 8006516:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8006518:	4b1d      	ldr	r3, [pc, #116]	; (8006590 <prvAddNewTaskToReadyList+0xd0>)
 800651a:	681a      	ldr	r2, [r3, #0]
 800651c:	687b      	ldr	r3, [r7, #4]
 800651e:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8006520:	687b      	ldr	r3, [r7, #4]
 8006522:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006524:	4b1b      	ldr	r3, [pc, #108]	; (8006594 <prvAddNewTaskToReadyList+0xd4>)
 8006526:	681b      	ldr	r3, [r3, #0]
 8006528:	429a      	cmp	r2, r3
 800652a:	d903      	bls.n	8006534 <prvAddNewTaskToReadyList+0x74>
 800652c:	687b      	ldr	r3, [r7, #4]
 800652e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006530:	4a18      	ldr	r2, [pc, #96]	; (8006594 <prvAddNewTaskToReadyList+0xd4>)
 8006532:	6013      	str	r3, [r2, #0]
 8006534:	687b      	ldr	r3, [r7, #4]
 8006536:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006538:	4613      	mov	r3, r2
 800653a:	009b      	lsls	r3, r3, #2
 800653c:	4413      	add	r3, r2
 800653e:	009b      	lsls	r3, r3, #2
 8006540:	4a15      	ldr	r2, [pc, #84]	; (8006598 <prvAddNewTaskToReadyList+0xd8>)
 8006542:	441a      	add	r2, r3
 8006544:	687b      	ldr	r3, [r7, #4]
 8006546:	3304      	adds	r3, #4
 8006548:	4619      	mov	r1, r3
 800654a:	4610      	mov	r0, r2
 800654c:	f7ff f8fd 	bl	800574a <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8006550:	f001 fa40 	bl	80079d4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8006554:	4b0d      	ldr	r3, [pc, #52]	; (800658c <prvAddNewTaskToReadyList+0xcc>)
 8006556:	681b      	ldr	r3, [r3, #0]
 8006558:	2b00      	cmp	r3, #0
 800655a:	d00e      	beq.n	800657a <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800655c:	4b0a      	ldr	r3, [pc, #40]	; (8006588 <prvAddNewTaskToReadyList+0xc8>)
 800655e:	681b      	ldr	r3, [r3, #0]
 8006560:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006562:	687b      	ldr	r3, [r7, #4]
 8006564:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006566:	429a      	cmp	r2, r3
 8006568:	d207      	bcs.n	800657a <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800656a:	4b0c      	ldr	r3, [pc, #48]	; (800659c <prvAddNewTaskToReadyList+0xdc>)
 800656c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006570:	601a      	str	r2, [r3, #0]
 8006572:	f3bf 8f4f 	dsb	sy
 8006576:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800657a:	bf00      	nop
 800657c:	3708      	adds	r7, #8
 800657e:	46bd      	mov	sp, r7
 8006580:	bd80      	pop	{r7, pc}
 8006582:	bf00      	nop
 8006584:	2000107c 	.word	0x2000107c
 8006588:	20000ba8 	.word	0x20000ba8
 800658c:	20001088 	.word	0x20001088
 8006590:	20001098 	.word	0x20001098
 8006594:	20001084 	.word	0x20001084
 8006598:	20000bac 	.word	0x20000bac
 800659c:	e000ed04 	.word	0xe000ed04

080065a0 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 80065a0:	b580      	push	{r7, lr}
 80065a2:	b084      	sub	sp, #16
 80065a4:	af00      	add	r7, sp, #0
 80065a6:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 80065a8:	2300      	movs	r3, #0
 80065aa:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 80065ac:	687b      	ldr	r3, [r7, #4]
 80065ae:	2b00      	cmp	r3, #0
 80065b0:	d017      	beq.n	80065e2 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 80065b2:	4b13      	ldr	r3, [pc, #76]	; (8006600 <vTaskDelay+0x60>)
 80065b4:	681b      	ldr	r3, [r3, #0]
 80065b6:	2b00      	cmp	r3, #0
 80065b8:	d00a      	beq.n	80065d0 <vTaskDelay+0x30>
	__asm volatile
 80065ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 80065be:	f383 8811 	msr	BASEPRI, r3
 80065c2:	f3bf 8f6f 	isb	sy
 80065c6:	f3bf 8f4f 	dsb	sy
 80065ca:	60bb      	str	r3, [r7, #8]
}
 80065cc:	bf00      	nop
 80065ce:	e7fe      	b.n	80065ce <vTaskDelay+0x2e>
			vTaskSuspendAll();
 80065d0:	f000 f88a 	bl	80066e8 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80065d4:	2100      	movs	r1, #0
 80065d6:	6878      	ldr	r0, [r7, #4]
 80065d8:	f000 fcfe 	bl	8006fd8 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 80065dc:	f000 f892 	bl	8006704 <xTaskResumeAll>
 80065e0:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80065e2:	68fb      	ldr	r3, [r7, #12]
 80065e4:	2b00      	cmp	r3, #0
 80065e6:	d107      	bne.n	80065f8 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 80065e8:	4b06      	ldr	r3, [pc, #24]	; (8006604 <vTaskDelay+0x64>)
 80065ea:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80065ee:	601a      	str	r2, [r3, #0]
 80065f0:	f3bf 8f4f 	dsb	sy
 80065f4:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80065f8:	bf00      	nop
 80065fa:	3710      	adds	r7, #16
 80065fc:	46bd      	mov	sp, r7
 80065fe:	bd80      	pop	{r7, pc}
 8006600:	200010a4 	.word	0x200010a4
 8006604:	e000ed04 	.word	0xe000ed04

08006608 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8006608:	b580      	push	{r7, lr}
 800660a:	b08a      	sub	sp, #40	; 0x28
 800660c:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800660e:	2300      	movs	r3, #0
 8006610:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8006612:	2300      	movs	r3, #0
 8006614:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8006616:	463a      	mov	r2, r7
 8006618:	1d39      	adds	r1, r7, #4
 800661a:	f107 0308 	add.w	r3, r7, #8
 800661e:	4618      	mov	r0, r3
 8006620:	f7ff f832 	bl	8005688 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8006624:	6839      	ldr	r1, [r7, #0]
 8006626:	687b      	ldr	r3, [r7, #4]
 8006628:	68ba      	ldr	r2, [r7, #8]
 800662a:	9202      	str	r2, [sp, #8]
 800662c:	9301      	str	r3, [sp, #4]
 800662e:	2300      	movs	r3, #0
 8006630:	9300      	str	r3, [sp, #0]
 8006632:	2300      	movs	r3, #0
 8006634:	460a      	mov	r2, r1
 8006636:	4924      	ldr	r1, [pc, #144]	; (80066c8 <vTaskStartScheduler+0xc0>)
 8006638:	4824      	ldr	r0, [pc, #144]	; (80066cc <vTaskStartScheduler+0xc4>)
 800663a:	f7ff fdf9 	bl	8006230 <xTaskCreateStatic>
 800663e:	4603      	mov	r3, r0
 8006640:	4a23      	ldr	r2, [pc, #140]	; (80066d0 <vTaskStartScheduler+0xc8>)
 8006642:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8006644:	4b22      	ldr	r3, [pc, #136]	; (80066d0 <vTaskStartScheduler+0xc8>)
 8006646:	681b      	ldr	r3, [r3, #0]
 8006648:	2b00      	cmp	r3, #0
 800664a:	d002      	beq.n	8006652 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800664c:	2301      	movs	r3, #1
 800664e:	617b      	str	r3, [r7, #20]
 8006650:	e001      	b.n	8006656 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8006652:	2300      	movs	r3, #0
 8006654:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8006656:	697b      	ldr	r3, [r7, #20]
 8006658:	2b01      	cmp	r3, #1
 800665a:	d102      	bne.n	8006662 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800665c:	f000 fd10 	bl	8007080 <xTimerCreateTimerTask>
 8006660:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8006662:	697b      	ldr	r3, [r7, #20]
 8006664:	2b01      	cmp	r3, #1
 8006666:	d11b      	bne.n	80066a0 <vTaskStartScheduler+0x98>
	__asm volatile
 8006668:	f04f 0350 	mov.w	r3, #80	; 0x50
 800666c:	f383 8811 	msr	BASEPRI, r3
 8006670:	f3bf 8f6f 	isb	sy
 8006674:	f3bf 8f4f 	dsb	sy
 8006678:	613b      	str	r3, [r7, #16]
}
 800667a:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800667c:	4b15      	ldr	r3, [pc, #84]	; (80066d4 <vTaskStartScheduler+0xcc>)
 800667e:	681b      	ldr	r3, [r3, #0]
 8006680:	3354      	adds	r3, #84	; 0x54
 8006682:	4a15      	ldr	r2, [pc, #84]	; (80066d8 <vTaskStartScheduler+0xd0>)
 8006684:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8006686:	4b15      	ldr	r3, [pc, #84]	; (80066dc <vTaskStartScheduler+0xd4>)
 8006688:	f04f 32ff 	mov.w	r2, #4294967295
 800668c:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800668e:	4b14      	ldr	r3, [pc, #80]	; (80066e0 <vTaskStartScheduler+0xd8>)
 8006690:	2201      	movs	r2, #1
 8006692:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8006694:	4b13      	ldr	r3, [pc, #76]	; (80066e4 <vTaskStartScheduler+0xdc>)
 8006696:	2200      	movs	r2, #0
 8006698:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800669a:	f001 f8c9 	bl	8007830 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800669e:	e00e      	b.n	80066be <vTaskStartScheduler+0xb6>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80066a0:	697b      	ldr	r3, [r7, #20]
 80066a2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80066a6:	d10a      	bne.n	80066be <vTaskStartScheduler+0xb6>
	__asm volatile
 80066a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80066ac:	f383 8811 	msr	BASEPRI, r3
 80066b0:	f3bf 8f6f 	isb	sy
 80066b4:	f3bf 8f4f 	dsb	sy
 80066b8:	60fb      	str	r3, [r7, #12]
}
 80066ba:	bf00      	nop
 80066bc:	e7fe      	b.n	80066bc <vTaskStartScheduler+0xb4>
}
 80066be:	bf00      	nop
 80066c0:	3718      	adds	r7, #24
 80066c2:	46bd      	mov	sp, r7
 80066c4:	bd80      	pop	{r7, pc}
 80066c6:	bf00      	nop
 80066c8:	0800ca10 	.word	0x0800ca10
 80066cc:	08006d0d 	.word	0x08006d0d
 80066d0:	200010a0 	.word	0x200010a0
 80066d4:	20000ba8 	.word	0x20000ba8
 80066d8:	20000010 	.word	0x20000010
 80066dc:	2000109c 	.word	0x2000109c
 80066e0:	20001088 	.word	0x20001088
 80066e4:	20001080 	.word	0x20001080

080066e8 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80066e8:	b480      	push	{r7}
 80066ea:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 80066ec:	4b04      	ldr	r3, [pc, #16]	; (8006700 <vTaskSuspendAll+0x18>)
 80066ee:	681b      	ldr	r3, [r3, #0]
 80066f0:	3301      	adds	r3, #1
 80066f2:	4a03      	ldr	r2, [pc, #12]	; (8006700 <vTaskSuspendAll+0x18>)
 80066f4:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 80066f6:	bf00      	nop
 80066f8:	46bd      	mov	sp, r7
 80066fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066fe:	4770      	bx	lr
 8006700:	200010a4 	.word	0x200010a4

08006704 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8006704:	b580      	push	{r7, lr}
 8006706:	b084      	sub	sp, #16
 8006708:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800670a:	2300      	movs	r3, #0
 800670c:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800670e:	2300      	movs	r3, #0
 8006710:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8006712:	4b42      	ldr	r3, [pc, #264]	; (800681c <xTaskResumeAll+0x118>)
 8006714:	681b      	ldr	r3, [r3, #0]
 8006716:	2b00      	cmp	r3, #0
 8006718:	d10a      	bne.n	8006730 <xTaskResumeAll+0x2c>
	__asm volatile
 800671a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800671e:	f383 8811 	msr	BASEPRI, r3
 8006722:	f3bf 8f6f 	isb	sy
 8006726:	f3bf 8f4f 	dsb	sy
 800672a:	603b      	str	r3, [r7, #0]
}
 800672c:	bf00      	nop
 800672e:	e7fe      	b.n	800672e <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8006730:	f001 f920 	bl	8007974 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8006734:	4b39      	ldr	r3, [pc, #228]	; (800681c <xTaskResumeAll+0x118>)
 8006736:	681b      	ldr	r3, [r3, #0]
 8006738:	3b01      	subs	r3, #1
 800673a:	4a38      	ldr	r2, [pc, #224]	; (800681c <xTaskResumeAll+0x118>)
 800673c:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800673e:	4b37      	ldr	r3, [pc, #220]	; (800681c <xTaskResumeAll+0x118>)
 8006740:	681b      	ldr	r3, [r3, #0]
 8006742:	2b00      	cmp	r3, #0
 8006744:	d162      	bne.n	800680c <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8006746:	4b36      	ldr	r3, [pc, #216]	; (8006820 <xTaskResumeAll+0x11c>)
 8006748:	681b      	ldr	r3, [r3, #0]
 800674a:	2b00      	cmp	r3, #0
 800674c:	d05e      	beq.n	800680c <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800674e:	e02f      	b.n	80067b0 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006750:	4b34      	ldr	r3, [pc, #208]	; (8006824 <xTaskResumeAll+0x120>)
 8006752:	68db      	ldr	r3, [r3, #12]
 8006754:	68db      	ldr	r3, [r3, #12]
 8006756:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8006758:	68fb      	ldr	r3, [r7, #12]
 800675a:	3318      	adds	r3, #24
 800675c:	4618      	mov	r0, r3
 800675e:	f7ff f851 	bl	8005804 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006762:	68fb      	ldr	r3, [r7, #12]
 8006764:	3304      	adds	r3, #4
 8006766:	4618      	mov	r0, r3
 8006768:	f7ff f84c 	bl	8005804 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800676c:	68fb      	ldr	r3, [r7, #12]
 800676e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006770:	4b2d      	ldr	r3, [pc, #180]	; (8006828 <xTaskResumeAll+0x124>)
 8006772:	681b      	ldr	r3, [r3, #0]
 8006774:	429a      	cmp	r2, r3
 8006776:	d903      	bls.n	8006780 <xTaskResumeAll+0x7c>
 8006778:	68fb      	ldr	r3, [r7, #12]
 800677a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800677c:	4a2a      	ldr	r2, [pc, #168]	; (8006828 <xTaskResumeAll+0x124>)
 800677e:	6013      	str	r3, [r2, #0]
 8006780:	68fb      	ldr	r3, [r7, #12]
 8006782:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006784:	4613      	mov	r3, r2
 8006786:	009b      	lsls	r3, r3, #2
 8006788:	4413      	add	r3, r2
 800678a:	009b      	lsls	r3, r3, #2
 800678c:	4a27      	ldr	r2, [pc, #156]	; (800682c <xTaskResumeAll+0x128>)
 800678e:	441a      	add	r2, r3
 8006790:	68fb      	ldr	r3, [r7, #12]
 8006792:	3304      	adds	r3, #4
 8006794:	4619      	mov	r1, r3
 8006796:	4610      	mov	r0, r2
 8006798:	f7fe ffd7 	bl	800574a <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800679c:	68fb      	ldr	r3, [r7, #12]
 800679e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80067a0:	4b23      	ldr	r3, [pc, #140]	; (8006830 <xTaskResumeAll+0x12c>)
 80067a2:	681b      	ldr	r3, [r3, #0]
 80067a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80067a6:	429a      	cmp	r2, r3
 80067a8:	d302      	bcc.n	80067b0 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 80067aa:	4b22      	ldr	r3, [pc, #136]	; (8006834 <xTaskResumeAll+0x130>)
 80067ac:	2201      	movs	r2, #1
 80067ae:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80067b0:	4b1c      	ldr	r3, [pc, #112]	; (8006824 <xTaskResumeAll+0x120>)
 80067b2:	681b      	ldr	r3, [r3, #0]
 80067b4:	2b00      	cmp	r3, #0
 80067b6:	d1cb      	bne.n	8006750 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80067b8:	68fb      	ldr	r3, [r7, #12]
 80067ba:	2b00      	cmp	r3, #0
 80067bc:	d001      	beq.n	80067c2 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80067be:	f000 fb5f 	bl	8006e80 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 80067c2:	4b1d      	ldr	r3, [pc, #116]	; (8006838 <xTaskResumeAll+0x134>)
 80067c4:	681b      	ldr	r3, [r3, #0]
 80067c6:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 80067c8:	687b      	ldr	r3, [r7, #4]
 80067ca:	2b00      	cmp	r3, #0
 80067cc:	d010      	beq.n	80067f0 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80067ce:	f000 f847 	bl	8006860 <xTaskIncrementTick>
 80067d2:	4603      	mov	r3, r0
 80067d4:	2b00      	cmp	r3, #0
 80067d6:	d002      	beq.n	80067de <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 80067d8:	4b16      	ldr	r3, [pc, #88]	; (8006834 <xTaskResumeAll+0x130>)
 80067da:	2201      	movs	r2, #1
 80067dc:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 80067de:	687b      	ldr	r3, [r7, #4]
 80067e0:	3b01      	subs	r3, #1
 80067e2:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 80067e4:	687b      	ldr	r3, [r7, #4]
 80067e6:	2b00      	cmp	r3, #0
 80067e8:	d1f1      	bne.n	80067ce <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 80067ea:	4b13      	ldr	r3, [pc, #76]	; (8006838 <xTaskResumeAll+0x134>)
 80067ec:	2200      	movs	r2, #0
 80067ee:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80067f0:	4b10      	ldr	r3, [pc, #64]	; (8006834 <xTaskResumeAll+0x130>)
 80067f2:	681b      	ldr	r3, [r3, #0]
 80067f4:	2b00      	cmp	r3, #0
 80067f6:	d009      	beq.n	800680c <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 80067f8:	2301      	movs	r3, #1
 80067fa:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 80067fc:	4b0f      	ldr	r3, [pc, #60]	; (800683c <xTaskResumeAll+0x138>)
 80067fe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006802:	601a      	str	r2, [r3, #0]
 8006804:	f3bf 8f4f 	dsb	sy
 8006808:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800680c:	f001 f8e2 	bl	80079d4 <vPortExitCritical>

	return xAlreadyYielded;
 8006810:	68bb      	ldr	r3, [r7, #8]
}
 8006812:	4618      	mov	r0, r3
 8006814:	3710      	adds	r7, #16
 8006816:	46bd      	mov	sp, r7
 8006818:	bd80      	pop	{r7, pc}
 800681a:	bf00      	nop
 800681c:	200010a4 	.word	0x200010a4
 8006820:	2000107c 	.word	0x2000107c
 8006824:	2000103c 	.word	0x2000103c
 8006828:	20001084 	.word	0x20001084
 800682c:	20000bac 	.word	0x20000bac
 8006830:	20000ba8 	.word	0x20000ba8
 8006834:	20001090 	.word	0x20001090
 8006838:	2000108c 	.word	0x2000108c
 800683c:	e000ed04 	.word	0xe000ed04

08006840 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8006840:	b480      	push	{r7}
 8006842:	b083      	sub	sp, #12
 8006844:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8006846:	4b05      	ldr	r3, [pc, #20]	; (800685c <xTaskGetTickCount+0x1c>)
 8006848:	681b      	ldr	r3, [r3, #0]
 800684a:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800684c:	687b      	ldr	r3, [r7, #4]
}
 800684e:	4618      	mov	r0, r3
 8006850:	370c      	adds	r7, #12
 8006852:	46bd      	mov	sp, r7
 8006854:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006858:	4770      	bx	lr
 800685a:	bf00      	nop
 800685c:	20001080 	.word	0x20001080

08006860 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8006860:	b580      	push	{r7, lr}
 8006862:	b086      	sub	sp, #24
 8006864:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8006866:	2300      	movs	r3, #0
 8006868:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800686a:	4b4f      	ldr	r3, [pc, #316]	; (80069a8 <xTaskIncrementTick+0x148>)
 800686c:	681b      	ldr	r3, [r3, #0]
 800686e:	2b00      	cmp	r3, #0
 8006870:	f040 808f 	bne.w	8006992 <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8006874:	4b4d      	ldr	r3, [pc, #308]	; (80069ac <xTaskIncrementTick+0x14c>)
 8006876:	681b      	ldr	r3, [r3, #0]
 8006878:	3301      	adds	r3, #1
 800687a:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800687c:	4a4b      	ldr	r2, [pc, #300]	; (80069ac <xTaskIncrementTick+0x14c>)
 800687e:	693b      	ldr	r3, [r7, #16]
 8006880:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8006882:	693b      	ldr	r3, [r7, #16]
 8006884:	2b00      	cmp	r3, #0
 8006886:	d120      	bne.n	80068ca <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8006888:	4b49      	ldr	r3, [pc, #292]	; (80069b0 <xTaskIncrementTick+0x150>)
 800688a:	681b      	ldr	r3, [r3, #0]
 800688c:	681b      	ldr	r3, [r3, #0]
 800688e:	2b00      	cmp	r3, #0
 8006890:	d00a      	beq.n	80068a8 <xTaskIncrementTick+0x48>
	__asm volatile
 8006892:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006896:	f383 8811 	msr	BASEPRI, r3
 800689a:	f3bf 8f6f 	isb	sy
 800689e:	f3bf 8f4f 	dsb	sy
 80068a2:	603b      	str	r3, [r7, #0]
}
 80068a4:	bf00      	nop
 80068a6:	e7fe      	b.n	80068a6 <xTaskIncrementTick+0x46>
 80068a8:	4b41      	ldr	r3, [pc, #260]	; (80069b0 <xTaskIncrementTick+0x150>)
 80068aa:	681b      	ldr	r3, [r3, #0]
 80068ac:	60fb      	str	r3, [r7, #12]
 80068ae:	4b41      	ldr	r3, [pc, #260]	; (80069b4 <xTaskIncrementTick+0x154>)
 80068b0:	681b      	ldr	r3, [r3, #0]
 80068b2:	4a3f      	ldr	r2, [pc, #252]	; (80069b0 <xTaskIncrementTick+0x150>)
 80068b4:	6013      	str	r3, [r2, #0]
 80068b6:	4a3f      	ldr	r2, [pc, #252]	; (80069b4 <xTaskIncrementTick+0x154>)
 80068b8:	68fb      	ldr	r3, [r7, #12]
 80068ba:	6013      	str	r3, [r2, #0]
 80068bc:	4b3e      	ldr	r3, [pc, #248]	; (80069b8 <xTaskIncrementTick+0x158>)
 80068be:	681b      	ldr	r3, [r3, #0]
 80068c0:	3301      	adds	r3, #1
 80068c2:	4a3d      	ldr	r2, [pc, #244]	; (80069b8 <xTaskIncrementTick+0x158>)
 80068c4:	6013      	str	r3, [r2, #0]
 80068c6:	f000 fadb 	bl	8006e80 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80068ca:	4b3c      	ldr	r3, [pc, #240]	; (80069bc <xTaskIncrementTick+0x15c>)
 80068cc:	681b      	ldr	r3, [r3, #0]
 80068ce:	693a      	ldr	r2, [r7, #16]
 80068d0:	429a      	cmp	r2, r3
 80068d2:	d349      	bcc.n	8006968 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80068d4:	4b36      	ldr	r3, [pc, #216]	; (80069b0 <xTaskIncrementTick+0x150>)
 80068d6:	681b      	ldr	r3, [r3, #0]
 80068d8:	681b      	ldr	r3, [r3, #0]
 80068da:	2b00      	cmp	r3, #0
 80068dc:	d104      	bne.n	80068e8 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80068de:	4b37      	ldr	r3, [pc, #220]	; (80069bc <xTaskIncrementTick+0x15c>)
 80068e0:	f04f 32ff 	mov.w	r2, #4294967295
 80068e4:	601a      	str	r2, [r3, #0]
					break;
 80068e6:	e03f      	b.n	8006968 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80068e8:	4b31      	ldr	r3, [pc, #196]	; (80069b0 <xTaskIncrementTick+0x150>)
 80068ea:	681b      	ldr	r3, [r3, #0]
 80068ec:	68db      	ldr	r3, [r3, #12]
 80068ee:	68db      	ldr	r3, [r3, #12]
 80068f0:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80068f2:	68bb      	ldr	r3, [r7, #8]
 80068f4:	685b      	ldr	r3, [r3, #4]
 80068f6:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80068f8:	693a      	ldr	r2, [r7, #16]
 80068fa:	687b      	ldr	r3, [r7, #4]
 80068fc:	429a      	cmp	r2, r3
 80068fe:	d203      	bcs.n	8006908 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8006900:	4a2e      	ldr	r2, [pc, #184]	; (80069bc <xTaskIncrementTick+0x15c>)
 8006902:	687b      	ldr	r3, [r7, #4]
 8006904:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8006906:	e02f      	b.n	8006968 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006908:	68bb      	ldr	r3, [r7, #8]
 800690a:	3304      	adds	r3, #4
 800690c:	4618      	mov	r0, r3
 800690e:	f7fe ff79 	bl	8005804 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8006912:	68bb      	ldr	r3, [r7, #8]
 8006914:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006916:	2b00      	cmp	r3, #0
 8006918:	d004      	beq.n	8006924 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800691a:	68bb      	ldr	r3, [r7, #8]
 800691c:	3318      	adds	r3, #24
 800691e:	4618      	mov	r0, r3
 8006920:	f7fe ff70 	bl	8005804 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8006924:	68bb      	ldr	r3, [r7, #8]
 8006926:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006928:	4b25      	ldr	r3, [pc, #148]	; (80069c0 <xTaskIncrementTick+0x160>)
 800692a:	681b      	ldr	r3, [r3, #0]
 800692c:	429a      	cmp	r2, r3
 800692e:	d903      	bls.n	8006938 <xTaskIncrementTick+0xd8>
 8006930:	68bb      	ldr	r3, [r7, #8]
 8006932:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006934:	4a22      	ldr	r2, [pc, #136]	; (80069c0 <xTaskIncrementTick+0x160>)
 8006936:	6013      	str	r3, [r2, #0]
 8006938:	68bb      	ldr	r3, [r7, #8]
 800693a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800693c:	4613      	mov	r3, r2
 800693e:	009b      	lsls	r3, r3, #2
 8006940:	4413      	add	r3, r2
 8006942:	009b      	lsls	r3, r3, #2
 8006944:	4a1f      	ldr	r2, [pc, #124]	; (80069c4 <xTaskIncrementTick+0x164>)
 8006946:	441a      	add	r2, r3
 8006948:	68bb      	ldr	r3, [r7, #8]
 800694a:	3304      	adds	r3, #4
 800694c:	4619      	mov	r1, r3
 800694e:	4610      	mov	r0, r2
 8006950:	f7fe fefb 	bl	800574a <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8006954:	68bb      	ldr	r3, [r7, #8]
 8006956:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006958:	4b1b      	ldr	r3, [pc, #108]	; (80069c8 <xTaskIncrementTick+0x168>)
 800695a:	681b      	ldr	r3, [r3, #0]
 800695c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800695e:	429a      	cmp	r2, r3
 8006960:	d3b8      	bcc.n	80068d4 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8006962:	2301      	movs	r3, #1
 8006964:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006966:	e7b5      	b.n	80068d4 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8006968:	4b17      	ldr	r3, [pc, #92]	; (80069c8 <xTaskIncrementTick+0x168>)
 800696a:	681b      	ldr	r3, [r3, #0]
 800696c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800696e:	4915      	ldr	r1, [pc, #84]	; (80069c4 <xTaskIncrementTick+0x164>)
 8006970:	4613      	mov	r3, r2
 8006972:	009b      	lsls	r3, r3, #2
 8006974:	4413      	add	r3, r2
 8006976:	009b      	lsls	r3, r3, #2
 8006978:	440b      	add	r3, r1
 800697a:	681b      	ldr	r3, [r3, #0]
 800697c:	2b01      	cmp	r3, #1
 800697e:	d901      	bls.n	8006984 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 8006980:	2301      	movs	r3, #1
 8006982:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8006984:	4b11      	ldr	r3, [pc, #68]	; (80069cc <xTaskIncrementTick+0x16c>)
 8006986:	681b      	ldr	r3, [r3, #0]
 8006988:	2b00      	cmp	r3, #0
 800698a:	d007      	beq.n	800699c <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 800698c:	2301      	movs	r3, #1
 800698e:	617b      	str	r3, [r7, #20]
 8006990:	e004      	b.n	800699c <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8006992:	4b0f      	ldr	r3, [pc, #60]	; (80069d0 <xTaskIncrementTick+0x170>)
 8006994:	681b      	ldr	r3, [r3, #0]
 8006996:	3301      	adds	r3, #1
 8006998:	4a0d      	ldr	r2, [pc, #52]	; (80069d0 <xTaskIncrementTick+0x170>)
 800699a:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800699c:	697b      	ldr	r3, [r7, #20]
}
 800699e:	4618      	mov	r0, r3
 80069a0:	3718      	adds	r7, #24
 80069a2:	46bd      	mov	sp, r7
 80069a4:	bd80      	pop	{r7, pc}
 80069a6:	bf00      	nop
 80069a8:	200010a4 	.word	0x200010a4
 80069ac:	20001080 	.word	0x20001080
 80069b0:	20001034 	.word	0x20001034
 80069b4:	20001038 	.word	0x20001038
 80069b8:	20001094 	.word	0x20001094
 80069bc:	2000109c 	.word	0x2000109c
 80069c0:	20001084 	.word	0x20001084
 80069c4:	20000bac 	.word	0x20000bac
 80069c8:	20000ba8 	.word	0x20000ba8
 80069cc:	20001090 	.word	0x20001090
 80069d0:	2000108c 	.word	0x2000108c

080069d4 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80069d4:	b480      	push	{r7}
 80069d6:	b085      	sub	sp, #20
 80069d8:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80069da:	4b2a      	ldr	r3, [pc, #168]	; (8006a84 <vTaskSwitchContext+0xb0>)
 80069dc:	681b      	ldr	r3, [r3, #0]
 80069de:	2b00      	cmp	r3, #0
 80069e0:	d003      	beq.n	80069ea <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80069e2:	4b29      	ldr	r3, [pc, #164]	; (8006a88 <vTaskSwitchContext+0xb4>)
 80069e4:	2201      	movs	r2, #1
 80069e6:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80069e8:	e046      	b.n	8006a78 <vTaskSwitchContext+0xa4>
		xYieldPending = pdFALSE;
 80069ea:	4b27      	ldr	r3, [pc, #156]	; (8006a88 <vTaskSwitchContext+0xb4>)
 80069ec:	2200      	movs	r2, #0
 80069ee:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80069f0:	4b26      	ldr	r3, [pc, #152]	; (8006a8c <vTaskSwitchContext+0xb8>)
 80069f2:	681b      	ldr	r3, [r3, #0]
 80069f4:	60fb      	str	r3, [r7, #12]
 80069f6:	e010      	b.n	8006a1a <vTaskSwitchContext+0x46>
 80069f8:	68fb      	ldr	r3, [r7, #12]
 80069fa:	2b00      	cmp	r3, #0
 80069fc:	d10a      	bne.n	8006a14 <vTaskSwitchContext+0x40>
	__asm volatile
 80069fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006a02:	f383 8811 	msr	BASEPRI, r3
 8006a06:	f3bf 8f6f 	isb	sy
 8006a0a:	f3bf 8f4f 	dsb	sy
 8006a0e:	607b      	str	r3, [r7, #4]
}
 8006a10:	bf00      	nop
 8006a12:	e7fe      	b.n	8006a12 <vTaskSwitchContext+0x3e>
 8006a14:	68fb      	ldr	r3, [r7, #12]
 8006a16:	3b01      	subs	r3, #1
 8006a18:	60fb      	str	r3, [r7, #12]
 8006a1a:	491d      	ldr	r1, [pc, #116]	; (8006a90 <vTaskSwitchContext+0xbc>)
 8006a1c:	68fa      	ldr	r2, [r7, #12]
 8006a1e:	4613      	mov	r3, r2
 8006a20:	009b      	lsls	r3, r3, #2
 8006a22:	4413      	add	r3, r2
 8006a24:	009b      	lsls	r3, r3, #2
 8006a26:	440b      	add	r3, r1
 8006a28:	681b      	ldr	r3, [r3, #0]
 8006a2a:	2b00      	cmp	r3, #0
 8006a2c:	d0e4      	beq.n	80069f8 <vTaskSwitchContext+0x24>
 8006a2e:	68fa      	ldr	r2, [r7, #12]
 8006a30:	4613      	mov	r3, r2
 8006a32:	009b      	lsls	r3, r3, #2
 8006a34:	4413      	add	r3, r2
 8006a36:	009b      	lsls	r3, r3, #2
 8006a38:	4a15      	ldr	r2, [pc, #84]	; (8006a90 <vTaskSwitchContext+0xbc>)
 8006a3a:	4413      	add	r3, r2
 8006a3c:	60bb      	str	r3, [r7, #8]
 8006a3e:	68bb      	ldr	r3, [r7, #8]
 8006a40:	685b      	ldr	r3, [r3, #4]
 8006a42:	685a      	ldr	r2, [r3, #4]
 8006a44:	68bb      	ldr	r3, [r7, #8]
 8006a46:	605a      	str	r2, [r3, #4]
 8006a48:	68bb      	ldr	r3, [r7, #8]
 8006a4a:	685a      	ldr	r2, [r3, #4]
 8006a4c:	68bb      	ldr	r3, [r7, #8]
 8006a4e:	3308      	adds	r3, #8
 8006a50:	429a      	cmp	r2, r3
 8006a52:	d104      	bne.n	8006a5e <vTaskSwitchContext+0x8a>
 8006a54:	68bb      	ldr	r3, [r7, #8]
 8006a56:	685b      	ldr	r3, [r3, #4]
 8006a58:	685a      	ldr	r2, [r3, #4]
 8006a5a:	68bb      	ldr	r3, [r7, #8]
 8006a5c:	605a      	str	r2, [r3, #4]
 8006a5e:	68bb      	ldr	r3, [r7, #8]
 8006a60:	685b      	ldr	r3, [r3, #4]
 8006a62:	68db      	ldr	r3, [r3, #12]
 8006a64:	4a0b      	ldr	r2, [pc, #44]	; (8006a94 <vTaskSwitchContext+0xc0>)
 8006a66:	6013      	str	r3, [r2, #0]
 8006a68:	4a08      	ldr	r2, [pc, #32]	; (8006a8c <vTaskSwitchContext+0xb8>)
 8006a6a:	68fb      	ldr	r3, [r7, #12]
 8006a6c:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8006a6e:	4b09      	ldr	r3, [pc, #36]	; (8006a94 <vTaskSwitchContext+0xc0>)
 8006a70:	681b      	ldr	r3, [r3, #0]
 8006a72:	3354      	adds	r3, #84	; 0x54
 8006a74:	4a08      	ldr	r2, [pc, #32]	; (8006a98 <vTaskSwitchContext+0xc4>)
 8006a76:	6013      	str	r3, [r2, #0]
}
 8006a78:	bf00      	nop
 8006a7a:	3714      	adds	r7, #20
 8006a7c:	46bd      	mov	sp, r7
 8006a7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a82:	4770      	bx	lr
 8006a84:	200010a4 	.word	0x200010a4
 8006a88:	20001090 	.word	0x20001090
 8006a8c:	20001084 	.word	0x20001084
 8006a90:	20000bac 	.word	0x20000bac
 8006a94:	20000ba8 	.word	0x20000ba8
 8006a98:	20000010 	.word	0x20000010

08006a9c <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8006a9c:	b580      	push	{r7, lr}
 8006a9e:	b084      	sub	sp, #16
 8006aa0:	af00      	add	r7, sp, #0
 8006aa2:	6078      	str	r0, [r7, #4]
 8006aa4:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8006aa6:	687b      	ldr	r3, [r7, #4]
 8006aa8:	2b00      	cmp	r3, #0
 8006aaa:	d10a      	bne.n	8006ac2 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8006aac:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006ab0:	f383 8811 	msr	BASEPRI, r3
 8006ab4:	f3bf 8f6f 	isb	sy
 8006ab8:	f3bf 8f4f 	dsb	sy
 8006abc:	60fb      	str	r3, [r7, #12]
}
 8006abe:	bf00      	nop
 8006ac0:	e7fe      	b.n	8006ac0 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8006ac2:	4b07      	ldr	r3, [pc, #28]	; (8006ae0 <vTaskPlaceOnEventList+0x44>)
 8006ac4:	681b      	ldr	r3, [r3, #0]
 8006ac6:	3318      	adds	r3, #24
 8006ac8:	4619      	mov	r1, r3
 8006aca:	6878      	ldr	r0, [r7, #4]
 8006acc:	f7fe fe61 	bl	8005792 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8006ad0:	2101      	movs	r1, #1
 8006ad2:	6838      	ldr	r0, [r7, #0]
 8006ad4:	f000 fa80 	bl	8006fd8 <prvAddCurrentTaskToDelayedList>
}
 8006ad8:	bf00      	nop
 8006ada:	3710      	adds	r7, #16
 8006adc:	46bd      	mov	sp, r7
 8006ade:	bd80      	pop	{r7, pc}
 8006ae0:	20000ba8 	.word	0x20000ba8

08006ae4 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8006ae4:	b580      	push	{r7, lr}
 8006ae6:	b086      	sub	sp, #24
 8006ae8:	af00      	add	r7, sp, #0
 8006aea:	60f8      	str	r0, [r7, #12]
 8006aec:	60b9      	str	r1, [r7, #8]
 8006aee:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8006af0:	68fb      	ldr	r3, [r7, #12]
 8006af2:	2b00      	cmp	r3, #0
 8006af4:	d10a      	bne.n	8006b0c <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 8006af6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006afa:	f383 8811 	msr	BASEPRI, r3
 8006afe:	f3bf 8f6f 	isb	sy
 8006b02:	f3bf 8f4f 	dsb	sy
 8006b06:	617b      	str	r3, [r7, #20]
}
 8006b08:	bf00      	nop
 8006b0a:	e7fe      	b.n	8006b0a <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8006b0c:	4b0a      	ldr	r3, [pc, #40]	; (8006b38 <vTaskPlaceOnEventListRestricted+0x54>)
 8006b0e:	681b      	ldr	r3, [r3, #0]
 8006b10:	3318      	adds	r3, #24
 8006b12:	4619      	mov	r1, r3
 8006b14:	68f8      	ldr	r0, [r7, #12]
 8006b16:	f7fe fe18 	bl	800574a <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8006b1a:	687b      	ldr	r3, [r7, #4]
 8006b1c:	2b00      	cmp	r3, #0
 8006b1e:	d002      	beq.n	8006b26 <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 8006b20:	f04f 33ff 	mov.w	r3, #4294967295
 8006b24:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8006b26:	6879      	ldr	r1, [r7, #4]
 8006b28:	68b8      	ldr	r0, [r7, #8]
 8006b2a:	f000 fa55 	bl	8006fd8 <prvAddCurrentTaskToDelayedList>
	}
 8006b2e:	bf00      	nop
 8006b30:	3718      	adds	r7, #24
 8006b32:	46bd      	mov	sp, r7
 8006b34:	bd80      	pop	{r7, pc}
 8006b36:	bf00      	nop
 8006b38:	20000ba8 	.word	0x20000ba8

08006b3c <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8006b3c:	b580      	push	{r7, lr}
 8006b3e:	b086      	sub	sp, #24
 8006b40:	af00      	add	r7, sp, #0
 8006b42:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006b44:	687b      	ldr	r3, [r7, #4]
 8006b46:	68db      	ldr	r3, [r3, #12]
 8006b48:	68db      	ldr	r3, [r3, #12]
 8006b4a:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8006b4c:	693b      	ldr	r3, [r7, #16]
 8006b4e:	2b00      	cmp	r3, #0
 8006b50:	d10a      	bne.n	8006b68 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 8006b52:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006b56:	f383 8811 	msr	BASEPRI, r3
 8006b5a:	f3bf 8f6f 	isb	sy
 8006b5e:	f3bf 8f4f 	dsb	sy
 8006b62:	60fb      	str	r3, [r7, #12]
}
 8006b64:	bf00      	nop
 8006b66:	e7fe      	b.n	8006b66 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8006b68:	693b      	ldr	r3, [r7, #16]
 8006b6a:	3318      	adds	r3, #24
 8006b6c:	4618      	mov	r0, r3
 8006b6e:	f7fe fe49 	bl	8005804 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006b72:	4b1e      	ldr	r3, [pc, #120]	; (8006bec <xTaskRemoveFromEventList+0xb0>)
 8006b74:	681b      	ldr	r3, [r3, #0]
 8006b76:	2b00      	cmp	r3, #0
 8006b78:	d11d      	bne.n	8006bb6 <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8006b7a:	693b      	ldr	r3, [r7, #16]
 8006b7c:	3304      	adds	r3, #4
 8006b7e:	4618      	mov	r0, r3
 8006b80:	f7fe fe40 	bl	8005804 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8006b84:	693b      	ldr	r3, [r7, #16]
 8006b86:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006b88:	4b19      	ldr	r3, [pc, #100]	; (8006bf0 <xTaskRemoveFromEventList+0xb4>)
 8006b8a:	681b      	ldr	r3, [r3, #0]
 8006b8c:	429a      	cmp	r2, r3
 8006b8e:	d903      	bls.n	8006b98 <xTaskRemoveFromEventList+0x5c>
 8006b90:	693b      	ldr	r3, [r7, #16]
 8006b92:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006b94:	4a16      	ldr	r2, [pc, #88]	; (8006bf0 <xTaskRemoveFromEventList+0xb4>)
 8006b96:	6013      	str	r3, [r2, #0]
 8006b98:	693b      	ldr	r3, [r7, #16]
 8006b9a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006b9c:	4613      	mov	r3, r2
 8006b9e:	009b      	lsls	r3, r3, #2
 8006ba0:	4413      	add	r3, r2
 8006ba2:	009b      	lsls	r3, r3, #2
 8006ba4:	4a13      	ldr	r2, [pc, #76]	; (8006bf4 <xTaskRemoveFromEventList+0xb8>)
 8006ba6:	441a      	add	r2, r3
 8006ba8:	693b      	ldr	r3, [r7, #16]
 8006baa:	3304      	adds	r3, #4
 8006bac:	4619      	mov	r1, r3
 8006bae:	4610      	mov	r0, r2
 8006bb0:	f7fe fdcb 	bl	800574a <vListInsertEnd>
 8006bb4:	e005      	b.n	8006bc2 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8006bb6:	693b      	ldr	r3, [r7, #16]
 8006bb8:	3318      	adds	r3, #24
 8006bba:	4619      	mov	r1, r3
 8006bbc:	480e      	ldr	r0, [pc, #56]	; (8006bf8 <xTaskRemoveFromEventList+0xbc>)
 8006bbe:	f7fe fdc4 	bl	800574a <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8006bc2:	693b      	ldr	r3, [r7, #16]
 8006bc4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006bc6:	4b0d      	ldr	r3, [pc, #52]	; (8006bfc <xTaskRemoveFromEventList+0xc0>)
 8006bc8:	681b      	ldr	r3, [r3, #0]
 8006bca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006bcc:	429a      	cmp	r2, r3
 8006bce:	d905      	bls.n	8006bdc <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8006bd0:	2301      	movs	r3, #1
 8006bd2:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8006bd4:	4b0a      	ldr	r3, [pc, #40]	; (8006c00 <xTaskRemoveFromEventList+0xc4>)
 8006bd6:	2201      	movs	r2, #1
 8006bd8:	601a      	str	r2, [r3, #0]
 8006bda:	e001      	b.n	8006be0 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 8006bdc:	2300      	movs	r3, #0
 8006bde:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8006be0:	697b      	ldr	r3, [r7, #20]
}
 8006be2:	4618      	mov	r0, r3
 8006be4:	3718      	adds	r7, #24
 8006be6:	46bd      	mov	sp, r7
 8006be8:	bd80      	pop	{r7, pc}
 8006bea:	bf00      	nop
 8006bec:	200010a4 	.word	0x200010a4
 8006bf0:	20001084 	.word	0x20001084
 8006bf4:	20000bac 	.word	0x20000bac
 8006bf8:	2000103c 	.word	0x2000103c
 8006bfc:	20000ba8 	.word	0x20000ba8
 8006c00:	20001090 	.word	0x20001090

08006c04 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8006c04:	b480      	push	{r7}
 8006c06:	b083      	sub	sp, #12
 8006c08:	af00      	add	r7, sp, #0
 8006c0a:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8006c0c:	4b06      	ldr	r3, [pc, #24]	; (8006c28 <vTaskInternalSetTimeOutState+0x24>)
 8006c0e:	681a      	ldr	r2, [r3, #0]
 8006c10:	687b      	ldr	r3, [r7, #4]
 8006c12:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8006c14:	4b05      	ldr	r3, [pc, #20]	; (8006c2c <vTaskInternalSetTimeOutState+0x28>)
 8006c16:	681a      	ldr	r2, [r3, #0]
 8006c18:	687b      	ldr	r3, [r7, #4]
 8006c1a:	605a      	str	r2, [r3, #4]
}
 8006c1c:	bf00      	nop
 8006c1e:	370c      	adds	r7, #12
 8006c20:	46bd      	mov	sp, r7
 8006c22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c26:	4770      	bx	lr
 8006c28:	20001094 	.word	0x20001094
 8006c2c:	20001080 	.word	0x20001080

08006c30 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8006c30:	b580      	push	{r7, lr}
 8006c32:	b088      	sub	sp, #32
 8006c34:	af00      	add	r7, sp, #0
 8006c36:	6078      	str	r0, [r7, #4]
 8006c38:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8006c3a:	687b      	ldr	r3, [r7, #4]
 8006c3c:	2b00      	cmp	r3, #0
 8006c3e:	d10a      	bne.n	8006c56 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8006c40:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006c44:	f383 8811 	msr	BASEPRI, r3
 8006c48:	f3bf 8f6f 	isb	sy
 8006c4c:	f3bf 8f4f 	dsb	sy
 8006c50:	613b      	str	r3, [r7, #16]
}
 8006c52:	bf00      	nop
 8006c54:	e7fe      	b.n	8006c54 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8006c56:	683b      	ldr	r3, [r7, #0]
 8006c58:	2b00      	cmp	r3, #0
 8006c5a:	d10a      	bne.n	8006c72 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8006c5c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006c60:	f383 8811 	msr	BASEPRI, r3
 8006c64:	f3bf 8f6f 	isb	sy
 8006c68:	f3bf 8f4f 	dsb	sy
 8006c6c:	60fb      	str	r3, [r7, #12]
}
 8006c6e:	bf00      	nop
 8006c70:	e7fe      	b.n	8006c70 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 8006c72:	f000 fe7f 	bl	8007974 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8006c76:	4b1d      	ldr	r3, [pc, #116]	; (8006cec <xTaskCheckForTimeOut+0xbc>)
 8006c78:	681b      	ldr	r3, [r3, #0]
 8006c7a:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8006c7c:	687b      	ldr	r3, [r7, #4]
 8006c7e:	685b      	ldr	r3, [r3, #4]
 8006c80:	69ba      	ldr	r2, [r7, #24]
 8006c82:	1ad3      	subs	r3, r2, r3
 8006c84:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8006c86:	683b      	ldr	r3, [r7, #0]
 8006c88:	681b      	ldr	r3, [r3, #0]
 8006c8a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006c8e:	d102      	bne.n	8006c96 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8006c90:	2300      	movs	r3, #0
 8006c92:	61fb      	str	r3, [r7, #28]
 8006c94:	e023      	b.n	8006cde <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8006c96:	687b      	ldr	r3, [r7, #4]
 8006c98:	681a      	ldr	r2, [r3, #0]
 8006c9a:	4b15      	ldr	r3, [pc, #84]	; (8006cf0 <xTaskCheckForTimeOut+0xc0>)
 8006c9c:	681b      	ldr	r3, [r3, #0]
 8006c9e:	429a      	cmp	r2, r3
 8006ca0:	d007      	beq.n	8006cb2 <xTaskCheckForTimeOut+0x82>
 8006ca2:	687b      	ldr	r3, [r7, #4]
 8006ca4:	685b      	ldr	r3, [r3, #4]
 8006ca6:	69ba      	ldr	r2, [r7, #24]
 8006ca8:	429a      	cmp	r2, r3
 8006caa:	d302      	bcc.n	8006cb2 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8006cac:	2301      	movs	r3, #1
 8006cae:	61fb      	str	r3, [r7, #28]
 8006cb0:	e015      	b.n	8006cde <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8006cb2:	683b      	ldr	r3, [r7, #0]
 8006cb4:	681b      	ldr	r3, [r3, #0]
 8006cb6:	697a      	ldr	r2, [r7, #20]
 8006cb8:	429a      	cmp	r2, r3
 8006cba:	d20b      	bcs.n	8006cd4 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8006cbc:	683b      	ldr	r3, [r7, #0]
 8006cbe:	681a      	ldr	r2, [r3, #0]
 8006cc0:	697b      	ldr	r3, [r7, #20]
 8006cc2:	1ad2      	subs	r2, r2, r3
 8006cc4:	683b      	ldr	r3, [r7, #0]
 8006cc6:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8006cc8:	6878      	ldr	r0, [r7, #4]
 8006cca:	f7ff ff9b 	bl	8006c04 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8006cce:	2300      	movs	r3, #0
 8006cd0:	61fb      	str	r3, [r7, #28]
 8006cd2:	e004      	b.n	8006cde <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8006cd4:	683b      	ldr	r3, [r7, #0]
 8006cd6:	2200      	movs	r2, #0
 8006cd8:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8006cda:	2301      	movs	r3, #1
 8006cdc:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8006cde:	f000 fe79 	bl	80079d4 <vPortExitCritical>

	return xReturn;
 8006ce2:	69fb      	ldr	r3, [r7, #28]
}
 8006ce4:	4618      	mov	r0, r3
 8006ce6:	3720      	adds	r7, #32
 8006ce8:	46bd      	mov	sp, r7
 8006cea:	bd80      	pop	{r7, pc}
 8006cec:	20001080 	.word	0x20001080
 8006cf0:	20001094 	.word	0x20001094

08006cf4 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8006cf4:	b480      	push	{r7}
 8006cf6:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8006cf8:	4b03      	ldr	r3, [pc, #12]	; (8006d08 <vTaskMissedYield+0x14>)
 8006cfa:	2201      	movs	r2, #1
 8006cfc:	601a      	str	r2, [r3, #0]
}
 8006cfe:	bf00      	nop
 8006d00:	46bd      	mov	sp, r7
 8006d02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d06:	4770      	bx	lr
 8006d08:	20001090 	.word	0x20001090

08006d0c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8006d0c:	b580      	push	{r7, lr}
 8006d0e:	b082      	sub	sp, #8
 8006d10:	af00      	add	r7, sp, #0
 8006d12:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8006d14:	f000 f852 	bl	8006dbc <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8006d18:	4b06      	ldr	r3, [pc, #24]	; (8006d34 <prvIdleTask+0x28>)
 8006d1a:	681b      	ldr	r3, [r3, #0]
 8006d1c:	2b01      	cmp	r3, #1
 8006d1e:	d9f9      	bls.n	8006d14 <prvIdleTask+0x8>
			{
				taskYIELD();
 8006d20:	4b05      	ldr	r3, [pc, #20]	; (8006d38 <prvIdleTask+0x2c>)
 8006d22:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006d26:	601a      	str	r2, [r3, #0]
 8006d28:	f3bf 8f4f 	dsb	sy
 8006d2c:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8006d30:	e7f0      	b.n	8006d14 <prvIdleTask+0x8>
 8006d32:	bf00      	nop
 8006d34:	20000bac 	.word	0x20000bac
 8006d38:	e000ed04 	.word	0xe000ed04

08006d3c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8006d3c:	b580      	push	{r7, lr}
 8006d3e:	b082      	sub	sp, #8
 8006d40:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8006d42:	2300      	movs	r3, #0
 8006d44:	607b      	str	r3, [r7, #4]
 8006d46:	e00c      	b.n	8006d62 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8006d48:	687a      	ldr	r2, [r7, #4]
 8006d4a:	4613      	mov	r3, r2
 8006d4c:	009b      	lsls	r3, r3, #2
 8006d4e:	4413      	add	r3, r2
 8006d50:	009b      	lsls	r3, r3, #2
 8006d52:	4a12      	ldr	r2, [pc, #72]	; (8006d9c <prvInitialiseTaskLists+0x60>)
 8006d54:	4413      	add	r3, r2
 8006d56:	4618      	mov	r0, r3
 8006d58:	f7fe fcca 	bl	80056f0 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8006d5c:	687b      	ldr	r3, [r7, #4]
 8006d5e:	3301      	adds	r3, #1
 8006d60:	607b      	str	r3, [r7, #4]
 8006d62:	687b      	ldr	r3, [r7, #4]
 8006d64:	2b37      	cmp	r3, #55	; 0x37
 8006d66:	d9ef      	bls.n	8006d48 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8006d68:	480d      	ldr	r0, [pc, #52]	; (8006da0 <prvInitialiseTaskLists+0x64>)
 8006d6a:	f7fe fcc1 	bl	80056f0 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8006d6e:	480d      	ldr	r0, [pc, #52]	; (8006da4 <prvInitialiseTaskLists+0x68>)
 8006d70:	f7fe fcbe 	bl	80056f0 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8006d74:	480c      	ldr	r0, [pc, #48]	; (8006da8 <prvInitialiseTaskLists+0x6c>)
 8006d76:	f7fe fcbb 	bl	80056f0 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8006d7a:	480c      	ldr	r0, [pc, #48]	; (8006dac <prvInitialiseTaskLists+0x70>)
 8006d7c:	f7fe fcb8 	bl	80056f0 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8006d80:	480b      	ldr	r0, [pc, #44]	; (8006db0 <prvInitialiseTaskLists+0x74>)
 8006d82:	f7fe fcb5 	bl	80056f0 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8006d86:	4b0b      	ldr	r3, [pc, #44]	; (8006db4 <prvInitialiseTaskLists+0x78>)
 8006d88:	4a05      	ldr	r2, [pc, #20]	; (8006da0 <prvInitialiseTaskLists+0x64>)
 8006d8a:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8006d8c:	4b0a      	ldr	r3, [pc, #40]	; (8006db8 <prvInitialiseTaskLists+0x7c>)
 8006d8e:	4a05      	ldr	r2, [pc, #20]	; (8006da4 <prvInitialiseTaskLists+0x68>)
 8006d90:	601a      	str	r2, [r3, #0]
}
 8006d92:	bf00      	nop
 8006d94:	3708      	adds	r7, #8
 8006d96:	46bd      	mov	sp, r7
 8006d98:	bd80      	pop	{r7, pc}
 8006d9a:	bf00      	nop
 8006d9c:	20000bac 	.word	0x20000bac
 8006da0:	2000100c 	.word	0x2000100c
 8006da4:	20001020 	.word	0x20001020
 8006da8:	2000103c 	.word	0x2000103c
 8006dac:	20001050 	.word	0x20001050
 8006db0:	20001068 	.word	0x20001068
 8006db4:	20001034 	.word	0x20001034
 8006db8:	20001038 	.word	0x20001038

08006dbc <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8006dbc:	b580      	push	{r7, lr}
 8006dbe:	b082      	sub	sp, #8
 8006dc0:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8006dc2:	e019      	b.n	8006df8 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8006dc4:	f000 fdd6 	bl	8007974 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006dc8:	4b10      	ldr	r3, [pc, #64]	; (8006e0c <prvCheckTasksWaitingTermination+0x50>)
 8006dca:	68db      	ldr	r3, [r3, #12]
 8006dcc:	68db      	ldr	r3, [r3, #12]
 8006dce:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006dd0:	687b      	ldr	r3, [r7, #4]
 8006dd2:	3304      	adds	r3, #4
 8006dd4:	4618      	mov	r0, r3
 8006dd6:	f7fe fd15 	bl	8005804 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8006dda:	4b0d      	ldr	r3, [pc, #52]	; (8006e10 <prvCheckTasksWaitingTermination+0x54>)
 8006ddc:	681b      	ldr	r3, [r3, #0]
 8006dde:	3b01      	subs	r3, #1
 8006de0:	4a0b      	ldr	r2, [pc, #44]	; (8006e10 <prvCheckTasksWaitingTermination+0x54>)
 8006de2:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8006de4:	4b0b      	ldr	r3, [pc, #44]	; (8006e14 <prvCheckTasksWaitingTermination+0x58>)
 8006de6:	681b      	ldr	r3, [r3, #0]
 8006de8:	3b01      	subs	r3, #1
 8006dea:	4a0a      	ldr	r2, [pc, #40]	; (8006e14 <prvCheckTasksWaitingTermination+0x58>)
 8006dec:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8006dee:	f000 fdf1 	bl	80079d4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8006df2:	6878      	ldr	r0, [r7, #4]
 8006df4:	f000 f810 	bl	8006e18 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8006df8:	4b06      	ldr	r3, [pc, #24]	; (8006e14 <prvCheckTasksWaitingTermination+0x58>)
 8006dfa:	681b      	ldr	r3, [r3, #0]
 8006dfc:	2b00      	cmp	r3, #0
 8006dfe:	d1e1      	bne.n	8006dc4 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8006e00:	bf00      	nop
 8006e02:	bf00      	nop
 8006e04:	3708      	adds	r7, #8
 8006e06:	46bd      	mov	sp, r7
 8006e08:	bd80      	pop	{r7, pc}
 8006e0a:	bf00      	nop
 8006e0c:	20001050 	.word	0x20001050
 8006e10:	2000107c 	.word	0x2000107c
 8006e14:	20001064 	.word	0x20001064

08006e18 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8006e18:	b580      	push	{r7, lr}
 8006e1a:	b084      	sub	sp, #16
 8006e1c:	af00      	add	r7, sp, #0
 8006e1e:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8006e20:	687b      	ldr	r3, [r7, #4]
 8006e22:	3354      	adds	r3, #84	; 0x54
 8006e24:	4618      	mov	r0, r3
 8006e26:	f002 f907 	bl	8009038 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8006e2a:	687b      	ldr	r3, [r7, #4]
 8006e2c:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 8006e30:	2b00      	cmp	r3, #0
 8006e32:	d108      	bne.n	8006e46 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8006e34:	687b      	ldr	r3, [r7, #4]
 8006e36:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006e38:	4618      	mov	r0, r3
 8006e3a:	f000 ff89 	bl	8007d50 <vPortFree>
				vPortFree( pxTCB );
 8006e3e:	6878      	ldr	r0, [r7, #4]
 8006e40:	f000 ff86 	bl	8007d50 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8006e44:	e018      	b.n	8006e78 <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8006e46:	687b      	ldr	r3, [r7, #4]
 8006e48:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 8006e4c:	2b01      	cmp	r3, #1
 8006e4e:	d103      	bne.n	8006e58 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8006e50:	6878      	ldr	r0, [r7, #4]
 8006e52:	f000 ff7d 	bl	8007d50 <vPortFree>
	}
 8006e56:	e00f      	b.n	8006e78 <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8006e58:	687b      	ldr	r3, [r7, #4]
 8006e5a:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 8006e5e:	2b02      	cmp	r3, #2
 8006e60:	d00a      	beq.n	8006e78 <prvDeleteTCB+0x60>
	__asm volatile
 8006e62:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006e66:	f383 8811 	msr	BASEPRI, r3
 8006e6a:	f3bf 8f6f 	isb	sy
 8006e6e:	f3bf 8f4f 	dsb	sy
 8006e72:	60fb      	str	r3, [r7, #12]
}
 8006e74:	bf00      	nop
 8006e76:	e7fe      	b.n	8006e76 <prvDeleteTCB+0x5e>
	}
 8006e78:	bf00      	nop
 8006e7a:	3710      	adds	r7, #16
 8006e7c:	46bd      	mov	sp, r7
 8006e7e:	bd80      	pop	{r7, pc}

08006e80 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8006e80:	b480      	push	{r7}
 8006e82:	b083      	sub	sp, #12
 8006e84:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006e86:	4b0c      	ldr	r3, [pc, #48]	; (8006eb8 <prvResetNextTaskUnblockTime+0x38>)
 8006e88:	681b      	ldr	r3, [r3, #0]
 8006e8a:	681b      	ldr	r3, [r3, #0]
 8006e8c:	2b00      	cmp	r3, #0
 8006e8e:	d104      	bne.n	8006e9a <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8006e90:	4b0a      	ldr	r3, [pc, #40]	; (8006ebc <prvResetNextTaskUnblockTime+0x3c>)
 8006e92:	f04f 32ff 	mov.w	r2, #4294967295
 8006e96:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8006e98:	e008      	b.n	8006eac <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006e9a:	4b07      	ldr	r3, [pc, #28]	; (8006eb8 <prvResetNextTaskUnblockTime+0x38>)
 8006e9c:	681b      	ldr	r3, [r3, #0]
 8006e9e:	68db      	ldr	r3, [r3, #12]
 8006ea0:	68db      	ldr	r3, [r3, #12]
 8006ea2:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8006ea4:	687b      	ldr	r3, [r7, #4]
 8006ea6:	685b      	ldr	r3, [r3, #4]
 8006ea8:	4a04      	ldr	r2, [pc, #16]	; (8006ebc <prvResetNextTaskUnblockTime+0x3c>)
 8006eaa:	6013      	str	r3, [r2, #0]
}
 8006eac:	bf00      	nop
 8006eae:	370c      	adds	r7, #12
 8006eb0:	46bd      	mov	sp, r7
 8006eb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006eb6:	4770      	bx	lr
 8006eb8:	20001034 	.word	0x20001034
 8006ebc:	2000109c 	.word	0x2000109c

08006ec0 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8006ec0:	b480      	push	{r7}
 8006ec2:	b083      	sub	sp, #12
 8006ec4:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8006ec6:	4b0b      	ldr	r3, [pc, #44]	; (8006ef4 <xTaskGetSchedulerState+0x34>)
 8006ec8:	681b      	ldr	r3, [r3, #0]
 8006eca:	2b00      	cmp	r3, #0
 8006ecc:	d102      	bne.n	8006ed4 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8006ece:	2301      	movs	r3, #1
 8006ed0:	607b      	str	r3, [r7, #4]
 8006ed2:	e008      	b.n	8006ee6 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006ed4:	4b08      	ldr	r3, [pc, #32]	; (8006ef8 <xTaskGetSchedulerState+0x38>)
 8006ed6:	681b      	ldr	r3, [r3, #0]
 8006ed8:	2b00      	cmp	r3, #0
 8006eda:	d102      	bne.n	8006ee2 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8006edc:	2302      	movs	r3, #2
 8006ede:	607b      	str	r3, [r7, #4]
 8006ee0:	e001      	b.n	8006ee6 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8006ee2:	2300      	movs	r3, #0
 8006ee4:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8006ee6:	687b      	ldr	r3, [r7, #4]
	}
 8006ee8:	4618      	mov	r0, r3
 8006eea:	370c      	adds	r7, #12
 8006eec:	46bd      	mov	sp, r7
 8006eee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ef2:	4770      	bx	lr
 8006ef4:	20001088 	.word	0x20001088
 8006ef8:	200010a4 	.word	0x200010a4

08006efc <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8006efc:	b580      	push	{r7, lr}
 8006efe:	b086      	sub	sp, #24
 8006f00:	af00      	add	r7, sp, #0
 8006f02:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8006f04:	687b      	ldr	r3, [r7, #4]
 8006f06:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8006f08:	2300      	movs	r3, #0
 8006f0a:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8006f0c:	687b      	ldr	r3, [r7, #4]
 8006f0e:	2b00      	cmp	r3, #0
 8006f10:	d056      	beq.n	8006fc0 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8006f12:	4b2e      	ldr	r3, [pc, #184]	; (8006fcc <xTaskPriorityDisinherit+0xd0>)
 8006f14:	681b      	ldr	r3, [r3, #0]
 8006f16:	693a      	ldr	r2, [r7, #16]
 8006f18:	429a      	cmp	r2, r3
 8006f1a:	d00a      	beq.n	8006f32 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8006f1c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006f20:	f383 8811 	msr	BASEPRI, r3
 8006f24:	f3bf 8f6f 	isb	sy
 8006f28:	f3bf 8f4f 	dsb	sy
 8006f2c:	60fb      	str	r3, [r7, #12]
}
 8006f2e:	bf00      	nop
 8006f30:	e7fe      	b.n	8006f30 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8006f32:	693b      	ldr	r3, [r7, #16]
 8006f34:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006f36:	2b00      	cmp	r3, #0
 8006f38:	d10a      	bne.n	8006f50 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 8006f3a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006f3e:	f383 8811 	msr	BASEPRI, r3
 8006f42:	f3bf 8f6f 	isb	sy
 8006f46:	f3bf 8f4f 	dsb	sy
 8006f4a:	60bb      	str	r3, [r7, #8]
}
 8006f4c:	bf00      	nop
 8006f4e:	e7fe      	b.n	8006f4e <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8006f50:	693b      	ldr	r3, [r7, #16]
 8006f52:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006f54:	1e5a      	subs	r2, r3, #1
 8006f56:	693b      	ldr	r3, [r7, #16]
 8006f58:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8006f5a:	693b      	ldr	r3, [r7, #16]
 8006f5c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006f5e:	693b      	ldr	r3, [r7, #16]
 8006f60:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006f62:	429a      	cmp	r2, r3
 8006f64:	d02c      	beq.n	8006fc0 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8006f66:	693b      	ldr	r3, [r7, #16]
 8006f68:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006f6a:	2b00      	cmp	r3, #0
 8006f6c:	d128      	bne.n	8006fc0 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006f6e:	693b      	ldr	r3, [r7, #16]
 8006f70:	3304      	adds	r3, #4
 8006f72:	4618      	mov	r0, r3
 8006f74:	f7fe fc46 	bl	8005804 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8006f78:	693b      	ldr	r3, [r7, #16]
 8006f7a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8006f7c:	693b      	ldr	r3, [r7, #16]
 8006f7e:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006f80:	693b      	ldr	r3, [r7, #16]
 8006f82:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006f84:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8006f88:	693b      	ldr	r3, [r7, #16]
 8006f8a:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8006f8c:	693b      	ldr	r3, [r7, #16]
 8006f8e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006f90:	4b0f      	ldr	r3, [pc, #60]	; (8006fd0 <xTaskPriorityDisinherit+0xd4>)
 8006f92:	681b      	ldr	r3, [r3, #0]
 8006f94:	429a      	cmp	r2, r3
 8006f96:	d903      	bls.n	8006fa0 <xTaskPriorityDisinherit+0xa4>
 8006f98:	693b      	ldr	r3, [r7, #16]
 8006f9a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006f9c:	4a0c      	ldr	r2, [pc, #48]	; (8006fd0 <xTaskPriorityDisinherit+0xd4>)
 8006f9e:	6013      	str	r3, [r2, #0]
 8006fa0:	693b      	ldr	r3, [r7, #16]
 8006fa2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006fa4:	4613      	mov	r3, r2
 8006fa6:	009b      	lsls	r3, r3, #2
 8006fa8:	4413      	add	r3, r2
 8006faa:	009b      	lsls	r3, r3, #2
 8006fac:	4a09      	ldr	r2, [pc, #36]	; (8006fd4 <xTaskPriorityDisinherit+0xd8>)
 8006fae:	441a      	add	r2, r3
 8006fb0:	693b      	ldr	r3, [r7, #16]
 8006fb2:	3304      	adds	r3, #4
 8006fb4:	4619      	mov	r1, r3
 8006fb6:	4610      	mov	r0, r2
 8006fb8:	f7fe fbc7 	bl	800574a <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8006fbc:	2301      	movs	r3, #1
 8006fbe:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8006fc0:	697b      	ldr	r3, [r7, #20]
	}
 8006fc2:	4618      	mov	r0, r3
 8006fc4:	3718      	adds	r7, #24
 8006fc6:	46bd      	mov	sp, r7
 8006fc8:	bd80      	pop	{r7, pc}
 8006fca:	bf00      	nop
 8006fcc:	20000ba8 	.word	0x20000ba8
 8006fd0:	20001084 	.word	0x20001084
 8006fd4:	20000bac 	.word	0x20000bac

08006fd8 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8006fd8:	b580      	push	{r7, lr}
 8006fda:	b084      	sub	sp, #16
 8006fdc:	af00      	add	r7, sp, #0
 8006fde:	6078      	str	r0, [r7, #4]
 8006fe0:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8006fe2:	4b21      	ldr	r3, [pc, #132]	; (8007068 <prvAddCurrentTaskToDelayedList+0x90>)
 8006fe4:	681b      	ldr	r3, [r3, #0]
 8006fe6:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006fe8:	4b20      	ldr	r3, [pc, #128]	; (800706c <prvAddCurrentTaskToDelayedList+0x94>)
 8006fea:	681b      	ldr	r3, [r3, #0]
 8006fec:	3304      	adds	r3, #4
 8006fee:	4618      	mov	r0, r3
 8006ff0:	f7fe fc08 	bl	8005804 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8006ff4:	687b      	ldr	r3, [r7, #4]
 8006ff6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006ffa:	d10a      	bne.n	8007012 <prvAddCurrentTaskToDelayedList+0x3a>
 8006ffc:	683b      	ldr	r3, [r7, #0]
 8006ffe:	2b00      	cmp	r3, #0
 8007000:	d007      	beq.n	8007012 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007002:	4b1a      	ldr	r3, [pc, #104]	; (800706c <prvAddCurrentTaskToDelayedList+0x94>)
 8007004:	681b      	ldr	r3, [r3, #0]
 8007006:	3304      	adds	r3, #4
 8007008:	4619      	mov	r1, r3
 800700a:	4819      	ldr	r0, [pc, #100]	; (8007070 <prvAddCurrentTaskToDelayedList+0x98>)
 800700c:	f7fe fb9d 	bl	800574a <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8007010:	e026      	b.n	8007060 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8007012:	68fa      	ldr	r2, [r7, #12]
 8007014:	687b      	ldr	r3, [r7, #4]
 8007016:	4413      	add	r3, r2
 8007018:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800701a:	4b14      	ldr	r3, [pc, #80]	; (800706c <prvAddCurrentTaskToDelayedList+0x94>)
 800701c:	681b      	ldr	r3, [r3, #0]
 800701e:	68ba      	ldr	r2, [r7, #8]
 8007020:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8007022:	68ba      	ldr	r2, [r7, #8]
 8007024:	68fb      	ldr	r3, [r7, #12]
 8007026:	429a      	cmp	r2, r3
 8007028:	d209      	bcs.n	800703e <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800702a:	4b12      	ldr	r3, [pc, #72]	; (8007074 <prvAddCurrentTaskToDelayedList+0x9c>)
 800702c:	681a      	ldr	r2, [r3, #0]
 800702e:	4b0f      	ldr	r3, [pc, #60]	; (800706c <prvAddCurrentTaskToDelayedList+0x94>)
 8007030:	681b      	ldr	r3, [r3, #0]
 8007032:	3304      	adds	r3, #4
 8007034:	4619      	mov	r1, r3
 8007036:	4610      	mov	r0, r2
 8007038:	f7fe fbab 	bl	8005792 <vListInsert>
}
 800703c:	e010      	b.n	8007060 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800703e:	4b0e      	ldr	r3, [pc, #56]	; (8007078 <prvAddCurrentTaskToDelayedList+0xa0>)
 8007040:	681a      	ldr	r2, [r3, #0]
 8007042:	4b0a      	ldr	r3, [pc, #40]	; (800706c <prvAddCurrentTaskToDelayedList+0x94>)
 8007044:	681b      	ldr	r3, [r3, #0]
 8007046:	3304      	adds	r3, #4
 8007048:	4619      	mov	r1, r3
 800704a:	4610      	mov	r0, r2
 800704c:	f7fe fba1 	bl	8005792 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8007050:	4b0a      	ldr	r3, [pc, #40]	; (800707c <prvAddCurrentTaskToDelayedList+0xa4>)
 8007052:	681b      	ldr	r3, [r3, #0]
 8007054:	68ba      	ldr	r2, [r7, #8]
 8007056:	429a      	cmp	r2, r3
 8007058:	d202      	bcs.n	8007060 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800705a:	4a08      	ldr	r2, [pc, #32]	; (800707c <prvAddCurrentTaskToDelayedList+0xa4>)
 800705c:	68bb      	ldr	r3, [r7, #8]
 800705e:	6013      	str	r3, [r2, #0]
}
 8007060:	bf00      	nop
 8007062:	3710      	adds	r7, #16
 8007064:	46bd      	mov	sp, r7
 8007066:	bd80      	pop	{r7, pc}
 8007068:	20001080 	.word	0x20001080
 800706c:	20000ba8 	.word	0x20000ba8
 8007070:	20001068 	.word	0x20001068
 8007074:	20001038 	.word	0x20001038
 8007078:	20001034 	.word	0x20001034
 800707c:	2000109c 	.word	0x2000109c

08007080 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8007080:	b580      	push	{r7, lr}
 8007082:	b08a      	sub	sp, #40	; 0x28
 8007084:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8007086:	2300      	movs	r3, #0
 8007088:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800708a:	f000 fb07 	bl	800769c <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800708e:	4b1c      	ldr	r3, [pc, #112]	; (8007100 <xTimerCreateTimerTask+0x80>)
 8007090:	681b      	ldr	r3, [r3, #0]
 8007092:	2b00      	cmp	r3, #0
 8007094:	d021      	beq.n	80070da <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8007096:	2300      	movs	r3, #0
 8007098:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800709a:	2300      	movs	r3, #0
 800709c:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800709e:	1d3a      	adds	r2, r7, #4
 80070a0:	f107 0108 	add.w	r1, r7, #8
 80070a4:	f107 030c 	add.w	r3, r7, #12
 80070a8:	4618      	mov	r0, r3
 80070aa:	f7fe fb07 	bl	80056bc <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 80070ae:	6879      	ldr	r1, [r7, #4]
 80070b0:	68bb      	ldr	r3, [r7, #8]
 80070b2:	68fa      	ldr	r2, [r7, #12]
 80070b4:	9202      	str	r2, [sp, #8]
 80070b6:	9301      	str	r3, [sp, #4]
 80070b8:	2302      	movs	r3, #2
 80070ba:	9300      	str	r3, [sp, #0]
 80070bc:	2300      	movs	r3, #0
 80070be:	460a      	mov	r2, r1
 80070c0:	4910      	ldr	r1, [pc, #64]	; (8007104 <xTimerCreateTimerTask+0x84>)
 80070c2:	4811      	ldr	r0, [pc, #68]	; (8007108 <xTimerCreateTimerTask+0x88>)
 80070c4:	f7ff f8b4 	bl	8006230 <xTaskCreateStatic>
 80070c8:	4603      	mov	r3, r0
 80070ca:	4a10      	ldr	r2, [pc, #64]	; (800710c <xTimerCreateTimerTask+0x8c>)
 80070cc:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 80070ce:	4b0f      	ldr	r3, [pc, #60]	; (800710c <xTimerCreateTimerTask+0x8c>)
 80070d0:	681b      	ldr	r3, [r3, #0]
 80070d2:	2b00      	cmp	r3, #0
 80070d4:	d001      	beq.n	80070da <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 80070d6:	2301      	movs	r3, #1
 80070d8:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 80070da:	697b      	ldr	r3, [r7, #20]
 80070dc:	2b00      	cmp	r3, #0
 80070de:	d10a      	bne.n	80070f6 <xTimerCreateTimerTask+0x76>
	__asm volatile
 80070e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80070e4:	f383 8811 	msr	BASEPRI, r3
 80070e8:	f3bf 8f6f 	isb	sy
 80070ec:	f3bf 8f4f 	dsb	sy
 80070f0:	613b      	str	r3, [r7, #16]
}
 80070f2:	bf00      	nop
 80070f4:	e7fe      	b.n	80070f4 <xTimerCreateTimerTask+0x74>
	return xReturn;
 80070f6:	697b      	ldr	r3, [r7, #20]
}
 80070f8:	4618      	mov	r0, r3
 80070fa:	3718      	adds	r7, #24
 80070fc:	46bd      	mov	sp, r7
 80070fe:	bd80      	pop	{r7, pc}
 8007100:	200010d8 	.word	0x200010d8
 8007104:	0800ca18 	.word	0x0800ca18
 8007108:	08007245 	.word	0x08007245
 800710c:	200010dc 	.word	0x200010dc

08007110 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8007110:	b580      	push	{r7, lr}
 8007112:	b08a      	sub	sp, #40	; 0x28
 8007114:	af00      	add	r7, sp, #0
 8007116:	60f8      	str	r0, [r7, #12]
 8007118:	60b9      	str	r1, [r7, #8]
 800711a:	607a      	str	r2, [r7, #4]
 800711c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800711e:	2300      	movs	r3, #0
 8007120:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8007122:	68fb      	ldr	r3, [r7, #12]
 8007124:	2b00      	cmp	r3, #0
 8007126:	d10a      	bne.n	800713e <xTimerGenericCommand+0x2e>
	__asm volatile
 8007128:	f04f 0350 	mov.w	r3, #80	; 0x50
 800712c:	f383 8811 	msr	BASEPRI, r3
 8007130:	f3bf 8f6f 	isb	sy
 8007134:	f3bf 8f4f 	dsb	sy
 8007138:	623b      	str	r3, [r7, #32]
}
 800713a:	bf00      	nop
 800713c:	e7fe      	b.n	800713c <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800713e:	4b1a      	ldr	r3, [pc, #104]	; (80071a8 <xTimerGenericCommand+0x98>)
 8007140:	681b      	ldr	r3, [r3, #0]
 8007142:	2b00      	cmp	r3, #0
 8007144:	d02a      	beq.n	800719c <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8007146:	68bb      	ldr	r3, [r7, #8]
 8007148:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800714a:	687b      	ldr	r3, [r7, #4]
 800714c:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800714e:	68fb      	ldr	r3, [r7, #12]
 8007150:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8007152:	68bb      	ldr	r3, [r7, #8]
 8007154:	2b05      	cmp	r3, #5
 8007156:	dc18      	bgt.n	800718a <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8007158:	f7ff feb2 	bl	8006ec0 <xTaskGetSchedulerState>
 800715c:	4603      	mov	r3, r0
 800715e:	2b02      	cmp	r3, #2
 8007160:	d109      	bne.n	8007176 <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8007162:	4b11      	ldr	r3, [pc, #68]	; (80071a8 <xTimerGenericCommand+0x98>)
 8007164:	6818      	ldr	r0, [r3, #0]
 8007166:	f107 0110 	add.w	r1, r7, #16
 800716a:	2300      	movs	r3, #0
 800716c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800716e:	f7fe fc77 	bl	8005a60 <xQueueGenericSend>
 8007172:	6278      	str	r0, [r7, #36]	; 0x24
 8007174:	e012      	b.n	800719c <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8007176:	4b0c      	ldr	r3, [pc, #48]	; (80071a8 <xTimerGenericCommand+0x98>)
 8007178:	6818      	ldr	r0, [r3, #0]
 800717a:	f107 0110 	add.w	r1, r7, #16
 800717e:	2300      	movs	r3, #0
 8007180:	2200      	movs	r2, #0
 8007182:	f7fe fc6d 	bl	8005a60 <xQueueGenericSend>
 8007186:	6278      	str	r0, [r7, #36]	; 0x24
 8007188:	e008      	b.n	800719c <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800718a:	4b07      	ldr	r3, [pc, #28]	; (80071a8 <xTimerGenericCommand+0x98>)
 800718c:	6818      	ldr	r0, [r3, #0]
 800718e:	f107 0110 	add.w	r1, r7, #16
 8007192:	2300      	movs	r3, #0
 8007194:	683a      	ldr	r2, [r7, #0]
 8007196:	f7fe fd61 	bl	8005c5c <xQueueGenericSendFromISR>
 800719a:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800719c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800719e:	4618      	mov	r0, r3
 80071a0:	3728      	adds	r7, #40	; 0x28
 80071a2:	46bd      	mov	sp, r7
 80071a4:	bd80      	pop	{r7, pc}
 80071a6:	bf00      	nop
 80071a8:	200010d8 	.word	0x200010d8

080071ac <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 80071ac:	b580      	push	{r7, lr}
 80071ae:	b088      	sub	sp, #32
 80071b0:	af02      	add	r7, sp, #8
 80071b2:	6078      	str	r0, [r7, #4]
 80071b4:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80071b6:	4b22      	ldr	r3, [pc, #136]	; (8007240 <prvProcessExpiredTimer+0x94>)
 80071b8:	681b      	ldr	r3, [r3, #0]
 80071ba:	68db      	ldr	r3, [r3, #12]
 80071bc:	68db      	ldr	r3, [r3, #12]
 80071be:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80071c0:	697b      	ldr	r3, [r7, #20]
 80071c2:	3304      	adds	r3, #4
 80071c4:	4618      	mov	r0, r3
 80071c6:	f7fe fb1d 	bl	8005804 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80071ca:	697b      	ldr	r3, [r7, #20]
 80071cc:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80071d0:	f003 0304 	and.w	r3, r3, #4
 80071d4:	2b00      	cmp	r3, #0
 80071d6:	d022      	beq.n	800721e <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 80071d8:	697b      	ldr	r3, [r7, #20]
 80071da:	699a      	ldr	r2, [r3, #24]
 80071dc:	687b      	ldr	r3, [r7, #4]
 80071de:	18d1      	adds	r1, r2, r3
 80071e0:	687b      	ldr	r3, [r7, #4]
 80071e2:	683a      	ldr	r2, [r7, #0]
 80071e4:	6978      	ldr	r0, [r7, #20]
 80071e6:	f000 f8d1 	bl	800738c <prvInsertTimerInActiveList>
 80071ea:	4603      	mov	r3, r0
 80071ec:	2b00      	cmp	r3, #0
 80071ee:	d01f      	beq.n	8007230 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80071f0:	2300      	movs	r3, #0
 80071f2:	9300      	str	r3, [sp, #0]
 80071f4:	2300      	movs	r3, #0
 80071f6:	687a      	ldr	r2, [r7, #4]
 80071f8:	2100      	movs	r1, #0
 80071fa:	6978      	ldr	r0, [r7, #20]
 80071fc:	f7ff ff88 	bl	8007110 <xTimerGenericCommand>
 8007200:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8007202:	693b      	ldr	r3, [r7, #16]
 8007204:	2b00      	cmp	r3, #0
 8007206:	d113      	bne.n	8007230 <prvProcessExpiredTimer+0x84>
	__asm volatile
 8007208:	f04f 0350 	mov.w	r3, #80	; 0x50
 800720c:	f383 8811 	msr	BASEPRI, r3
 8007210:	f3bf 8f6f 	isb	sy
 8007214:	f3bf 8f4f 	dsb	sy
 8007218:	60fb      	str	r3, [r7, #12]
}
 800721a:	bf00      	nop
 800721c:	e7fe      	b.n	800721c <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800721e:	697b      	ldr	r3, [r7, #20]
 8007220:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007224:	f023 0301 	bic.w	r3, r3, #1
 8007228:	b2da      	uxtb	r2, r3
 800722a:	697b      	ldr	r3, [r7, #20]
 800722c:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8007230:	697b      	ldr	r3, [r7, #20]
 8007232:	6a1b      	ldr	r3, [r3, #32]
 8007234:	6978      	ldr	r0, [r7, #20]
 8007236:	4798      	blx	r3
}
 8007238:	bf00      	nop
 800723a:	3718      	adds	r7, #24
 800723c:	46bd      	mov	sp, r7
 800723e:	bd80      	pop	{r7, pc}
 8007240:	200010d0 	.word	0x200010d0

08007244 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8007244:	b580      	push	{r7, lr}
 8007246:	b084      	sub	sp, #16
 8007248:	af00      	add	r7, sp, #0
 800724a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800724c:	f107 0308 	add.w	r3, r7, #8
 8007250:	4618      	mov	r0, r3
 8007252:	f000 f857 	bl	8007304 <prvGetNextExpireTime>
 8007256:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8007258:	68bb      	ldr	r3, [r7, #8]
 800725a:	4619      	mov	r1, r3
 800725c:	68f8      	ldr	r0, [r7, #12]
 800725e:	f000 f803 	bl	8007268 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8007262:	f000 f8d5 	bl	8007410 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8007266:	e7f1      	b.n	800724c <prvTimerTask+0x8>

08007268 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8007268:	b580      	push	{r7, lr}
 800726a:	b084      	sub	sp, #16
 800726c:	af00      	add	r7, sp, #0
 800726e:	6078      	str	r0, [r7, #4]
 8007270:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8007272:	f7ff fa39 	bl	80066e8 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8007276:	f107 0308 	add.w	r3, r7, #8
 800727a:	4618      	mov	r0, r3
 800727c:	f000 f866 	bl	800734c <prvSampleTimeNow>
 8007280:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8007282:	68bb      	ldr	r3, [r7, #8]
 8007284:	2b00      	cmp	r3, #0
 8007286:	d130      	bne.n	80072ea <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8007288:	683b      	ldr	r3, [r7, #0]
 800728a:	2b00      	cmp	r3, #0
 800728c:	d10a      	bne.n	80072a4 <prvProcessTimerOrBlockTask+0x3c>
 800728e:	687a      	ldr	r2, [r7, #4]
 8007290:	68fb      	ldr	r3, [r7, #12]
 8007292:	429a      	cmp	r2, r3
 8007294:	d806      	bhi.n	80072a4 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8007296:	f7ff fa35 	bl	8006704 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800729a:	68f9      	ldr	r1, [r7, #12]
 800729c:	6878      	ldr	r0, [r7, #4]
 800729e:	f7ff ff85 	bl	80071ac <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 80072a2:	e024      	b.n	80072ee <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 80072a4:	683b      	ldr	r3, [r7, #0]
 80072a6:	2b00      	cmp	r3, #0
 80072a8:	d008      	beq.n	80072bc <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 80072aa:	4b13      	ldr	r3, [pc, #76]	; (80072f8 <prvProcessTimerOrBlockTask+0x90>)
 80072ac:	681b      	ldr	r3, [r3, #0]
 80072ae:	681b      	ldr	r3, [r3, #0]
 80072b0:	2b00      	cmp	r3, #0
 80072b2:	d101      	bne.n	80072b8 <prvProcessTimerOrBlockTask+0x50>
 80072b4:	2301      	movs	r3, #1
 80072b6:	e000      	b.n	80072ba <prvProcessTimerOrBlockTask+0x52>
 80072b8:	2300      	movs	r3, #0
 80072ba:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 80072bc:	4b0f      	ldr	r3, [pc, #60]	; (80072fc <prvProcessTimerOrBlockTask+0x94>)
 80072be:	6818      	ldr	r0, [r3, #0]
 80072c0:	687a      	ldr	r2, [r7, #4]
 80072c2:	68fb      	ldr	r3, [r7, #12]
 80072c4:	1ad3      	subs	r3, r2, r3
 80072c6:	683a      	ldr	r2, [r7, #0]
 80072c8:	4619      	mov	r1, r3
 80072ca:	f7fe ff7d 	bl	80061c8 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 80072ce:	f7ff fa19 	bl	8006704 <xTaskResumeAll>
 80072d2:	4603      	mov	r3, r0
 80072d4:	2b00      	cmp	r3, #0
 80072d6:	d10a      	bne.n	80072ee <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 80072d8:	4b09      	ldr	r3, [pc, #36]	; (8007300 <prvProcessTimerOrBlockTask+0x98>)
 80072da:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80072de:	601a      	str	r2, [r3, #0]
 80072e0:	f3bf 8f4f 	dsb	sy
 80072e4:	f3bf 8f6f 	isb	sy
}
 80072e8:	e001      	b.n	80072ee <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 80072ea:	f7ff fa0b 	bl	8006704 <xTaskResumeAll>
}
 80072ee:	bf00      	nop
 80072f0:	3710      	adds	r7, #16
 80072f2:	46bd      	mov	sp, r7
 80072f4:	bd80      	pop	{r7, pc}
 80072f6:	bf00      	nop
 80072f8:	200010d4 	.word	0x200010d4
 80072fc:	200010d8 	.word	0x200010d8
 8007300:	e000ed04 	.word	0xe000ed04

08007304 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8007304:	b480      	push	{r7}
 8007306:	b085      	sub	sp, #20
 8007308:	af00      	add	r7, sp, #0
 800730a:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800730c:	4b0e      	ldr	r3, [pc, #56]	; (8007348 <prvGetNextExpireTime+0x44>)
 800730e:	681b      	ldr	r3, [r3, #0]
 8007310:	681b      	ldr	r3, [r3, #0]
 8007312:	2b00      	cmp	r3, #0
 8007314:	d101      	bne.n	800731a <prvGetNextExpireTime+0x16>
 8007316:	2201      	movs	r2, #1
 8007318:	e000      	b.n	800731c <prvGetNextExpireTime+0x18>
 800731a:	2200      	movs	r2, #0
 800731c:	687b      	ldr	r3, [r7, #4]
 800731e:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8007320:	687b      	ldr	r3, [r7, #4]
 8007322:	681b      	ldr	r3, [r3, #0]
 8007324:	2b00      	cmp	r3, #0
 8007326:	d105      	bne.n	8007334 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8007328:	4b07      	ldr	r3, [pc, #28]	; (8007348 <prvGetNextExpireTime+0x44>)
 800732a:	681b      	ldr	r3, [r3, #0]
 800732c:	68db      	ldr	r3, [r3, #12]
 800732e:	681b      	ldr	r3, [r3, #0]
 8007330:	60fb      	str	r3, [r7, #12]
 8007332:	e001      	b.n	8007338 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8007334:	2300      	movs	r3, #0
 8007336:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8007338:	68fb      	ldr	r3, [r7, #12]
}
 800733a:	4618      	mov	r0, r3
 800733c:	3714      	adds	r7, #20
 800733e:	46bd      	mov	sp, r7
 8007340:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007344:	4770      	bx	lr
 8007346:	bf00      	nop
 8007348:	200010d0 	.word	0x200010d0

0800734c <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800734c:	b580      	push	{r7, lr}
 800734e:	b084      	sub	sp, #16
 8007350:	af00      	add	r7, sp, #0
 8007352:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8007354:	f7ff fa74 	bl	8006840 <xTaskGetTickCount>
 8007358:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800735a:	4b0b      	ldr	r3, [pc, #44]	; (8007388 <prvSampleTimeNow+0x3c>)
 800735c:	681b      	ldr	r3, [r3, #0]
 800735e:	68fa      	ldr	r2, [r7, #12]
 8007360:	429a      	cmp	r2, r3
 8007362:	d205      	bcs.n	8007370 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8007364:	f000 f936 	bl	80075d4 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8007368:	687b      	ldr	r3, [r7, #4]
 800736a:	2201      	movs	r2, #1
 800736c:	601a      	str	r2, [r3, #0]
 800736e:	e002      	b.n	8007376 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8007370:	687b      	ldr	r3, [r7, #4]
 8007372:	2200      	movs	r2, #0
 8007374:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8007376:	4a04      	ldr	r2, [pc, #16]	; (8007388 <prvSampleTimeNow+0x3c>)
 8007378:	68fb      	ldr	r3, [r7, #12]
 800737a:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800737c:	68fb      	ldr	r3, [r7, #12]
}
 800737e:	4618      	mov	r0, r3
 8007380:	3710      	adds	r7, #16
 8007382:	46bd      	mov	sp, r7
 8007384:	bd80      	pop	{r7, pc}
 8007386:	bf00      	nop
 8007388:	200010e0 	.word	0x200010e0

0800738c <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800738c:	b580      	push	{r7, lr}
 800738e:	b086      	sub	sp, #24
 8007390:	af00      	add	r7, sp, #0
 8007392:	60f8      	str	r0, [r7, #12]
 8007394:	60b9      	str	r1, [r7, #8]
 8007396:	607a      	str	r2, [r7, #4]
 8007398:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800739a:	2300      	movs	r3, #0
 800739c:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800739e:	68fb      	ldr	r3, [r7, #12]
 80073a0:	68ba      	ldr	r2, [r7, #8]
 80073a2:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80073a4:	68fb      	ldr	r3, [r7, #12]
 80073a6:	68fa      	ldr	r2, [r7, #12]
 80073a8:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 80073aa:	68ba      	ldr	r2, [r7, #8]
 80073ac:	687b      	ldr	r3, [r7, #4]
 80073ae:	429a      	cmp	r2, r3
 80073b0:	d812      	bhi.n	80073d8 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80073b2:	687a      	ldr	r2, [r7, #4]
 80073b4:	683b      	ldr	r3, [r7, #0]
 80073b6:	1ad2      	subs	r2, r2, r3
 80073b8:	68fb      	ldr	r3, [r7, #12]
 80073ba:	699b      	ldr	r3, [r3, #24]
 80073bc:	429a      	cmp	r2, r3
 80073be:	d302      	bcc.n	80073c6 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 80073c0:	2301      	movs	r3, #1
 80073c2:	617b      	str	r3, [r7, #20]
 80073c4:	e01b      	b.n	80073fe <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 80073c6:	4b10      	ldr	r3, [pc, #64]	; (8007408 <prvInsertTimerInActiveList+0x7c>)
 80073c8:	681a      	ldr	r2, [r3, #0]
 80073ca:	68fb      	ldr	r3, [r7, #12]
 80073cc:	3304      	adds	r3, #4
 80073ce:	4619      	mov	r1, r3
 80073d0:	4610      	mov	r0, r2
 80073d2:	f7fe f9de 	bl	8005792 <vListInsert>
 80073d6:	e012      	b.n	80073fe <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 80073d8:	687a      	ldr	r2, [r7, #4]
 80073da:	683b      	ldr	r3, [r7, #0]
 80073dc:	429a      	cmp	r2, r3
 80073de:	d206      	bcs.n	80073ee <prvInsertTimerInActiveList+0x62>
 80073e0:	68ba      	ldr	r2, [r7, #8]
 80073e2:	683b      	ldr	r3, [r7, #0]
 80073e4:	429a      	cmp	r2, r3
 80073e6:	d302      	bcc.n	80073ee <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 80073e8:	2301      	movs	r3, #1
 80073ea:	617b      	str	r3, [r7, #20]
 80073ec:	e007      	b.n	80073fe <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80073ee:	4b07      	ldr	r3, [pc, #28]	; (800740c <prvInsertTimerInActiveList+0x80>)
 80073f0:	681a      	ldr	r2, [r3, #0]
 80073f2:	68fb      	ldr	r3, [r7, #12]
 80073f4:	3304      	adds	r3, #4
 80073f6:	4619      	mov	r1, r3
 80073f8:	4610      	mov	r0, r2
 80073fa:	f7fe f9ca 	bl	8005792 <vListInsert>
		}
	}

	return xProcessTimerNow;
 80073fe:	697b      	ldr	r3, [r7, #20]
}
 8007400:	4618      	mov	r0, r3
 8007402:	3718      	adds	r7, #24
 8007404:	46bd      	mov	sp, r7
 8007406:	bd80      	pop	{r7, pc}
 8007408:	200010d4 	.word	0x200010d4
 800740c:	200010d0 	.word	0x200010d0

08007410 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8007410:	b580      	push	{r7, lr}
 8007412:	b08e      	sub	sp, #56	; 0x38
 8007414:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8007416:	e0ca      	b.n	80075ae <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8007418:	687b      	ldr	r3, [r7, #4]
 800741a:	2b00      	cmp	r3, #0
 800741c:	da18      	bge.n	8007450 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800741e:	1d3b      	adds	r3, r7, #4
 8007420:	3304      	adds	r3, #4
 8007422:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8007424:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007426:	2b00      	cmp	r3, #0
 8007428:	d10a      	bne.n	8007440 <prvProcessReceivedCommands+0x30>
	__asm volatile
 800742a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800742e:	f383 8811 	msr	BASEPRI, r3
 8007432:	f3bf 8f6f 	isb	sy
 8007436:	f3bf 8f4f 	dsb	sy
 800743a:	61fb      	str	r3, [r7, #28]
}
 800743c:	bf00      	nop
 800743e:	e7fe      	b.n	800743e <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8007440:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007442:	681b      	ldr	r3, [r3, #0]
 8007444:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007446:	6850      	ldr	r0, [r2, #4]
 8007448:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800744a:	6892      	ldr	r2, [r2, #8]
 800744c:	4611      	mov	r1, r2
 800744e:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8007450:	687b      	ldr	r3, [r7, #4]
 8007452:	2b00      	cmp	r3, #0
 8007454:	f2c0 80aa 	blt.w	80075ac <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8007458:	68fb      	ldr	r3, [r7, #12]
 800745a:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800745c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800745e:	695b      	ldr	r3, [r3, #20]
 8007460:	2b00      	cmp	r3, #0
 8007462:	d004      	beq.n	800746e <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8007464:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007466:	3304      	adds	r3, #4
 8007468:	4618      	mov	r0, r3
 800746a:	f7fe f9cb 	bl	8005804 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800746e:	463b      	mov	r3, r7
 8007470:	4618      	mov	r0, r3
 8007472:	f7ff ff6b 	bl	800734c <prvSampleTimeNow>
 8007476:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8007478:	687b      	ldr	r3, [r7, #4]
 800747a:	2b09      	cmp	r3, #9
 800747c:	f200 8097 	bhi.w	80075ae <prvProcessReceivedCommands+0x19e>
 8007480:	a201      	add	r2, pc, #4	; (adr r2, 8007488 <prvProcessReceivedCommands+0x78>)
 8007482:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007486:	bf00      	nop
 8007488:	080074b1 	.word	0x080074b1
 800748c:	080074b1 	.word	0x080074b1
 8007490:	080074b1 	.word	0x080074b1
 8007494:	08007525 	.word	0x08007525
 8007498:	08007539 	.word	0x08007539
 800749c:	08007583 	.word	0x08007583
 80074a0:	080074b1 	.word	0x080074b1
 80074a4:	080074b1 	.word	0x080074b1
 80074a8:	08007525 	.word	0x08007525
 80074ac:	08007539 	.word	0x08007539
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80074b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80074b2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80074b6:	f043 0301 	orr.w	r3, r3, #1
 80074ba:	b2da      	uxtb	r2, r3
 80074bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80074be:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 80074c2:	68ba      	ldr	r2, [r7, #8]
 80074c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80074c6:	699b      	ldr	r3, [r3, #24]
 80074c8:	18d1      	adds	r1, r2, r3
 80074ca:	68bb      	ldr	r3, [r7, #8]
 80074cc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80074ce:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80074d0:	f7ff ff5c 	bl	800738c <prvInsertTimerInActiveList>
 80074d4:	4603      	mov	r3, r0
 80074d6:	2b00      	cmp	r3, #0
 80074d8:	d069      	beq.n	80075ae <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80074da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80074dc:	6a1b      	ldr	r3, [r3, #32]
 80074de:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80074e0:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80074e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80074e4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80074e8:	f003 0304 	and.w	r3, r3, #4
 80074ec:	2b00      	cmp	r3, #0
 80074ee:	d05e      	beq.n	80075ae <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 80074f0:	68ba      	ldr	r2, [r7, #8]
 80074f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80074f4:	699b      	ldr	r3, [r3, #24]
 80074f6:	441a      	add	r2, r3
 80074f8:	2300      	movs	r3, #0
 80074fa:	9300      	str	r3, [sp, #0]
 80074fc:	2300      	movs	r3, #0
 80074fe:	2100      	movs	r1, #0
 8007500:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007502:	f7ff fe05 	bl	8007110 <xTimerGenericCommand>
 8007506:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8007508:	6a3b      	ldr	r3, [r7, #32]
 800750a:	2b00      	cmp	r3, #0
 800750c:	d14f      	bne.n	80075ae <prvProcessReceivedCommands+0x19e>
	__asm volatile
 800750e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007512:	f383 8811 	msr	BASEPRI, r3
 8007516:	f3bf 8f6f 	isb	sy
 800751a:	f3bf 8f4f 	dsb	sy
 800751e:	61bb      	str	r3, [r7, #24]
}
 8007520:	bf00      	nop
 8007522:	e7fe      	b.n	8007522 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8007524:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007526:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800752a:	f023 0301 	bic.w	r3, r3, #1
 800752e:	b2da      	uxtb	r2, r3
 8007530:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007532:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 8007536:	e03a      	b.n	80075ae <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8007538:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800753a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800753e:	f043 0301 	orr.w	r3, r3, #1
 8007542:	b2da      	uxtb	r2, r3
 8007544:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007546:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800754a:	68ba      	ldr	r2, [r7, #8]
 800754c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800754e:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8007550:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007552:	699b      	ldr	r3, [r3, #24]
 8007554:	2b00      	cmp	r3, #0
 8007556:	d10a      	bne.n	800756e <prvProcessReceivedCommands+0x15e>
	__asm volatile
 8007558:	f04f 0350 	mov.w	r3, #80	; 0x50
 800755c:	f383 8811 	msr	BASEPRI, r3
 8007560:	f3bf 8f6f 	isb	sy
 8007564:	f3bf 8f4f 	dsb	sy
 8007568:	617b      	str	r3, [r7, #20]
}
 800756a:	bf00      	nop
 800756c:	e7fe      	b.n	800756c <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800756e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007570:	699a      	ldr	r2, [r3, #24]
 8007572:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007574:	18d1      	adds	r1, r2, r3
 8007576:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007578:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800757a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800757c:	f7ff ff06 	bl	800738c <prvInsertTimerInActiveList>
					break;
 8007580:	e015      	b.n	80075ae <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8007582:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007584:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007588:	f003 0302 	and.w	r3, r3, #2
 800758c:	2b00      	cmp	r3, #0
 800758e:	d103      	bne.n	8007598 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 8007590:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007592:	f000 fbdd 	bl	8007d50 <vPortFree>
 8007596:	e00a      	b.n	80075ae <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8007598:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800759a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800759e:	f023 0301 	bic.w	r3, r3, #1
 80075a2:	b2da      	uxtb	r2, r3
 80075a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80075a6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 80075aa:	e000      	b.n	80075ae <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 80075ac:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80075ae:	4b08      	ldr	r3, [pc, #32]	; (80075d0 <prvProcessReceivedCommands+0x1c0>)
 80075b0:	681b      	ldr	r3, [r3, #0]
 80075b2:	1d39      	adds	r1, r7, #4
 80075b4:	2200      	movs	r2, #0
 80075b6:	4618      	mov	r0, r3
 80075b8:	f7fe fbec 	bl	8005d94 <xQueueReceive>
 80075bc:	4603      	mov	r3, r0
 80075be:	2b00      	cmp	r3, #0
 80075c0:	f47f af2a 	bne.w	8007418 <prvProcessReceivedCommands+0x8>
	}
}
 80075c4:	bf00      	nop
 80075c6:	bf00      	nop
 80075c8:	3730      	adds	r7, #48	; 0x30
 80075ca:	46bd      	mov	sp, r7
 80075cc:	bd80      	pop	{r7, pc}
 80075ce:	bf00      	nop
 80075d0:	200010d8 	.word	0x200010d8

080075d4 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 80075d4:	b580      	push	{r7, lr}
 80075d6:	b088      	sub	sp, #32
 80075d8:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80075da:	e048      	b.n	800766e <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80075dc:	4b2d      	ldr	r3, [pc, #180]	; (8007694 <prvSwitchTimerLists+0xc0>)
 80075de:	681b      	ldr	r3, [r3, #0]
 80075e0:	68db      	ldr	r3, [r3, #12]
 80075e2:	681b      	ldr	r3, [r3, #0]
 80075e4:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80075e6:	4b2b      	ldr	r3, [pc, #172]	; (8007694 <prvSwitchTimerLists+0xc0>)
 80075e8:	681b      	ldr	r3, [r3, #0]
 80075ea:	68db      	ldr	r3, [r3, #12]
 80075ec:	68db      	ldr	r3, [r3, #12]
 80075ee:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80075f0:	68fb      	ldr	r3, [r7, #12]
 80075f2:	3304      	adds	r3, #4
 80075f4:	4618      	mov	r0, r3
 80075f6:	f7fe f905 	bl	8005804 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80075fa:	68fb      	ldr	r3, [r7, #12]
 80075fc:	6a1b      	ldr	r3, [r3, #32]
 80075fe:	68f8      	ldr	r0, [r7, #12]
 8007600:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8007602:	68fb      	ldr	r3, [r7, #12]
 8007604:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007608:	f003 0304 	and.w	r3, r3, #4
 800760c:	2b00      	cmp	r3, #0
 800760e:	d02e      	beq.n	800766e <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8007610:	68fb      	ldr	r3, [r7, #12]
 8007612:	699b      	ldr	r3, [r3, #24]
 8007614:	693a      	ldr	r2, [r7, #16]
 8007616:	4413      	add	r3, r2
 8007618:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800761a:	68ba      	ldr	r2, [r7, #8]
 800761c:	693b      	ldr	r3, [r7, #16]
 800761e:	429a      	cmp	r2, r3
 8007620:	d90e      	bls.n	8007640 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8007622:	68fb      	ldr	r3, [r7, #12]
 8007624:	68ba      	ldr	r2, [r7, #8]
 8007626:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8007628:	68fb      	ldr	r3, [r7, #12]
 800762a:	68fa      	ldr	r2, [r7, #12]
 800762c:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800762e:	4b19      	ldr	r3, [pc, #100]	; (8007694 <prvSwitchTimerLists+0xc0>)
 8007630:	681a      	ldr	r2, [r3, #0]
 8007632:	68fb      	ldr	r3, [r7, #12]
 8007634:	3304      	adds	r3, #4
 8007636:	4619      	mov	r1, r3
 8007638:	4610      	mov	r0, r2
 800763a:	f7fe f8aa 	bl	8005792 <vListInsert>
 800763e:	e016      	b.n	800766e <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8007640:	2300      	movs	r3, #0
 8007642:	9300      	str	r3, [sp, #0]
 8007644:	2300      	movs	r3, #0
 8007646:	693a      	ldr	r2, [r7, #16]
 8007648:	2100      	movs	r1, #0
 800764a:	68f8      	ldr	r0, [r7, #12]
 800764c:	f7ff fd60 	bl	8007110 <xTimerGenericCommand>
 8007650:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8007652:	687b      	ldr	r3, [r7, #4]
 8007654:	2b00      	cmp	r3, #0
 8007656:	d10a      	bne.n	800766e <prvSwitchTimerLists+0x9a>
	__asm volatile
 8007658:	f04f 0350 	mov.w	r3, #80	; 0x50
 800765c:	f383 8811 	msr	BASEPRI, r3
 8007660:	f3bf 8f6f 	isb	sy
 8007664:	f3bf 8f4f 	dsb	sy
 8007668:	603b      	str	r3, [r7, #0]
}
 800766a:	bf00      	nop
 800766c:	e7fe      	b.n	800766c <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800766e:	4b09      	ldr	r3, [pc, #36]	; (8007694 <prvSwitchTimerLists+0xc0>)
 8007670:	681b      	ldr	r3, [r3, #0]
 8007672:	681b      	ldr	r3, [r3, #0]
 8007674:	2b00      	cmp	r3, #0
 8007676:	d1b1      	bne.n	80075dc <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8007678:	4b06      	ldr	r3, [pc, #24]	; (8007694 <prvSwitchTimerLists+0xc0>)
 800767a:	681b      	ldr	r3, [r3, #0]
 800767c:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800767e:	4b06      	ldr	r3, [pc, #24]	; (8007698 <prvSwitchTimerLists+0xc4>)
 8007680:	681b      	ldr	r3, [r3, #0]
 8007682:	4a04      	ldr	r2, [pc, #16]	; (8007694 <prvSwitchTimerLists+0xc0>)
 8007684:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8007686:	4a04      	ldr	r2, [pc, #16]	; (8007698 <prvSwitchTimerLists+0xc4>)
 8007688:	697b      	ldr	r3, [r7, #20]
 800768a:	6013      	str	r3, [r2, #0]
}
 800768c:	bf00      	nop
 800768e:	3718      	adds	r7, #24
 8007690:	46bd      	mov	sp, r7
 8007692:	bd80      	pop	{r7, pc}
 8007694:	200010d0 	.word	0x200010d0
 8007698:	200010d4 	.word	0x200010d4

0800769c <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800769c:	b580      	push	{r7, lr}
 800769e:	b082      	sub	sp, #8
 80076a0:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 80076a2:	f000 f967 	bl	8007974 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 80076a6:	4b15      	ldr	r3, [pc, #84]	; (80076fc <prvCheckForValidListAndQueue+0x60>)
 80076a8:	681b      	ldr	r3, [r3, #0]
 80076aa:	2b00      	cmp	r3, #0
 80076ac:	d120      	bne.n	80076f0 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 80076ae:	4814      	ldr	r0, [pc, #80]	; (8007700 <prvCheckForValidListAndQueue+0x64>)
 80076b0:	f7fe f81e 	bl	80056f0 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 80076b4:	4813      	ldr	r0, [pc, #76]	; (8007704 <prvCheckForValidListAndQueue+0x68>)
 80076b6:	f7fe f81b 	bl	80056f0 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 80076ba:	4b13      	ldr	r3, [pc, #76]	; (8007708 <prvCheckForValidListAndQueue+0x6c>)
 80076bc:	4a10      	ldr	r2, [pc, #64]	; (8007700 <prvCheckForValidListAndQueue+0x64>)
 80076be:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 80076c0:	4b12      	ldr	r3, [pc, #72]	; (800770c <prvCheckForValidListAndQueue+0x70>)
 80076c2:	4a10      	ldr	r2, [pc, #64]	; (8007704 <prvCheckForValidListAndQueue+0x68>)
 80076c4:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 80076c6:	2300      	movs	r3, #0
 80076c8:	9300      	str	r3, [sp, #0]
 80076ca:	4b11      	ldr	r3, [pc, #68]	; (8007710 <prvCheckForValidListAndQueue+0x74>)
 80076cc:	4a11      	ldr	r2, [pc, #68]	; (8007714 <prvCheckForValidListAndQueue+0x78>)
 80076ce:	2110      	movs	r1, #16
 80076d0:	200a      	movs	r0, #10
 80076d2:	f7fe f929 	bl	8005928 <xQueueGenericCreateStatic>
 80076d6:	4603      	mov	r3, r0
 80076d8:	4a08      	ldr	r2, [pc, #32]	; (80076fc <prvCheckForValidListAndQueue+0x60>)
 80076da:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 80076dc:	4b07      	ldr	r3, [pc, #28]	; (80076fc <prvCheckForValidListAndQueue+0x60>)
 80076de:	681b      	ldr	r3, [r3, #0]
 80076e0:	2b00      	cmp	r3, #0
 80076e2:	d005      	beq.n	80076f0 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 80076e4:	4b05      	ldr	r3, [pc, #20]	; (80076fc <prvCheckForValidListAndQueue+0x60>)
 80076e6:	681b      	ldr	r3, [r3, #0]
 80076e8:	490b      	ldr	r1, [pc, #44]	; (8007718 <prvCheckForValidListAndQueue+0x7c>)
 80076ea:	4618      	mov	r0, r3
 80076ec:	f7fe fd42 	bl	8006174 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80076f0:	f000 f970 	bl	80079d4 <vPortExitCritical>
}
 80076f4:	bf00      	nop
 80076f6:	46bd      	mov	sp, r7
 80076f8:	bd80      	pop	{r7, pc}
 80076fa:	bf00      	nop
 80076fc:	200010d8 	.word	0x200010d8
 8007700:	200010a8 	.word	0x200010a8
 8007704:	200010bc 	.word	0x200010bc
 8007708:	200010d0 	.word	0x200010d0
 800770c:	200010d4 	.word	0x200010d4
 8007710:	20001184 	.word	0x20001184
 8007714:	200010e4 	.word	0x200010e4
 8007718:	0800ca20 	.word	0x0800ca20

0800771c <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800771c:	b480      	push	{r7}
 800771e:	b085      	sub	sp, #20
 8007720:	af00      	add	r7, sp, #0
 8007722:	60f8      	str	r0, [r7, #12]
 8007724:	60b9      	str	r1, [r7, #8]
 8007726:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8007728:	68fb      	ldr	r3, [r7, #12]
 800772a:	3b04      	subs	r3, #4
 800772c:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800772e:	68fb      	ldr	r3, [r7, #12]
 8007730:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8007734:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8007736:	68fb      	ldr	r3, [r7, #12]
 8007738:	3b04      	subs	r3, #4
 800773a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800773c:	68bb      	ldr	r3, [r7, #8]
 800773e:	f023 0201 	bic.w	r2, r3, #1
 8007742:	68fb      	ldr	r3, [r7, #12]
 8007744:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8007746:	68fb      	ldr	r3, [r7, #12]
 8007748:	3b04      	subs	r3, #4
 800774a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800774c:	4a0c      	ldr	r2, [pc, #48]	; (8007780 <pxPortInitialiseStack+0x64>)
 800774e:	68fb      	ldr	r3, [r7, #12]
 8007750:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8007752:	68fb      	ldr	r3, [r7, #12]
 8007754:	3b14      	subs	r3, #20
 8007756:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8007758:	687a      	ldr	r2, [r7, #4]
 800775a:	68fb      	ldr	r3, [r7, #12]
 800775c:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800775e:	68fb      	ldr	r3, [r7, #12]
 8007760:	3b04      	subs	r3, #4
 8007762:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8007764:	68fb      	ldr	r3, [r7, #12]
 8007766:	f06f 0202 	mvn.w	r2, #2
 800776a:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800776c:	68fb      	ldr	r3, [r7, #12]
 800776e:	3b20      	subs	r3, #32
 8007770:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8007772:	68fb      	ldr	r3, [r7, #12]
}
 8007774:	4618      	mov	r0, r3
 8007776:	3714      	adds	r7, #20
 8007778:	46bd      	mov	sp, r7
 800777a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800777e:	4770      	bx	lr
 8007780:	08007785 	.word	0x08007785

08007784 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8007784:	b480      	push	{r7}
 8007786:	b085      	sub	sp, #20
 8007788:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800778a:	2300      	movs	r3, #0
 800778c:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800778e:	4b12      	ldr	r3, [pc, #72]	; (80077d8 <prvTaskExitError+0x54>)
 8007790:	681b      	ldr	r3, [r3, #0]
 8007792:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007796:	d00a      	beq.n	80077ae <prvTaskExitError+0x2a>
	__asm volatile
 8007798:	f04f 0350 	mov.w	r3, #80	; 0x50
 800779c:	f383 8811 	msr	BASEPRI, r3
 80077a0:	f3bf 8f6f 	isb	sy
 80077a4:	f3bf 8f4f 	dsb	sy
 80077a8:	60fb      	str	r3, [r7, #12]
}
 80077aa:	bf00      	nop
 80077ac:	e7fe      	b.n	80077ac <prvTaskExitError+0x28>
	__asm volatile
 80077ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80077b2:	f383 8811 	msr	BASEPRI, r3
 80077b6:	f3bf 8f6f 	isb	sy
 80077ba:	f3bf 8f4f 	dsb	sy
 80077be:	60bb      	str	r3, [r7, #8]
}
 80077c0:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 80077c2:	bf00      	nop
 80077c4:	687b      	ldr	r3, [r7, #4]
 80077c6:	2b00      	cmp	r3, #0
 80077c8:	d0fc      	beq.n	80077c4 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 80077ca:	bf00      	nop
 80077cc:	bf00      	nop
 80077ce:	3714      	adds	r7, #20
 80077d0:	46bd      	mov	sp, r7
 80077d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077d6:	4770      	bx	lr
 80077d8:	2000000c 	.word	0x2000000c
 80077dc:	00000000 	.word	0x00000000

080077e0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 80077e0:	4b07      	ldr	r3, [pc, #28]	; (8007800 <pxCurrentTCBConst2>)
 80077e2:	6819      	ldr	r1, [r3, #0]
 80077e4:	6808      	ldr	r0, [r1, #0]
 80077e6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80077ea:	f380 8809 	msr	PSP, r0
 80077ee:	f3bf 8f6f 	isb	sy
 80077f2:	f04f 0000 	mov.w	r0, #0
 80077f6:	f380 8811 	msr	BASEPRI, r0
 80077fa:	4770      	bx	lr
 80077fc:	f3af 8000 	nop.w

08007800 <pxCurrentTCBConst2>:
 8007800:	20000ba8 	.word	0x20000ba8
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8007804:	bf00      	nop
 8007806:	bf00      	nop

08007808 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8007808:	4808      	ldr	r0, [pc, #32]	; (800782c <prvPortStartFirstTask+0x24>)
 800780a:	6800      	ldr	r0, [r0, #0]
 800780c:	6800      	ldr	r0, [r0, #0]
 800780e:	f380 8808 	msr	MSP, r0
 8007812:	f04f 0000 	mov.w	r0, #0
 8007816:	f380 8814 	msr	CONTROL, r0
 800781a:	b662      	cpsie	i
 800781c:	b661      	cpsie	f
 800781e:	f3bf 8f4f 	dsb	sy
 8007822:	f3bf 8f6f 	isb	sy
 8007826:	df00      	svc	0
 8007828:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800782a:	bf00      	nop
 800782c:	e000ed08 	.word	0xe000ed08

08007830 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8007830:	b580      	push	{r7, lr}
 8007832:	b086      	sub	sp, #24
 8007834:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8007836:	4b46      	ldr	r3, [pc, #280]	; (8007950 <xPortStartScheduler+0x120>)
 8007838:	681b      	ldr	r3, [r3, #0]
 800783a:	4a46      	ldr	r2, [pc, #280]	; (8007954 <xPortStartScheduler+0x124>)
 800783c:	4293      	cmp	r3, r2
 800783e:	d10a      	bne.n	8007856 <xPortStartScheduler+0x26>
	__asm volatile
 8007840:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007844:	f383 8811 	msr	BASEPRI, r3
 8007848:	f3bf 8f6f 	isb	sy
 800784c:	f3bf 8f4f 	dsb	sy
 8007850:	613b      	str	r3, [r7, #16]
}
 8007852:	bf00      	nop
 8007854:	e7fe      	b.n	8007854 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8007856:	4b3e      	ldr	r3, [pc, #248]	; (8007950 <xPortStartScheduler+0x120>)
 8007858:	681b      	ldr	r3, [r3, #0]
 800785a:	4a3f      	ldr	r2, [pc, #252]	; (8007958 <xPortStartScheduler+0x128>)
 800785c:	4293      	cmp	r3, r2
 800785e:	d10a      	bne.n	8007876 <xPortStartScheduler+0x46>
	__asm volatile
 8007860:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007864:	f383 8811 	msr	BASEPRI, r3
 8007868:	f3bf 8f6f 	isb	sy
 800786c:	f3bf 8f4f 	dsb	sy
 8007870:	60fb      	str	r3, [r7, #12]
}
 8007872:	bf00      	nop
 8007874:	e7fe      	b.n	8007874 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8007876:	4b39      	ldr	r3, [pc, #228]	; (800795c <xPortStartScheduler+0x12c>)
 8007878:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800787a:	697b      	ldr	r3, [r7, #20]
 800787c:	781b      	ldrb	r3, [r3, #0]
 800787e:	b2db      	uxtb	r3, r3
 8007880:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8007882:	697b      	ldr	r3, [r7, #20]
 8007884:	22ff      	movs	r2, #255	; 0xff
 8007886:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8007888:	697b      	ldr	r3, [r7, #20]
 800788a:	781b      	ldrb	r3, [r3, #0]
 800788c:	b2db      	uxtb	r3, r3
 800788e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8007890:	78fb      	ldrb	r3, [r7, #3]
 8007892:	b2db      	uxtb	r3, r3
 8007894:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8007898:	b2da      	uxtb	r2, r3
 800789a:	4b31      	ldr	r3, [pc, #196]	; (8007960 <xPortStartScheduler+0x130>)
 800789c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800789e:	4b31      	ldr	r3, [pc, #196]	; (8007964 <xPortStartScheduler+0x134>)
 80078a0:	2207      	movs	r2, #7
 80078a2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80078a4:	e009      	b.n	80078ba <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 80078a6:	4b2f      	ldr	r3, [pc, #188]	; (8007964 <xPortStartScheduler+0x134>)
 80078a8:	681b      	ldr	r3, [r3, #0]
 80078aa:	3b01      	subs	r3, #1
 80078ac:	4a2d      	ldr	r2, [pc, #180]	; (8007964 <xPortStartScheduler+0x134>)
 80078ae:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80078b0:	78fb      	ldrb	r3, [r7, #3]
 80078b2:	b2db      	uxtb	r3, r3
 80078b4:	005b      	lsls	r3, r3, #1
 80078b6:	b2db      	uxtb	r3, r3
 80078b8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80078ba:	78fb      	ldrb	r3, [r7, #3]
 80078bc:	b2db      	uxtb	r3, r3
 80078be:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80078c2:	2b80      	cmp	r3, #128	; 0x80
 80078c4:	d0ef      	beq.n	80078a6 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80078c6:	4b27      	ldr	r3, [pc, #156]	; (8007964 <xPortStartScheduler+0x134>)
 80078c8:	681b      	ldr	r3, [r3, #0]
 80078ca:	f1c3 0307 	rsb	r3, r3, #7
 80078ce:	2b04      	cmp	r3, #4
 80078d0:	d00a      	beq.n	80078e8 <xPortStartScheduler+0xb8>
	__asm volatile
 80078d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80078d6:	f383 8811 	msr	BASEPRI, r3
 80078da:	f3bf 8f6f 	isb	sy
 80078de:	f3bf 8f4f 	dsb	sy
 80078e2:	60bb      	str	r3, [r7, #8]
}
 80078e4:	bf00      	nop
 80078e6:	e7fe      	b.n	80078e6 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80078e8:	4b1e      	ldr	r3, [pc, #120]	; (8007964 <xPortStartScheduler+0x134>)
 80078ea:	681b      	ldr	r3, [r3, #0]
 80078ec:	021b      	lsls	r3, r3, #8
 80078ee:	4a1d      	ldr	r2, [pc, #116]	; (8007964 <xPortStartScheduler+0x134>)
 80078f0:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80078f2:	4b1c      	ldr	r3, [pc, #112]	; (8007964 <xPortStartScheduler+0x134>)
 80078f4:	681b      	ldr	r3, [r3, #0]
 80078f6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80078fa:	4a1a      	ldr	r2, [pc, #104]	; (8007964 <xPortStartScheduler+0x134>)
 80078fc:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80078fe:	687b      	ldr	r3, [r7, #4]
 8007900:	b2da      	uxtb	r2, r3
 8007902:	697b      	ldr	r3, [r7, #20]
 8007904:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8007906:	4b18      	ldr	r3, [pc, #96]	; (8007968 <xPortStartScheduler+0x138>)
 8007908:	681b      	ldr	r3, [r3, #0]
 800790a:	4a17      	ldr	r2, [pc, #92]	; (8007968 <xPortStartScheduler+0x138>)
 800790c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8007910:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8007912:	4b15      	ldr	r3, [pc, #84]	; (8007968 <xPortStartScheduler+0x138>)
 8007914:	681b      	ldr	r3, [r3, #0]
 8007916:	4a14      	ldr	r2, [pc, #80]	; (8007968 <xPortStartScheduler+0x138>)
 8007918:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800791c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800791e:	f000 f8dd 	bl	8007adc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8007922:	4b12      	ldr	r3, [pc, #72]	; (800796c <xPortStartScheduler+0x13c>)
 8007924:	2200      	movs	r2, #0
 8007926:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8007928:	f000 f8fc 	bl	8007b24 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800792c:	4b10      	ldr	r3, [pc, #64]	; (8007970 <xPortStartScheduler+0x140>)
 800792e:	681b      	ldr	r3, [r3, #0]
 8007930:	4a0f      	ldr	r2, [pc, #60]	; (8007970 <xPortStartScheduler+0x140>)
 8007932:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8007936:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8007938:	f7ff ff66 	bl	8007808 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800793c:	f7ff f84a 	bl	80069d4 <vTaskSwitchContext>
	prvTaskExitError();
 8007940:	f7ff ff20 	bl	8007784 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8007944:	2300      	movs	r3, #0
}
 8007946:	4618      	mov	r0, r3
 8007948:	3718      	adds	r7, #24
 800794a:	46bd      	mov	sp, r7
 800794c:	bd80      	pop	{r7, pc}
 800794e:	bf00      	nop
 8007950:	e000ed00 	.word	0xe000ed00
 8007954:	410fc271 	.word	0x410fc271
 8007958:	410fc270 	.word	0x410fc270
 800795c:	e000e400 	.word	0xe000e400
 8007960:	200011d4 	.word	0x200011d4
 8007964:	200011d8 	.word	0x200011d8
 8007968:	e000ed20 	.word	0xe000ed20
 800796c:	2000000c 	.word	0x2000000c
 8007970:	e000ef34 	.word	0xe000ef34

08007974 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8007974:	b480      	push	{r7}
 8007976:	b083      	sub	sp, #12
 8007978:	af00      	add	r7, sp, #0
	__asm volatile
 800797a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800797e:	f383 8811 	msr	BASEPRI, r3
 8007982:	f3bf 8f6f 	isb	sy
 8007986:	f3bf 8f4f 	dsb	sy
 800798a:	607b      	str	r3, [r7, #4]
}
 800798c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800798e:	4b0f      	ldr	r3, [pc, #60]	; (80079cc <vPortEnterCritical+0x58>)
 8007990:	681b      	ldr	r3, [r3, #0]
 8007992:	3301      	adds	r3, #1
 8007994:	4a0d      	ldr	r2, [pc, #52]	; (80079cc <vPortEnterCritical+0x58>)
 8007996:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8007998:	4b0c      	ldr	r3, [pc, #48]	; (80079cc <vPortEnterCritical+0x58>)
 800799a:	681b      	ldr	r3, [r3, #0]
 800799c:	2b01      	cmp	r3, #1
 800799e:	d10f      	bne.n	80079c0 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80079a0:	4b0b      	ldr	r3, [pc, #44]	; (80079d0 <vPortEnterCritical+0x5c>)
 80079a2:	681b      	ldr	r3, [r3, #0]
 80079a4:	b2db      	uxtb	r3, r3
 80079a6:	2b00      	cmp	r3, #0
 80079a8:	d00a      	beq.n	80079c0 <vPortEnterCritical+0x4c>
	__asm volatile
 80079aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80079ae:	f383 8811 	msr	BASEPRI, r3
 80079b2:	f3bf 8f6f 	isb	sy
 80079b6:	f3bf 8f4f 	dsb	sy
 80079ba:	603b      	str	r3, [r7, #0]
}
 80079bc:	bf00      	nop
 80079be:	e7fe      	b.n	80079be <vPortEnterCritical+0x4a>
	}
}
 80079c0:	bf00      	nop
 80079c2:	370c      	adds	r7, #12
 80079c4:	46bd      	mov	sp, r7
 80079c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079ca:	4770      	bx	lr
 80079cc:	2000000c 	.word	0x2000000c
 80079d0:	e000ed04 	.word	0xe000ed04

080079d4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80079d4:	b480      	push	{r7}
 80079d6:	b083      	sub	sp, #12
 80079d8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 80079da:	4b12      	ldr	r3, [pc, #72]	; (8007a24 <vPortExitCritical+0x50>)
 80079dc:	681b      	ldr	r3, [r3, #0]
 80079de:	2b00      	cmp	r3, #0
 80079e0:	d10a      	bne.n	80079f8 <vPortExitCritical+0x24>
	__asm volatile
 80079e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80079e6:	f383 8811 	msr	BASEPRI, r3
 80079ea:	f3bf 8f6f 	isb	sy
 80079ee:	f3bf 8f4f 	dsb	sy
 80079f2:	607b      	str	r3, [r7, #4]
}
 80079f4:	bf00      	nop
 80079f6:	e7fe      	b.n	80079f6 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 80079f8:	4b0a      	ldr	r3, [pc, #40]	; (8007a24 <vPortExitCritical+0x50>)
 80079fa:	681b      	ldr	r3, [r3, #0]
 80079fc:	3b01      	subs	r3, #1
 80079fe:	4a09      	ldr	r2, [pc, #36]	; (8007a24 <vPortExitCritical+0x50>)
 8007a00:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8007a02:	4b08      	ldr	r3, [pc, #32]	; (8007a24 <vPortExitCritical+0x50>)
 8007a04:	681b      	ldr	r3, [r3, #0]
 8007a06:	2b00      	cmp	r3, #0
 8007a08:	d105      	bne.n	8007a16 <vPortExitCritical+0x42>
 8007a0a:	2300      	movs	r3, #0
 8007a0c:	603b      	str	r3, [r7, #0]
	__asm volatile
 8007a0e:	683b      	ldr	r3, [r7, #0]
 8007a10:	f383 8811 	msr	BASEPRI, r3
}
 8007a14:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8007a16:	bf00      	nop
 8007a18:	370c      	adds	r7, #12
 8007a1a:	46bd      	mov	sp, r7
 8007a1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a20:	4770      	bx	lr
 8007a22:	bf00      	nop
 8007a24:	2000000c 	.word	0x2000000c
	...

08007a30 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8007a30:	f3ef 8009 	mrs	r0, PSP
 8007a34:	f3bf 8f6f 	isb	sy
 8007a38:	4b15      	ldr	r3, [pc, #84]	; (8007a90 <pxCurrentTCBConst>)
 8007a3a:	681a      	ldr	r2, [r3, #0]
 8007a3c:	f01e 0f10 	tst.w	lr, #16
 8007a40:	bf08      	it	eq
 8007a42:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8007a46:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007a4a:	6010      	str	r0, [r2, #0]
 8007a4c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8007a50:	f04f 0050 	mov.w	r0, #80	; 0x50
 8007a54:	f380 8811 	msr	BASEPRI, r0
 8007a58:	f3bf 8f4f 	dsb	sy
 8007a5c:	f3bf 8f6f 	isb	sy
 8007a60:	f7fe ffb8 	bl	80069d4 <vTaskSwitchContext>
 8007a64:	f04f 0000 	mov.w	r0, #0
 8007a68:	f380 8811 	msr	BASEPRI, r0
 8007a6c:	bc09      	pop	{r0, r3}
 8007a6e:	6819      	ldr	r1, [r3, #0]
 8007a70:	6808      	ldr	r0, [r1, #0]
 8007a72:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007a76:	f01e 0f10 	tst.w	lr, #16
 8007a7a:	bf08      	it	eq
 8007a7c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8007a80:	f380 8809 	msr	PSP, r0
 8007a84:	f3bf 8f6f 	isb	sy
 8007a88:	4770      	bx	lr
 8007a8a:	bf00      	nop
 8007a8c:	f3af 8000 	nop.w

08007a90 <pxCurrentTCBConst>:
 8007a90:	20000ba8 	.word	0x20000ba8
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8007a94:	bf00      	nop
 8007a96:	bf00      	nop

08007a98 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8007a98:	b580      	push	{r7, lr}
 8007a9a:	b082      	sub	sp, #8
 8007a9c:	af00      	add	r7, sp, #0
	__asm volatile
 8007a9e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007aa2:	f383 8811 	msr	BASEPRI, r3
 8007aa6:	f3bf 8f6f 	isb	sy
 8007aaa:	f3bf 8f4f 	dsb	sy
 8007aae:	607b      	str	r3, [r7, #4]
}
 8007ab0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8007ab2:	f7fe fed5 	bl	8006860 <xTaskIncrementTick>
 8007ab6:	4603      	mov	r3, r0
 8007ab8:	2b00      	cmp	r3, #0
 8007aba:	d003      	beq.n	8007ac4 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8007abc:	4b06      	ldr	r3, [pc, #24]	; (8007ad8 <xPortSysTickHandler+0x40>)
 8007abe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007ac2:	601a      	str	r2, [r3, #0]
 8007ac4:	2300      	movs	r3, #0
 8007ac6:	603b      	str	r3, [r7, #0]
	__asm volatile
 8007ac8:	683b      	ldr	r3, [r7, #0]
 8007aca:	f383 8811 	msr	BASEPRI, r3
}
 8007ace:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8007ad0:	bf00      	nop
 8007ad2:	3708      	adds	r7, #8
 8007ad4:	46bd      	mov	sp, r7
 8007ad6:	bd80      	pop	{r7, pc}
 8007ad8:	e000ed04 	.word	0xe000ed04

08007adc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8007adc:	b480      	push	{r7}
 8007ade:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8007ae0:	4b0b      	ldr	r3, [pc, #44]	; (8007b10 <vPortSetupTimerInterrupt+0x34>)
 8007ae2:	2200      	movs	r2, #0
 8007ae4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8007ae6:	4b0b      	ldr	r3, [pc, #44]	; (8007b14 <vPortSetupTimerInterrupt+0x38>)
 8007ae8:	2200      	movs	r2, #0
 8007aea:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8007aec:	4b0a      	ldr	r3, [pc, #40]	; (8007b18 <vPortSetupTimerInterrupt+0x3c>)
 8007aee:	681b      	ldr	r3, [r3, #0]
 8007af0:	4a0a      	ldr	r2, [pc, #40]	; (8007b1c <vPortSetupTimerInterrupt+0x40>)
 8007af2:	fba2 2303 	umull	r2, r3, r2, r3
 8007af6:	099b      	lsrs	r3, r3, #6
 8007af8:	4a09      	ldr	r2, [pc, #36]	; (8007b20 <vPortSetupTimerInterrupt+0x44>)
 8007afa:	3b01      	subs	r3, #1
 8007afc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8007afe:	4b04      	ldr	r3, [pc, #16]	; (8007b10 <vPortSetupTimerInterrupt+0x34>)
 8007b00:	2207      	movs	r2, #7
 8007b02:	601a      	str	r2, [r3, #0]
}
 8007b04:	bf00      	nop
 8007b06:	46bd      	mov	sp, r7
 8007b08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b0c:	4770      	bx	lr
 8007b0e:	bf00      	nop
 8007b10:	e000e010 	.word	0xe000e010
 8007b14:	e000e018 	.word	0xe000e018
 8007b18:	20000000 	.word	0x20000000
 8007b1c:	10624dd3 	.word	0x10624dd3
 8007b20:	e000e014 	.word	0xe000e014

08007b24 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8007b24:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8007b34 <vPortEnableVFP+0x10>
 8007b28:	6801      	ldr	r1, [r0, #0]
 8007b2a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8007b2e:	6001      	str	r1, [r0, #0]
 8007b30:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8007b32:	bf00      	nop
 8007b34:	e000ed88 	.word	0xe000ed88

08007b38 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8007b38:	b480      	push	{r7}
 8007b3a:	b085      	sub	sp, #20
 8007b3c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8007b3e:	f3ef 8305 	mrs	r3, IPSR
 8007b42:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8007b44:	68fb      	ldr	r3, [r7, #12]
 8007b46:	2b0f      	cmp	r3, #15
 8007b48:	d914      	bls.n	8007b74 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8007b4a:	4a17      	ldr	r2, [pc, #92]	; (8007ba8 <vPortValidateInterruptPriority+0x70>)
 8007b4c:	68fb      	ldr	r3, [r7, #12]
 8007b4e:	4413      	add	r3, r2
 8007b50:	781b      	ldrb	r3, [r3, #0]
 8007b52:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8007b54:	4b15      	ldr	r3, [pc, #84]	; (8007bac <vPortValidateInterruptPriority+0x74>)
 8007b56:	781b      	ldrb	r3, [r3, #0]
 8007b58:	7afa      	ldrb	r2, [r7, #11]
 8007b5a:	429a      	cmp	r2, r3
 8007b5c:	d20a      	bcs.n	8007b74 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 8007b5e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007b62:	f383 8811 	msr	BASEPRI, r3
 8007b66:	f3bf 8f6f 	isb	sy
 8007b6a:	f3bf 8f4f 	dsb	sy
 8007b6e:	607b      	str	r3, [r7, #4]
}
 8007b70:	bf00      	nop
 8007b72:	e7fe      	b.n	8007b72 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8007b74:	4b0e      	ldr	r3, [pc, #56]	; (8007bb0 <vPortValidateInterruptPriority+0x78>)
 8007b76:	681b      	ldr	r3, [r3, #0]
 8007b78:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8007b7c:	4b0d      	ldr	r3, [pc, #52]	; (8007bb4 <vPortValidateInterruptPriority+0x7c>)
 8007b7e:	681b      	ldr	r3, [r3, #0]
 8007b80:	429a      	cmp	r2, r3
 8007b82:	d90a      	bls.n	8007b9a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8007b84:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007b88:	f383 8811 	msr	BASEPRI, r3
 8007b8c:	f3bf 8f6f 	isb	sy
 8007b90:	f3bf 8f4f 	dsb	sy
 8007b94:	603b      	str	r3, [r7, #0]
}
 8007b96:	bf00      	nop
 8007b98:	e7fe      	b.n	8007b98 <vPortValidateInterruptPriority+0x60>
	}
 8007b9a:	bf00      	nop
 8007b9c:	3714      	adds	r7, #20
 8007b9e:	46bd      	mov	sp, r7
 8007ba0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ba4:	4770      	bx	lr
 8007ba6:	bf00      	nop
 8007ba8:	e000e3f0 	.word	0xe000e3f0
 8007bac:	200011d4 	.word	0x200011d4
 8007bb0:	e000ed0c 	.word	0xe000ed0c
 8007bb4:	200011d8 	.word	0x200011d8

08007bb8 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8007bb8:	b580      	push	{r7, lr}
 8007bba:	b08a      	sub	sp, #40	; 0x28
 8007bbc:	af00      	add	r7, sp, #0
 8007bbe:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8007bc0:	2300      	movs	r3, #0
 8007bc2:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8007bc4:	f7fe fd90 	bl	80066e8 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8007bc8:	4b5b      	ldr	r3, [pc, #364]	; (8007d38 <pvPortMalloc+0x180>)
 8007bca:	681b      	ldr	r3, [r3, #0]
 8007bcc:	2b00      	cmp	r3, #0
 8007bce:	d101      	bne.n	8007bd4 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8007bd0:	f000 f920 	bl	8007e14 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8007bd4:	4b59      	ldr	r3, [pc, #356]	; (8007d3c <pvPortMalloc+0x184>)
 8007bd6:	681a      	ldr	r2, [r3, #0]
 8007bd8:	687b      	ldr	r3, [r7, #4]
 8007bda:	4013      	ands	r3, r2
 8007bdc:	2b00      	cmp	r3, #0
 8007bde:	f040 8093 	bne.w	8007d08 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8007be2:	687b      	ldr	r3, [r7, #4]
 8007be4:	2b00      	cmp	r3, #0
 8007be6:	d01d      	beq.n	8007c24 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8007be8:	2208      	movs	r2, #8
 8007bea:	687b      	ldr	r3, [r7, #4]
 8007bec:	4413      	add	r3, r2
 8007bee:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8007bf0:	687b      	ldr	r3, [r7, #4]
 8007bf2:	f003 0307 	and.w	r3, r3, #7
 8007bf6:	2b00      	cmp	r3, #0
 8007bf8:	d014      	beq.n	8007c24 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8007bfa:	687b      	ldr	r3, [r7, #4]
 8007bfc:	f023 0307 	bic.w	r3, r3, #7
 8007c00:	3308      	adds	r3, #8
 8007c02:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8007c04:	687b      	ldr	r3, [r7, #4]
 8007c06:	f003 0307 	and.w	r3, r3, #7
 8007c0a:	2b00      	cmp	r3, #0
 8007c0c:	d00a      	beq.n	8007c24 <pvPortMalloc+0x6c>
	__asm volatile
 8007c0e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007c12:	f383 8811 	msr	BASEPRI, r3
 8007c16:	f3bf 8f6f 	isb	sy
 8007c1a:	f3bf 8f4f 	dsb	sy
 8007c1e:	617b      	str	r3, [r7, #20]
}
 8007c20:	bf00      	nop
 8007c22:	e7fe      	b.n	8007c22 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8007c24:	687b      	ldr	r3, [r7, #4]
 8007c26:	2b00      	cmp	r3, #0
 8007c28:	d06e      	beq.n	8007d08 <pvPortMalloc+0x150>
 8007c2a:	4b45      	ldr	r3, [pc, #276]	; (8007d40 <pvPortMalloc+0x188>)
 8007c2c:	681b      	ldr	r3, [r3, #0]
 8007c2e:	687a      	ldr	r2, [r7, #4]
 8007c30:	429a      	cmp	r2, r3
 8007c32:	d869      	bhi.n	8007d08 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8007c34:	4b43      	ldr	r3, [pc, #268]	; (8007d44 <pvPortMalloc+0x18c>)
 8007c36:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8007c38:	4b42      	ldr	r3, [pc, #264]	; (8007d44 <pvPortMalloc+0x18c>)
 8007c3a:	681b      	ldr	r3, [r3, #0]
 8007c3c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8007c3e:	e004      	b.n	8007c4a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8007c40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c42:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8007c44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c46:	681b      	ldr	r3, [r3, #0]
 8007c48:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8007c4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c4c:	685b      	ldr	r3, [r3, #4]
 8007c4e:	687a      	ldr	r2, [r7, #4]
 8007c50:	429a      	cmp	r2, r3
 8007c52:	d903      	bls.n	8007c5c <pvPortMalloc+0xa4>
 8007c54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c56:	681b      	ldr	r3, [r3, #0]
 8007c58:	2b00      	cmp	r3, #0
 8007c5a:	d1f1      	bne.n	8007c40 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8007c5c:	4b36      	ldr	r3, [pc, #216]	; (8007d38 <pvPortMalloc+0x180>)
 8007c5e:	681b      	ldr	r3, [r3, #0]
 8007c60:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007c62:	429a      	cmp	r2, r3
 8007c64:	d050      	beq.n	8007d08 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8007c66:	6a3b      	ldr	r3, [r7, #32]
 8007c68:	681b      	ldr	r3, [r3, #0]
 8007c6a:	2208      	movs	r2, #8
 8007c6c:	4413      	add	r3, r2
 8007c6e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8007c70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c72:	681a      	ldr	r2, [r3, #0]
 8007c74:	6a3b      	ldr	r3, [r7, #32]
 8007c76:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8007c78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c7a:	685a      	ldr	r2, [r3, #4]
 8007c7c:	687b      	ldr	r3, [r7, #4]
 8007c7e:	1ad2      	subs	r2, r2, r3
 8007c80:	2308      	movs	r3, #8
 8007c82:	005b      	lsls	r3, r3, #1
 8007c84:	429a      	cmp	r2, r3
 8007c86:	d91f      	bls.n	8007cc8 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8007c88:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007c8a:	687b      	ldr	r3, [r7, #4]
 8007c8c:	4413      	add	r3, r2
 8007c8e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8007c90:	69bb      	ldr	r3, [r7, #24]
 8007c92:	f003 0307 	and.w	r3, r3, #7
 8007c96:	2b00      	cmp	r3, #0
 8007c98:	d00a      	beq.n	8007cb0 <pvPortMalloc+0xf8>
	__asm volatile
 8007c9a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007c9e:	f383 8811 	msr	BASEPRI, r3
 8007ca2:	f3bf 8f6f 	isb	sy
 8007ca6:	f3bf 8f4f 	dsb	sy
 8007caa:	613b      	str	r3, [r7, #16]
}
 8007cac:	bf00      	nop
 8007cae:	e7fe      	b.n	8007cae <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8007cb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007cb2:	685a      	ldr	r2, [r3, #4]
 8007cb4:	687b      	ldr	r3, [r7, #4]
 8007cb6:	1ad2      	subs	r2, r2, r3
 8007cb8:	69bb      	ldr	r3, [r7, #24]
 8007cba:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8007cbc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007cbe:	687a      	ldr	r2, [r7, #4]
 8007cc0:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8007cc2:	69b8      	ldr	r0, [r7, #24]
 8007cc4:	f000 f908 	bl	8007ed8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8007cc8:	4b1d      	ldr	r3, [pc, #116]	; (8007d40 <pvPortMalloc+0x188>)
 8007cca:	681a      	ldr	r2, [r3, #0]
 8007ccc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007cce:	685b      	ldr	r3, [r3, #4]
 8007cd0:	1ad3      	subs	r3, r2, r3
 8007cd2:	4a1b      	ldr	r2, [pc, #108]	; (8007d40 <pvPortMalloc+0x188>)
 8007cd4:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8007cd6:	4b1a      	ldr	r3, [pc, #104]	; (8007d40 <pvPortMalloc+0x188>)
 8007cd8:	681a      	ldr	r2, [r3, #0]
 8007cda:	4b1b      	ldr	r3, [pc, #108]	; (8007d48 <pvPortMalloc+0x190>)
 8007cdc:	681b      	ldr	r3, [r3, #0]
 8007cde:	429a      	cmp	r2, r3
 8007ce0:	d203      	bcs.n	8007cea <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8007ce2:	4b17      	ldr	r3, [pc, #92]	; (8007d40 <pvPortMalloc+0x188>)
 8007ce4:	681b      	ldr	r3, [r3, #0]
 8007ce6:	4a18      	ldr	r2, [pc, #96]	; (8007d48 <pvPortMalloc+0x190>)
 8007ce8:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8007cea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007cec:	685a      	ldr	r2, [r3, #4]
 8007cee:	4b13      	ldr	r3, [pc, #76]	; (8007d3c <pvPortMalloc+0x184>)
 8007cf0:	681b      	ldr	r3, [r3, #0]
 8007cf2:	431a      	orrs	r2, r3
 8007cf4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007cf6:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8007cf8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007cfa:	2200      	movs	r2, #0
 8007cfc:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8007cfe:	4b13      	ldr	r3, [pc, #76]	; (8007d4c <pvPortMalloc+0x194>)
 8007d00:	681b      	ldr	r3, [r3, #0]
 8007d02:	3301      	adds	r3, #1
 8007d04:	4a11      	ldr	r2, [pc, #68]	; (8007d4c <pvPortMalloc+0x194>)
 8007d06:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8007d08:	f7fe fcfc 	bl	8006704 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8007d0c:	69fb      	ldr	r3, [r7, #28]
 8007d0e:	f003 0307 	and.w	r3, r3, #7
 8007d12:	2b00      	cmp	r3, #0
 8007d14:	d00a      	beq.n	8007d2c <pvPortMalloc+0x174>
	__asm volatile
 8007d16:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007d1a:	f383 8811 	msr	BASEPRI, r3
 8007d1e:	f3bf 8f6f 	isb	sy
 8007d22:	f3bf 8f4f 	dsb	sy
 8007d26:	60fb      	str	r3, [r7, #12]
}
 8007d28:	bf00      	nop
 8007d2a:	e7fe      	b.n	8007d2a <pvPortMalloc+0x172>
	return pvReturn;
 8007d2c:	69fb      	ldr	r3, [r7, #28]
}
 8007d2e:	4618      	mov	r0, r3
 8007d30:	3728      	adds	r7, #40	; 0x28
 8007d32:	46bd      	mov	sp, r7
 8007d34:	bd80      	pop	{r7, pc}
 8007d36:	bf00      	nop
 8007d38:	20001d9c 	.word	0x20001d9c
 8007d3c:	20001db0 	.word	0x20001db0
 8007d40:	20001da0 	.word	0x20001da0
 8007d44:	20001d94 	.word	0x20001d94
 8007d48:	20001da4 	.word	0x20001da4
 8007d4c:	20001da8 	.word	0x20001da8

08007d50 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8007d50:	b580      	push	{r7, lr}
 8007d52:	b086      	sub	sp, #24
 8007d54:	af00      	add	r7, sp, #0
 8007d56:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8007d58:	687b      	ldr	r3, [r7, #4]
 8007d5a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8007d5c:	687b      	ldr	r3, [r7, #4]
 8007d5e:	2b00      	cmp	r3, #0
 8007d60:	d04d      	beq.n	8007dfe <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8007d62:	2308      	movs	r3, #8
 8007d64:	425b      	negs	r3, r3
 8007d66:	697a      	ldr	r2, [r7, #20]
 8007d68:	4413      	add	r3, r2
 8007d6a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8007d6c:	697b      	ldr	r3, [r7, #20]
 8007d6e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8007d70:	693b      	ldr	r3, [r7, #16]
 8007d72:	685a      	ldr	r2, [r3, #4]
 8007d74:	4b24      	ldr	r3, [pc, #144]	; (8007e08 <vPortFree+0xb8>)
 8007d76:	681b      	ldr	r3, [r3, #0]
 8007d78:	4013      	ands	r3, r2
 8007d7a:	2b00      	cmp	r3, #0
 8007d7c:	d10a      	bne.n	8007d94 <vPortFree+0x44>
	__asm volatile
 8007d7e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007d82:	f383 8811 	msr	BASEPRI, r3
 8007d86:	f3bf 8f6f 	isb	sy
 8007d8a:	f3bf 8f4f 	dsb	sy
 8007d8e:	60fb      	str	r3, [r7, #12]
}
 8007d90:	bf00      	nop
 8007d92:	e7fe      	b.n	8007d92 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8007d94:	693b      	ldr	r3, [r7, #16]
 8007d96:	681b      	ldr	r3, [r3, #0]
 8007d98:	2b00      	cmp	r3, #0
 8007d9a:	d00a      	beq.n	8007db2 <vPortFree+0x62>
	__asm volatile
 8007d9c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007da0:	f383 8811 	msr	BASEPRI, r3
 8007da4:	f3bf 8f6f 	isb	sy
 8007da8:	f3bf 8f4f 	dsb	sy
 8007dac:	60bb      	str	r3, [r7, #8]
}
 8007dae:	bf00      	nop
 8007db0:	e7fe      	b.n	8007db0 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8007db2:	693b      	ldr	r3, [r7, #16]
 8007db4:	685a      	ldr	r2, [r3, #4]
 8007db6:	4b14      	ldr	r3, [pc, #80]	; (8007e08 <vPortFree+0xb8>)
 8007db8:	681b      	ldr	r3, [r3, #0]
 8007dba:	4013      	ands	r3, r2
 8007dbc:	2b00      	cmp	r3, #0
 8007dbe:	d01e      	beq.n	8007dfe <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8007dc0:	693b      	ldr	r3, [r7, #16]
 8007dc2:	681b      	ldr	r3, [r3, #0]
 8007dc4:	2b00      	cmp	r3, #0
 8007dc6:	d11a      	bne.n	8007dfe <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8007dc8:	693b      	ldr	r3, [r7, #16]
 8007dca:	685a      	ldr	r2, [r3, #4]
 8007dcc:	4b0e      	ldr	r3, [pc, #56]	; (8007e08 <vPortFree+0xb8>)
 8007dce:	681b      	ldr	r3, [r3, #0]
 8007dd0:	43db      	mvns	r3, r3
 8007dd2:	401a      	ands	r2, r3
 8007dd4:	693b      	ldr	r3, [r7, #16]
 8007dd6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8007dd8:	f7fe fc86 	bl	80066e8 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8007ddc:	693b      	ldr	r3, [r7, #16]
 8007dde:	685a      	ldr	r2, [r3, #4]
 8007de0:	4b0a      	ldr	r3, [pc, #40]	; (8007e0c <vPortFree+0xbc>)
 8007de2:	681b      	ldr	r3, [r3, #0]
 8007de4:	4413      	add	r3, r2
 8007de6:	4a09      	ldr	r2, [pc, #36]	; (8007e0c <vPortFree+0xbc>)
 8007de8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8007dea:	6938      	ldr	r0, [r7, #16]
 8007dec:	f000 f874 	bl	8007ed8 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8007df0:	4b07      	ldr	r3, [pc, #28]	; (8007e10 <vPortFree+0xc0>)
 8007df2:	681b      	ldr	r3, [r3, #0]
 8007df4:	3301      	adds	r3, #1
 8007df6:	4a06      	ldr	r2, [pc, #24]	; (8007e10 <vPortFree+0xc0>)
 8007df8:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8007dfa:	f7fe fc83 	bl	8006704 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8007dfe:	bf00      	nop
 8007e00:	3718      	adds	r7, #24
 8007e02:	46bd      	mov	sp, r7
 8007e04:	bd80      	pop	{r7, pc}
 8007e06:	bf00      	nop
 8007e08:	20001db0 	.word	0x20001db0
 8007e0c:	20001da0 	.word	0x20001da0
 8007e10:	20001dac 	.word	0x20001dac

08007e14 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8007e14:	b480      	push	{r7}
 8007e16:	b085      	sub	sp, #20
 8007e18:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8007e1a:	f640 33b8 	movw	r3, #3000	; 0xbb8
 8007e1e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8007e20:	4b27      	ldr	r3, [pc, #156]	; (8007ec0 <prvHeapInit+0xac>)
 8007e22:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8007e24:	68fb      	ldr	r3, [r7, #12]
 8007e26:	f003 0307 	and.w	r3, r3, #7
 8007e2a:	2b00      	cmp	r3, #0
 8007e2c:	d00c      	beq.n	8007e48 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8007e2e:	68fb      	ldr	r3, [r7, #12]
 8007e30:	3307      	adds	r3, #7
 8007e32:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8007e34:	68fb      	ldr	r3, [r7, #12]
 8007e36:	f023 0307 	bic.w	r3, r3, #7
 8007e3a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8007e3c:	68ba      	ldr	r2, [r7, #8]
 8007e3e:	68fb      	ldr	r3, [r7, #12]
 8007e40:	1ad3      	subs	r3, r2, r3
 8007e42:	4a1f      	ldr	r2, [pc, #124]	; (8007ec0 <prvHeapInit+0xac>)
 8007e44:	4413      	add	r3, r2
 8007e46:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8007e48:	68fb      	ldr	r3, [r7, #12]
 8007e4a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8007e4c:	4a1d      	ldr	r2, [pc, #116]	; (8007ec4 <prvHeapInit+0xb0>)
 8007e4e:	687b      	ldr	r3, [r7, #4]
 8007e50:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8007e52:	4b1c      	ldr	r3, [pc, #112]	; (8007ec4 <prvHeapInit+0xb0>)
 8007e54:	2200      	movs	r2, #0
 8007e56:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8007e58:	687b      	ldr	r3, [r7, #4]
 8007e5a:	68ba      	ldr	r2, [r7, #8]
 8007e5c:	4413      	add	r3, r2
 8007e5e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8007e60:	2208      	movs	r2, #8
 8007e62:	68fb      	ldr	r3, [r7, #12]
 8007e64:	1a9b      	subs	r3, r3, r2
 8007e66:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8007e68:	68fb      	ldr	r3, [r7, #12]
 8007e6a:	f023 0307 	bic.w	r3, r3, #7
 8007e6e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8007e70:	68fb      	ldr	r3, [r7, #12]
 8007e72:	4a15      	ldr	r2, [pc, #84]	; (8007ec8 <prvHeapInit+0xb4>)
 8007e74:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8007e76:	4b14      	ldr	r3, [pc, #80]	; (8007ec8 <prvHeapInit+0xb4>)
 8007e78:	681b      	ldr	r3, [r3, #0]
 8007e7a:	2200      	movs	r2, #0
 8007e7c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8007e7e:	4b12      	ldr	r3, [pc, #72]	; (8007ec8 <prvHeapInit+0xb4>)
 8007e80:	681b      	ldr	r3, [r3, #0]
 8007e82:	2200      	movs	r2, #0
 8007e84:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8007e86:	687b      	ldr	r3, [r7, #4]
 8007e88:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8007e8a:	683b      	ldr	r3, [r7, #0]
 8007e8c:	68fa      	ldr	r2, [r7, #12]
 8007e8e:	1ad2      	subs	r2, r2, r3
 8007e90:	683b      	ldr	r3, [r7, #0]
 8007e92:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8007e94:	4b0c      	ldr	r3, [pc, #48]	; (8007ec8 <prvHeapInit+0xb4>)
 8007e96:	681a      	ldr	r2, [r3, #0]
 8007e98:	683b      	ldr	r3, [r7, #0]
 8007e9a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8007e9c:	683b      	ldr	r3, [r7, #0]
 8007e9e:	685b      	ldr	r3, [r3, #4]
 8007ea0:	4a0a      	ldr	r2, [pc, #40]	; (8007ecc <prvHeapInit+0xb8>)
 8007ea2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8007ea4:	683b      	ldr	r3, [r7, #0]
 8007ea6:	685b      	ldr	r3, [r3, #4]
 8007ea8:	4a09      	ldr	r2, [pc, #36]	; (8007ed0 <prvHeapInit+0xbc>)
 8007eaa:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8007eac:	4b09      	ldr	r3, [pc, #36]	; (8007ed4 <prvHeapInit+0xc0>)
 8007eae:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8007eb2:	601a      	str	r2, [r3, #0]
}
 8007eb4:	bf00      	nop
 8007eb6:	3714      	adds	r7, #20
 8007eb8:	46bd      	mov	sp, r7
 8007eba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ebe:	4770      	bx	lr
 8007ec0:	200011dc 	.word	0x200011dc
 8007ec4:	20001d94 	.word	0x20001d94
 8007ec8:	20001d9c 	.word	0x20001d9c
 8007ecc:	20001da4 	.word	0x20001da4
 8007ed0:	20001da0 	.word	0x20001da0
 8007ed4:	20001db0 	.word	0x20001db0

08007ed8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8007ed8:	b480      	push	{r7}
 8007eda:	b085      	sub	sp, #20
 8007edc:	af00      	add	r7, sp, #0
 8007ede:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8007ee0:	4b28      	ldr	r3, [pc, #160]	; (8007f84 <prvInsertBlockIntoFreeList+0xac>)
 8007ee2:	60fb      	str	r3, [r7, #12]
 8007ee4:	e002      	b.n	8007eec <prvInsertBlockIntoFreeList+0x14>
 8007ee6:	68fb      	ldr	r3, [r7, #12]
 8007ee8:	681b      	ldr	r3, [r3, #0]
 8007eea:	60fb      	str	r3, [r7, #12]
 8007eec:	68fb      	ldr	r3, [r7, #12]
 8007eee:	681b      	ldr	r3, [r3, #0]
 8007ef0:	687a      	ldr	r2, [r7, #4]
 8007ef2:	429a      	cmp	r2, r3
 8007ef4:	d8f7      	bhi.n	8007ee6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8007ef6:	68fb      	ldr	r3, [r7, #12]
 8007ef8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8007efa:	68fb      	ldr	r3, [r7, #12]
 8007efc:	685b      	ldr	r3, [r3, #4]
 8007efe:	68ba      	ldr	r2, [r7, #8]
 8007f00:	4413      	add	r3, r2
 8007f02:	687a      	ldr	r2, [r7, #4]
 8007f04:	429a      	cmp	r2, r3
 8007f06:	d108      	bne.n	8007f1a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8007f08:	68fb      	ldr	r3, [r7, #12]
 8007f0a:	685a      	ldr	r2, [r3, #4]
 8007f0c:	687b      	ldr	r3, [r7, #4]
 8007f0e:	685b      	ldr	r3, [r3, #4]
 8007f10:	441a      	add	r2, r3
 8007f12:	68fb      	ldr	r3, [r7, #12]
 8007f14:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8007f16:	68fb      	ldr	r3, [r7, #12]
 8007f18:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8007f1a:	687b      	ldr	r3, [r7, #4]
 8007f1c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8007f1e:	687b      	ldr	r3, [r7, #4]
 8007f20:	685b      	ldr	r3, [r3, #4]
 8007f22:	68ba      	ldr	r2, [r7, #8]
 8007f24:	441a      	add	r2, r3
 8007f26:	68fb      	ldr	r3, [r7, #12]
 8007f28:	681b      	ldr	r3, [r3, #0]
 8007f2a:	429a      	cmp	r2, r3
 8007f2c:	d118      	bne.n	8007f60 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8007f2e:	68fb      	ldr	r3, [r7, #12]
 8007f30:	681a      	ldr	r2, [r3, #0]
 8007f32:	4b15      	ldr	r3, [pc, #84]	; (8007f88 <prvInsertBlockIntoFreeList+0xb0>)
 8007f34:	681b      	ldr	r3, [r3, #0]
 8007f36:	429a      	cmp	r2, r3
 8007f38:	d00d      	beq.n	8007f56 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8007f3a:	687b      	ldr	r3, [r7, #4]
 8007f3c:	685a      	ldr	r2, [r3, #4]
 8007f3e:	68fb      	ldr	r3, [r7, #12]
 8007f40:	681b      	ldr	r3, [r3, #0]
 8007f42:	685b      	ldr	r3, [r3, #4]
 8007f44:	441a      	add	r2, r3
 8007f46:	687b      	ldr	r3, [r7, #4]
 8007f48:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8007f4a:	68fb      	ldr	r3, [r7, #12]
 8007f4c:	681b      	ldr	r3, [r3, #0]
 8007f4e:	681a      	ldr	r2, [r3, #0]
 8007f50:	687b      	ldr	r3, [r7, #4]
 8007f52:	601a      	str	r2, [r3, #0]
 8007f54:	e008      	b.n	8007f68 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8007f56:	4b0c      	ldr	r3, [pc, #48]	; (8007f88 <prvInsertBlockIntoFreeList+0xb0>)
 8007f58:	681a      	ldr	r2, [r3, #0]
 8007f5a:	687b      	ldr	r3, [r7, #4]
 8007f5c:	601a      	str	r2, [r3, #0]
 8007f5e:	e003      	b.n	8007f68 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8007f60:	68fb      	ldr	r3, [r7, #12]
 8007f62:	681a      	ldr	r2, [r3, #0]
 8007f64:	687b      	ldr	r3, [r7, #4]
 8007f66:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8007f68:	68fa      	ldr	r2, [r7, #12]
 8007f6a:	687b      	ldr	r3, [r7, #4]
 8007f6c:	429a      	cmp	r2, r3
 8007f6e:	d002      	beq.n	8007f76 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8007f70:	68fb      	ldr	r3, [r7, #12]
 8007f72:	687a      	ldr	r2, [r7, #4]
 8007f74:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8007f76:	bf00      	nop
 8007f78:	3714      	adds	r7, #20
 8007f7a:	46bd      	mov	sp, r7
 8007f7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f80:	4770      	bx	lr
 8007f82:	bf00      	nop
 8007f84:	20001d94 	.word	0x20001d94
 8007f88:	20001d9c 	.word	0x20001d9c

08007f8c <__errno>:
 8007f8c:	4b01      	ldr	r3, [pc, #4]	; (8007f94 <__errno+0x8>)
 8007f8e:	6818      	ldr	r0, [r3, #0]
 8007f90:	4770      	bx	lr
 8007f92:	bf00      	nop
 8007f94:	20000010 	.word	0x20000010

08007f98 <std>:
 8007f98:	2300      	movs	r3, #0
 8007f9a:	b510      	push	{r4, lr}
 8007f9c:	4604      	mov	r4, r0
 8007f9e:	e9c0 3300 	strd	r3, r3, [r0]
 8007fa2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8007fa6:	6083      	str	r3, [r0, #8]
 8007fa8:	8181      	strh	r1, [r0, #12]
 8007faa:	6643      	str	r3, [r0, #100]	; 0x64
 8007fac:	81c2      	strh	r2, [r0, #14]
 8007fae:	6183      	str	r3, [r0, #24]
 8007fb0:	4619      	mov	r1, r3
 8007fb2:	2208      	movs	r2, #8
 8007fb4:	305c      	adds	r0, #92	; 0x5c
 8007fb6:	f000 f91a 	bl	80081ee <memset>
 8007fba:	4b05      	ldr	r3, [pc, #20]	; (8007fd0 <std+0x38>)
 8007fbc:	6263      	str	r3, [r4, #36]	; 0x24
 8007fbe:	4b05      	ldr	r3, [pc, #20]	; (8007fd4 <std+0x3c>)
 8007fc0:	62a3      	str	r3, [r4, #40]	; 0x28
 8007fc2:	4b05      	ldr	r3, [pc, #20]	; (8007fd8 <std+0x40>)
 8007fc4:	62e3      	str	r3, [r4, #44]	; 0x2c
 8007fc6:	4b05      	ldr	r3, [pc, #20]	; (8007fdc <std+0x44>)
 8007fc8:	6224      	str	r4, [r4, #32]
 8007fca:	6323      	str	r3, [r4, #48]	; 0x30
 8007fcc:	bd10      	pop	{r4, pc}
 8007fce:	bf00      	nop
 8007fd0:	0800915d 	.word	0x0800915d
 8007fd4:	0800917f 	.word	0x0800917f
 8007fd8:	080091b7 	.word	0x080091b7
 8007fdc:	080091db 	.word	0x080091db

08007fe0 <_cleanup_r>:
 8007fe0:	4901      	ldr	r1, [pc, #4]	; (8007fe8 <_cleanup_r+0x8>)
 8007fe2:	f000 b8af 	b.w	8008144 <_fwalk_reent>
 8007fe6:	bf00      	nop
 8007fe8:	0800ad89 	.word	0x0800ad89

08007fec <__sfmoreglue>:
 8007fec:	b570      	push	{r4, r5, r6, lr}
 8007fee:	2268      	movs	r2, #104	; 0x68
 8007ff0:	1e4d      	subs	r5, r1, #1
 8007ff2:	4355      	muls	r5, r2
 8007ff4:	460e      	mov	r6, r1
 8007ff6:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8007ffa:	f000 f921 	bl	8008240 <_malloc_r>
 8007ffe:	4604      	mov	r4, r0
 8008000:	b140      	cbz	r0, 8008014 <__sfmoreglue+0x28>
 8008002:	2100      	movs	r1, #0
 8008004:	e9c0 1600 	strd	r1, r6, [r0]
 8008008:	300c      	adds	r0, #12
 800800a:	60a0      	str	r0, [r4, #8]
 800800c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8008010:	f000 f8ed 	bl	80081ee <memset>
 8008014:	4620      	mov	r0, r4
 8008016:	bd70      	pop	{r4, r5, r6, pc}

08008018 <__sfp_lock_acquire>:
 8008018:	4801      	ldr	r0, [pc, #4]	; (8008020 <__sfp_lock_acquire+0x8>)
 800801a:	f000 b8d8 	b.w	80081ce <__retarget_lock_acquire_recursive>
 800801e:	bf00      	nop
 8008020:	20001db5 	.word	0x20001db5

08008024 <__sfp_lock_release>:
 8008024:	4801      	ldr	r0, [pc, #4]	; (800802c <__sfp_lock_release+0x8>)
 8008026:	f000 b8d3 	b.w	80081d0 <__retarget_lock_release_recursive>
 800802a:	bf00      	nop
 800802c:	20001db5 	.word	0x20001db5

08008030 <__sinit_lock_acquire>:
 8008030:	4801      	ldr	r0, [pc, #4]	; (8008038 <__sinit_lock_acquire+0x8>)
 8008032:	f000 b8cc 	b.w	80081ce <__retarget_lock_acquire_recursive>
 8008036:	bf00      	nop
 8008038:	20001db6 	.word	0x20001db6

0800803c <__sinit_lock_release>:
 800803c:	4801      	ldr	r0, [pc, #4]	; (8008044 <__sinit_lock_release+0x8>)
 800803e:	f000 b8c7 	b.w	80081d0 <__retarget_lock_release_recursive>
 8008042:	bf00      	nop
 8008044:	20001db6 	.word	0x20001db6

08008048 <__sinit>:
 8008048:	b510      	push	{r4, lr}
 800804a:	4604      	mov	r4, r0
 800804c:	f7ff fff0 	bl	8008030 <__sinit_lock_acquire>
 8008050:	69a3      	ldr	r3, [r4, #24]
 8008052:	b11b      	cbz	r3, 800805c <__sinit+0x14>
 8008054:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008058:	f7ff bff0 	b.w	800803c <__sinit_lock_release>
 800805c:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8008060:	6523      	str	r3, [r4, #80]	; 0x50
 8008062:	4b13      	ldr	r3, [pc, #76]	; (80080b0 <__sinit+0x68>)
 8008064:	4a13      	ldr	r2, [pc, #76]	; (80080b4 <__sinit+0x6c>)
 8008066:	681b      	ldr	r3, [r3, #0]
 8008068:	62a2      	str	r2, [r4, #40]	; 0x28
 800806a:	42a3      	cmp	r3, r4
 800806c:	bf04      	itt	eq
 800806e:	2301      	moveq	r3, #1
 8008070:	61a3      	streq	r3, [r4, #24]
 8008072:	4620      	mov	r0, r4
 8008074:	f000 f820 	bl	80080b8 <__sfp>
 8008078:	6060      	str	r0, [r4, #4]
 800807a:	4620      	mov	r0, r4
 800807c:	f000 f81c 	bl	80080b8 <__sfp>
 8008080:	60a0      	str	r0, [r4, #8]
 8008082:	4620      	mov	r0, r4
 8008084:	f000 f818 	bl	80080b8 <__sfp>
 8008088:	2200      	movs	r2, #0
 800808a:	60e0      	str	r0, [r4, #12]
 800808c:	2104      	movs	r1, #4
 800808e:	6860      	ldr	r0, [r4, #4]
 8008090:	f7ff ff82 	bl	8007f98 <std>
 8008094:	68a0      	ldr	r0, [r4, #8]
 8008096:	2201      	movs	r2, #1
 8008098:	2109      	movs	r1, #9
 800809a:	f7ff ff7d 	bl	8007f98 <std>
 800809e:	68e0      	ldr	r0, [r4, #12]
 80080a0:	2202      	movs	r2, #2
 80080a2:	2112      	movs	r1, #18
 80080a4:	f7ff ff78 	bl	8007f98 <std>
 80080a8:	2301      	movs	r3, #1
 80080aa:	61a3      	str	r3, [r4, #24]
 80080ac:	e7d2      	b.n	8008054 <__sinit+0xc>
 80080ae:	bf00      	nop
 80080b0:	0800cb3c 	.word	0x0800cb3c
 80080b4:	08007fe1 	.word	0x08007fe1

080080b8 <__sfp>:
 80080b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80080ba:	4607      	mov	r7, r0
 80080bc:	f7ff ffac 	bl	8008018 <__sfp_lock_acquire>
 80080c0:	4b1e      	ldr	r3, [pc, #120]	; (800813c <__sfp+0x84>)
 80080c2:	681e      	ldr	r6, [r3, #0]
 80080c4:	69b3      	ldr	r3, [r6, #24]
 80080c6:	b913      	cbnz	r3, 80080ce <__sfp+0x16>
 80080c8:	4630      	mov	r0, r6
 80080ca:	f7ff ffbd 	bl	8008048 <__sinit>
 80080ce:	3648      	adds	r6, #72	; 0x48
 80080d0:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80080d4:	3b01      	subs	r3, #1
 80080d6:	d503      	bpl.n	80080e0 <__sfp+0x28>
 80080d8:	6833      	ldr	r3, [r6, #0]
 80080da:	b30b      	cbz	r3, 8008120 <__sfp+0x68>
 80080dc:	6836      	ldr	r6, [r6, #0]
 80080de:	e7f7      	b.n	80080d0 <__sfp+0x18>
 80080e0:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80080e4:	b9d5      	cbnz	r5, 800811c <__sfp+0x64>
 80080e6:	4b16      	ldr	r3, [pc, #88]	; (8008140 <__sfp+0x88>)
 80080e8:	60e3      	str	r3, [r4, #12]
 80080ea:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80080ee:	6665      	str	r5, [r4, #100]	; 0x64
 80080f0:	f000 f86c 	bl	80081cc <__retarget_lock_init_recursive>
 80080f4:	f7ff ff96 	bl	8008024 <__sfp_lock_release>
 80080f8:	e9c4 5501 	strd	r5, r5, [r4, #4]
 80080fc:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8008100:	6025      	str	r5, [r4, #0]
 8008102:	61a5      	str	r5, [r4, #24]
 8008104:	2208      	movs	r2, #8
 8008106:	4629      	mov	r1, r5
 8008108:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800810c:	f000 f86f 	bl	80081ee <memset>
 8008110:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8008114:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8008118:	4620      	mov	r0, r4
 800811a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800811c:	3468      	adds	r4, #104	; 0x68
 800811e:	e7d9      	b.n	80080d4 <__sfp+0x1c>
 8008120:	2104      	movs	r1, #4
 8008122:	4638      	mov	r0, r7
 8008124:	f7ff ff62 	bl	8007fec <__sfmoreglue>
 8008128:	4604      	mov	r4, r0
 800812a:	6030      	str	r0, [r6, #0]
 800812c:	2800      	cmp	r0, #0
 800812e:	d1d5      	bne.n	80080dc <__sfp+0x24>
 8008130:	f7ff ff78 	bl	8008024 <__sfp_lock_release>
 8008134:	230c      	movs	r3, #12
 8008136:	603b      	str	r3, [r7, #0]
 8008138:	e7ee      	b.n	8008118 <__sfp+0x60>
 800813a:	bf00      	nop
 800813c:	0800cb3c 	.word	0x0800cb3c
 8008140:	ffff0001 	.word	0xffff0001

08008144 <_fwalk_reent>:
 8008144:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008148:	4606      	mov	r6, r0
 800814a:	4688      	mov	r8, r1
 800814c:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8008150:	2700      	movs	r7, #0
 8008152:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8008156:	f1b9 0901 	subs.w	r9, r9, #1
 800815a:	d505      	bpl.n	8008168 <_fwalk_reent+0x24>
 800815c:	6824      	ldr	r4, [r4, #0]
 800815e:	2c00      	cmp	r4, #0
 8008160:	d1f7      	bne.n	8008152 <_fwalk_reent+0xe>
 8008162:	4638      	mov	r0, r7
 8008164:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008168:	89ab      	ldrh	r3, [r5, #12]
 800816a:	2b01      	cmp	r3, #1
 800816c:	d907      	bls.n	800817e <_fwalk_reent+0x3a>
 800816e:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8008172:	3301      	adds	r3, #1
 8008174:	d003      	beq.n	800817e <_fwalk_reent+0x3a>
 8008176:	4629      	mov	r1, r5
 8008178:	4630      	mov	r0, r6
 800817a:	47c0      	blx	r8
 800817c:	4307      	orrs	r7, r0
 800817e:	3568      	adds	r5, #104	; 0x68
 8008180:	e7e9      	b.n	8008156 <_fwalk_reent+0x12>
	...

08008184 <__libc_init_array>:
 8008184:	b570      	push	{r4, r5, r6, lr}
 8008186:	4d0d      	ldr	r5, [pc, #52]	; (80081bc <__libc_init_array+0x38>)
 8008188:	4c0d      	ldr	r4, [pc, #52]	; (80081c0 <__libc_init_array+0x3c>)
 800818a:	1b64      	subs	r4, r4, r5
 800818c:	10a4      	asrs	r4, r4, #2
 800818e:	2600      	movs	r6, #0
 8008190:	42a6      	cmp	r6, r4
 8008192:	d109      	bne.n	80081a8 <__libc_init_array+0x24>
 8008194:	4d0b      	ldr	r5, [pc, #44]	; (80081c4 <__libc_init_array+0x40>)
 8008196:	4c0c      	ldr	r4, [pc, #48]	; (80081c8 <__libc_init_array+0x44>)
 8008198:	f004 fc08 	bl	800c9ac <_init>
 800819c:	1b64      	subs	r4, r4, r5
 800819e:	10a4      	asrs	r4, r4, #2
 80081a0:	2600      	movs	r6, #0
 80081a2:	42a6      	cmp	r6, r4
 80081a4:	d105      	bne.n	80081b2 <__libc_init_array+0x2e>
 80081a6:	bd70      	pop	{r4, r5, r6, pc}
 80081a8:	f855 3b04 	ldr.w	r3, [r5], #4
 80081ac:	4798      	blx	r3
 80081ae:	3601      	adds	r6, #1
 80081b0:	e7ee      	b.n	8008190 <__libc_init_array+0xc>
 80081b2:	f855 3b04 	ldr.w	r3, [r5], #4
 80081b6:	4798      	blx	r3
 80081b8:	3601      	adds	r6, #1
 80081ba:	e7f2      	b.n	80081a2 <__libc_init_array+0x1e>
 80081bc:	0800cf8c 	.word	0x0800cf8c
 80081c0:	0800cf8c 	.word	0x0800cf8c
 80081c4:	0800cf8c 	.word	0x0800cf8c
 80081c8:	0800cf90 	.word	0x0800cf90

080081cc <__retarget_lock_init_recursive>:
 80081cc:	4770      	bx	lr

080081ce <__retarget_lock_acquire_recursive>:
 80081ce:	4770      	bx	lr

080081d0 <__retarget_lock_release_recursive>:
 80081d0:	4770      	bx	lr

080081d2 <memcpy>:
 80081d2:	440a      	add	r2, r1
 80081d4:	4291      	cmp	r1, r2
 80081d6:	f100 33ff 	add.w	r3, r0, #4294967295
 80081da:	d100      	bne.n	80081de <memcpy+0xc>
 80081dc:	4770      	bx	lr
 80081de:	b510      	push	{r4, lr}
 80081e0:	f811 4b01 	ldrb.w	r4, [r1], #1
 80081e4:	f803 4f01 	strb.w	r4, [r3, #1]!
 80081e8:	4291      	cmp	r1, r2
 80081ea:	d1f9      	bne.n	80081e0 <memcpy+0xe>
 80081ec:	bd10      	pop	{r4, pc}

080081ee <memset>:
 80081ee:	4402      	add	r2, r0
 80081f0:	4603      	mov	r3, r0
 80081f2:	4293      	cmp	r3, r2
 80081f4:	d100      	bne.n	80081f8 <memset+0xa>
 80081f6:	4770      	bx	lr
 80081f8:	f803 1b01 	strb.w	r1, [r3], #1
 80081fc:	e7f9      	b.n	80081f2 <memset+0x4>
	...

08008200 <sbrk_aligned>:
 8008200:	b570      	push	{r4, r5, r6, lr}
 8008202:	4e0e      	ldr	r6, [pc, #56]	; (800823c <sbrk_aligned+0x3c>)
 8008204:	460c      	mov	r4, r1
 8008206:	6831      	ldr	r1, [r6, #0]
 8008208:	4605      	mov	r5, r0
 800820a:	b911      	cbnz	r1, 8008212 <sbrk_aligned+0x12>
 800820c:	f000 ff70 	bl	80090f0 <_sbrk_r>
 8008210:	6030      	str	r0, [r6, #0]
 8008212:	4621      	mov	r1, r4
 8008214:	4628      	mov	r0, r5
 8008216:	f000 ff6b 	bl	80090f0 <_sbrk_r>
 800821a:	1c43      	adds	r3, r0, #1
 800821c:	d00a      	beq.n	8008234 <sbrk_aligned+0x34>
 800821e:	1cc4      	adds	r4, r0, #3
 8008220:	f024 0403 	bic.w	r4, r4, #3
 8008224:	42a0      	cmp	r0, r4
 8008226:	d007      	beq.n	8008238 <sbrk_aligned+0x38>
 8008228:	1a21      	subs	r1, r4, r0
 800822a:	4628      	mov	r0, r5
 800822c:	f000 ff60 	bl	80090f0 <_sbrk_r>
 8008230:	3001      	adds	r0, #1
 8008232:	d101      	bne.n	8008238 <sbrk_aligned+0x38>
 8008234:	f04f 34ff 	mov.w	r4, #4294967295
 8008238:	4620      	mov	r0, r4
 800823a:	bd70      	pop	{r4, r5, r6, pc}
 800823c:	20001dbc 	.word	0x20001dbc

08008240 <_malloc_r>:
 8008240:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008244:	1ccd      	adds	r5, r1, #3
 8008246:	f025 0503 	bic.w	r5, r5, #3
 800824a:	3508      	adds	r5, #8
 800824c:	2d0c      	cmp	r5, #12
 800824e:	bf38      	it	cc
 8008250:	250c      	movcc	r5, #12
 8008252:	2d00      	cmp	r5, #0
 8008254:	4607      	mov	r7, r0
 8008256:	db01      	blt.n	800825c <_malloc_r+0x1c>
 8008258:	42a9      	cmp	r1, r5
 800825a:	d905      	bls.n	8008268 <_malloc_r+0x28>
 800825c:	230c      	movs	r3, #12
 800825e:	603b      	str	r3, [r7, #0]
 8008260:	2600      	movs	r6, #0
 8008262:	4630      	mov	r0, r6
 8008264:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008268:	4e2e      	ldr	r6, [pc, #184]	; (8008324 <_malloc_r+0xe4>)
 800826a:	f003 f969 	bl	800b540 <__malloc_lock>
 800826e:	6833      	ldr	r3, [r6, #0]
 8008270:	461c      	mov	r4, r3
 8008272:	bb34      	cbnz	r4, 80082c2 <_malloc_r+0x82>
 8008274:	4629      	mov	r1, r5
 8008276:	4638      	mov	r0, r7
 8008278:	f7ff ffc2 	bl	8008200 <sbrk_aligned>
 800827c:	1c43      	adds	r3, r0, #1
 800827e:	4604      	mov	r4, r0
 8008280:	d14d      	bne.n	800831e <_malloc_r+0xde>
 8008282:	6834      	ldr	r4, [r6, #0]
 8008284:	4626      	mov	r6, r4
 8008286:	2e00      	cmp	r6, #0
 8008288:	d140      	bne.n	800830c <_malloc_r+0xcc>
 800828a:	6823      	ldr	r3, [r4, #0]
 800828c:	4631      	mov	r1, r6
 800828e:	4638      	mov	r0, r7
 8008290:	eb04 0803 	add.w	r8, r4, r3
 8008294:	f000 ff2c 	bl	80090f0 <_sbrk_r>
 8008298:	4580      	cmp	r8, r0
 800829a:	d13a      	bne.n	8008312 <_malloc_r+0xd2>
 800829c:	6821      	ldr	r1, [r4, #0]
 800829e:	3503      	adds	r5, #3
 80082a0:	1a6d      	subs	r5, r5, r1
 80082a2:	f025 0503 	bic.w	r5, r5, #3
 80082a6:	3508      	adds	r5, #8
 80082a8:	2d0c      	cmp	r5, #12
 80082aa:	bf38      	it	cc
 80082ac:	250c      	movcc	r5, #12
 80082ae:	4629      	mov	r1, r5
 80082b0:	4638      	mov	r0, r7
 80082b2:	f7ff ffa5 	bl	8008200 <sbrk_aligned>
 80082b6:	3001      	adds	r0, #1
 80082b8:	d02b      	beq.n	8008312 <_malloc_r+0xd2>
 80082ba:	6823      	ldr	r3, [r4, #0]
 80082bc:	442b      	add	r3, r5
 80082be:	6023      	str	r3, [r4, #0]
 80082c0:	e00e      	b.n	80082e0 <_malloc_r+0xa0>
 80082c2:	6822      	ldr	r2, [r4, #0]
 80082c4:	1b52      	subs	r2, r2, r5
 80082c6:	d41e      	bmi.n	8008306 <_malloc_r+0xc6>
 80082c8:	2a0b      	cmp	r2, #11
 80082ca:	d916      	bls.n	80082fa <_malloc_r+0xba>
 80082cc:	1961      	adds	r1, r4, r5
 80082ce:	42a3      	cmp	r3, r4
 80082d0:	6025      	str	r5, [r4, #0]
 80082d2:	bf18      	it	ne
 80082d4:	6059      	strne	r1, [r3, #4]
 80082d6:	6863      	ldr	r3, [r4, #4]
 80082d8:	bf08      	it	eq
 80082da:	6031      	streq	r1, [r6, #0]
 80082dc:	5162      	str	r2, [r4, r5]
 80082de:	604b      	str	r3, [r1, #4]
 80082e0:	4638      	mov	r0, r7
 80082e2:	f104 060b 	add.w	r6, r4, #11
 80082e6:	f003 f931 	bl	800b54c <__malloc_unlock>
 80082ea:	f026 0607 	bic.w	r6, r6, #7
 80082ee:	1d23      	adds	r3, r4, #4
 80082f0:	1af2      	subs	r2, r6, r3
 80082f2:	d0b6      	beq.n	8008262 <_malloc_r+0x22>
 80082f4:	1b9b      	subs	r3, r3, r6
 80082f6:	50a3      	str	r3, [r4, r2]
 80082f8:	e7b3      	b.n	8008262 <_malloc_r+0x22>
 80082fa:	6862      	ldr	r2, [r4, #4]
 80082fc:	42a3      	cmp	r3, r4
 80082fe:	bf0c      	ite	eq
 8008300:	6032      	streq	r2, [r6, #0]
 8008302:	605a      	strne	r2, [r3, #4]
 8008304:	e7ec      	b.n	80082e0 <_malloc_r+0xa0>
 8008306:	4623      	mov	r3, r4
 8008308:	6864      	ldr	r4, [r4, #4]
 800830a:	e7b2      	b.n	8008272 <_malloc_r+0x32>
 800830c:	4634      	mov	r4, r6
 800830e:	6876      	ldr	r6, [r6, #4]
 8008310:	e7b9      	b.n	8008286 <_malloc_r+0x46>
 8008312:	230c      	movs	r3, #12
 8008314:	603b      	str	r3, [r7, #0]
 8008316:	4638      	mov	r0, r7
 8008318:	f003 f918 	bl	800b54c <__malloc_unlock>
 800831c:	e7a1      	b.n	8008262 <_malloc_r+0x22>
 800831e:	6025      	str	r5, [r4, #0]
 8008320:	e7de      	b.n	80082e0 <_malloc_r+0xa0>
 8008322:	bf00      	nop
 8008324:	20001db8 	.word	0x20001db8

08008328 <__cvt>:
 8008328:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800832c:	ec55 4b10 	vmov	r4, r5, d0
 8008330:	2d00      	cmp	r5, #0
 8008332:	460e      	mov	r6, r1
 8008334:	4619      	mov	r1, r3
 8008336:	462b      	mov	r3, r5
 8008338:	bfbb      	ittet	lt
 800833a:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800833e:	461d      	movlt	r5, r3
 8008340:	2300      	movge	r3, #0
 8008342:	232d      	movlt	r3, #45	; 0x2d
 8008344:	700b      	strb	r3, [r1, #0]
 8008346:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008348:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 800834c:	4691      	mov	r9, r2
 800834e:	f023 0820 	bic.w	r8, r3, #32
 8008352:	bfbc      	itt	lt
 8008354:	4622      	movlt	r2, r4
 8008356:	4614      	movlt	r4, r2
 8008358:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800835c:	d005      	beq.n	800836a <__cvt+0x42>
 800835e:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8008362:	d100      	bne.n	8008366 <__cvt+0x3e>
 8008364:	3601      	adds	r6, #1
 8008366:	2102      	movs	r1, #2
 8008368:	e000      	b.n	800836c <__cvt+0x44>
 800836a:	2103      	movs	r1, #3
 800836c:	ab03      	add	r3, sp, #12
 800836e:	9301      	str	r3, [sp, #4]
 8008370:	ab02      	add	r3, sp, #8
 8008372:	9300      	str	r3, [sp, #0]
 8008374:	ec45 4b10 	vmov	d0, r4, r5
 8008378:	4653      	mov	r3, sl
 800837a:	4632      	mov	r2, r6
 800837c:	f001 fe90 	bl	800a0a0 <_dtoa_r>
 8008380:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8008384:	4607      	mov	r7, r0
 8008386:	d102      	bne.n	800838e <__cvt+0x66>
 8008388:	f019 0f01 	tst.w	r9, #1
 800838c:	d022      	beq.n	80083d4 <__cvt+0xac>
 800838e:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8008392:	eb07 0906 	add.w	r9, r7, r6
 8008396:	d110      	bne.n	80083ba <__cvt+0x92>
 8008398:	783b      	ldrb	r3, [r7, #0]
 800839a:	2b30      	cmp	r3, #48	; 0x30
 800839c:	d10a      	bne.n	80083b4 <__cvt+0x8c>
 800839e:	2200      	movs	r2, #0
 80083a0:	2300      	movs	r3, #0
 80083a2:	4620      	mov	r0, r4
 80083a4:	4629      	mov	r1, r5
 80083a6:	f7f8 fb8f 	bl	8000ac8 <__aeabi_dcmpeq>
 80083aa:	b918      	cbnz	r0, 80083b4 <__cvt+0x8c>
 80083ac:	f1c6 0601 	rsb	r6, r6, #1
 80083b0:	f8ca 6000 	str.w	r6, [sl]
 80083b4:	f8da 3000 	ldr.w	r3, [sl]
 80083b8:	4499      	add	r9, r3
 80083ba:	2200      	movs	r2, #0
 80083bc:	2300      	movs	r3, #0
 80083be:	4620      	mov	r0, r4
 80083c0:	4629      	mov	r1, r5
 80083c2:	f7f8 fb81 	bl	8000ac8 <__aeabi_dcmpeq>
 80083c6:	b108      	cbz	r0, 80083cc <__cvt+0xa4>
 80083c8:	f8cd 900c 	str.w	r9, [sp, #12]
 80083cc:	2230      	movs	r2, #48	; 0x30
 80083ce:	9b03      	ldr	r3, [sp, #12]
 80083d0:	454b      	cmp	r3, r9
 80083d2:	d307      	bcc.n	80083e4 <__cvt+0xbc>
 80083d4:	9b03      	ldr	r3, [sp, #12]
 80083d6:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80083d8:	1bdb      	subs	r3, r3, r7
 80083da:	4638      	mov	r0, r7
 80083dc:	6013      	str	r3, [r2, #0]
 80083de:	b004      	add	sp, #16
 80083e0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80083e4:	1c59      	adds	r1, r3, #1
 80083e6:	9103      	str	r1, [sp, #12]
 80083e8:	701a      	strb	r2, [r3, #0]
 80083ea:	e7f0      	b.n	80083ce <__cvt+0xa6>

080083ec <__exponent>:
 80083ec:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80083ee:	4603      	mov	r3, r0
 80083f0:	2900      	cmp	r1, #0
 80083f2:	bfb8      	it	lt
 80083f4:	4249      	neglt	r1, r1
 80083f6:	f803 2b02 	strb.w	r2, [r3], #2
 80083fa:	bfb4      	ite	lt
 80083fc:	222d      	movlt	r2, #45	; 0x2d
 80083fe:	222b      	movge	r2, #43	; 0x2b
 8008400:	2909      	cmp	r1, #9
 8008402:	7042      	strb	r2, [r0, #1]
 8008404:	dd2a      	ble.n	800845c <__exponent+0x70>
 8008406:	f10d 0407 	add.w	r4, sp, #7
 800840a:	46a4      	mov	ip, r4
 800840c:	270a      	movs	r7, #10
 800840e:	46a6      	mov	lr, r4
 8008410:	460a      	mov	r2, r1
 8008412:	fb91 f6f7 	sdiv	r6, r1, r7
 8008416:	fb07 1516 	mls	r5, r7, r6, r1
 800841a:	3530      	adds	r5, #48	; 0x30
 800841c:	2a63      	cmp	r2, #99	; 0x63
 800841e:	f104 34ff 	add.w	r4, r4, #4294967295
 8008422:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8008426:	4631      	mov	r1, r6
 8008428:	dcf1      	bgt.n	800840e <__exponent+0x22>
 800842a:	3130      	adds	r1, #48	; 0x30
 800842c:	f1ae 0502 	sub.w	r5, lr, #2
 8008430:	f804 1c01 	strb.w	r1, [r4, #-1]
 8008434:	1c44      	adds	r4, r0, #1
 8008436:	4629      	mov	r1, r5
 8008438:	4561      	cmp	r1, ip
 800843a:	d30a      	bcc.n	8008452 <__exponent+0x66>
 800843c:	f10d 0209 	add.w	r2, sp, #9
 8008440:	eba2 020e 	sub.w	r2, r2, lr
 8008444:	4565      	cmp	r5, ip
 8008446:	bf88      	it	hi
 8008448:	2200      	movhi	r2, #0
 800844a:	4413      	add	r3, r2
 800844c:	1a18      	subs	r0, r3, r0
 800844e:	b003      	add	sp, #12
 8008450:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008452:	f811 2b01 	ldrb.w	r2, [r1], #1
 8008456:	f804 2f01 	strb.w	r2, [r4, #1]!
 800845a:	e7ed      	b.n	8008438 <__exponent+0x4c>
 800845c:	2330      	movs	r3, #48	; 0x30
 800845e:	3130      	adds	r1, #48	; 0x30
 8008460:	7083      	strb	r3, [r0, #2]
 8008462:	70c1      	strb	r1, [r0, #3]
 8008464:	1d03      	adds	r3, r0, #4
 8008466:	e7f1      	b.n	800844c <__exponent+0x60>

08008468 <_printf_float>:
 8008468:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800846c:	ed2d 8b02 	vpush	{d8}
 8008470:	b08d      	sub	sp, #52	; 0x34
 8008472:	460c      	mov	r4, r1
 8008474:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8008478:	4616      	mov	r6, r2
 800847a:	461f      	mov	r7, r3
 800847c:	4605      	mov	r5, r0
 800847e:	f003 f82f 	bl	800b4e0 <_localeconv_r>
 8008482:	f8d0 a000 	ldr.w	sl, [r0]
 8008486:	4650      	mov	r0, sl
 8008488:	f7f7 fea2 	bl	80001d0 <strlen>
 800848c:	2300      	movs	r3, #0
 800848e:	930a      	str	r3, [sp, #40]	; 0x28
 8008490:	6823      	ldr	r3, [r4, #0]
 8008492:	9305      	str	r3, [sp, #20]
 8008494:	f8d8 3000 	ldr.w	r3, [r8]
 8008498:	f894 b018 	ldrb.w	fp, [r4, #24]
 800849c:	3307      	adds	r3, #7
 800849e:	f023 0307 	bic.w	r3, r3, #7
 80084a2:	f103 0208 	add.w	r2, r3, #8
 80084a6:	f8c8 2000 	str.w	r2, [r8]
 80084aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80084ae:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 80084b2:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 80084b6:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 80084ba:	9307      	str	r3, [sp, #28]
 80084bc:	f8cd 8018 	str.w	r8, [sp, #24]
 80084c0:	ee08 0a10 	vmov	s16, r0
 80084c4:	4b9f      	ldr	r3, [pc, #636]	; (8008744 <_printf_float+0x2dc>)
 80084c6:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80084ca:	f04f 32ff 	mov.w	r2, #4294967295
 80084ce:	f7f8 fb2d 	bl	8000b2c <__aeabi_dcmpun>
 80084d2:	bb88      	cbnz	r0, 8008538 <_printf_float+0xd0>
 80084d4:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80084d8:	4b9a      	ldr	r3, [pc, #616]	; (8008744 <_printf_float+0x2dc>)
 80084da:	f04f 32ff 	mov.w	r2, #4294967295
 80084de:	f7f8 fb07 	bl	8000af0 <__aeabi_dcmple>
 80084e2:	bb48      	cbnz	r0, 8008538 <_printf_float+0xd0>
 80084e4:	2200      	movs	r2, #0
 80084e6:	2300      	movs	r3, #0
 80084e8:	4640      	mov	r0, r8
 80084ea:	4649      	mov	r1, r9
 80084ec:	f7f8 faf6 	bl	8000adc <__aeabi_dcmplt>
 80084f0:	b110      	cbz	r0, 80084f8 <_printf_float+0x90>
 80084f2:	232d      	movs	r3, #45	; 0x2d
 80084f4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80084f8:	4b93      	ldr	r3, [pc, #588]	; (8008748 <_printf_float+0x2e0>)
 80084fa:	4894      	ldr	r0, [pc, #592]	; (800874c <_printf_float+0x2e4>)
 80084fc:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8008500:	bf94      	ite	ls
 8008502:	4698      	movls	r8, r3
 8008504:	4680      	movhi	r8, r0
 8008506:	2303      	movs	r3, #3
 8008508:	6123      	str	r3, [r4, #16]
 800850a:	9b05      	ldr	r3, [sp, #20]
 800850c:	f023 0204 	bic.w	r2, r3, #4
 8008510:	6022      	str	r2, [r4, #0]
 8008512:	f04f 0900 	mov.w	r9, #0
 8008516:	9700      	str	r7, [sp, #0]
 8008518:	4633      	mov	r3, r6
 800851a:	aa0b      	add	r2, sp, #44	; 0x2c
 800851c:	4621      	mov	r1, r4
 800851e:	4628      	mov	r0, r5
 8008520:	f000 f9d8 	bl	80088d4 <_printf_common>
 8008524:	3001      	adds	r0, #1
 8008526:	f040 8090 	bne.w	800864a <_printf_float+0x1e2>
 800852a:	f04f 30ff 	mov.w	r0, #4294967295
 800852e:	b00d      	add	sp, #52	; 0x34
 8008530:	ecbd 8b02 	vpop	{d8}
 8008534:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008538:	4642      	mov	r2, r8
 800853a:	464b      	mov	r3, r9
 800853c:	4640      	mov	r0, r8
 800853e:	4649      	mov	r1, r9
 8008540:	f7f8 faf4 	bl	8000b2c <__aeabi_dcmpun>
 8008544:	b140      	cbz	r0, 8008558 <_printf_float+0xf0>
 8008546:	464b      	mov	r3, r9
 8008548:	2b00      	cmp	r3, #0
 800854a:	bfbc      	itt	lt
 800854c:	232d      	movlt	r3, #45	; 0x2d
 800854e:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8008552:	487f      	ldr	r0, [pc, #508]	; (8008750 <_printf_float+0x2e8>)
 8008554:	4b7f      	ldr	r3, [pc, #508]	; (8008754 <_printf_float+0x2ec>)
 8008556:	e7d1      	b.n	80084fc <_printf_float+0x94>
 8008558:	6863      	ldr	r3, [r4, #4]
 800855a:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 800855e:	9206      	str	r2, [sp, #24]
 8008560:	1c5a      	adds	r2, r3, #1
 8008562:	d13f      	bne.n	80085e4 <_printf_float+0x17c>
 8008564:	2306      	movs	r3, #6
 8008566:	6063      	str	r3, [r4, #4]
 8008568:	9b05      	ldr	r3, [sp, #20]
 800856a:	6861      	ldr	r1, [r4, #4]
 800856c:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8008570:	2300      	movs	r3, #0
 8008572:	9303      	str	r3, [sp, #12]
 8008574:	ab0a      	add	r3, sp, #40	; 0x28
 8008576:	e9cd b301 	strd	fp, r3, [sp, #4]
 800857a:	ab09      	add	r3, sp, #36	; 0x24
 800857c:	ec49 8b10 	vmov	d0, r8, r9
 8008580:	9300      	str	r3, [sp, #0]
 8008582:	6022      	str	r2, [r4, #0]
 8008584:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8008588:	4628      	mov	r0, r5
 800858a:	f7ff fecd 	bl	8008328 <__cvt>
 800858e:	9b06      	ldr	r3, [sp, #24]
 8008590:	9909      	ldr	r1, [sp, #36]	; 0x24
 8008592:	2b47      	cmp	r3, #71	; 0x47
 8008594:	4680      	mov	r8, r0
 8008596:	d108      	bne.n	80085aa <_printf_float+0x142>
 8008598:	1cc8      	adds	r0, r1, #3
 800859a:	db02      	blt.n	80085a2 <_printf_float+0x13a>
 800859c:	6863      	ldr	r3, [r4, #4]
 800859e:	4299      	cmp	r1, r3
 80085a0:	dd41      	ble.n	8008626 <_printf_float+0x1be>
 80085a2:	f1ab 0b02 	sub.w	fp, fp, #2
 80085a6:	fa5f fb8b 	uxtb.w	fp, fp
 80085aa:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 80085ae:	d820      	bhi.n	80085f2 <_printf_float+0x18a>
 80085b0:	3901      	subs	r1, #1
 80085b2:	465a      	mov	r2, fp
 80085b4:	f104 0050 	add.w	r0, r4, #80	; 0x50
 80085b8:	9109      	str	r1, [sp, #36]	; 0x24
 80085ba:	f7ff ff17 	bl	80083ec <__exponent>
 80085be:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80085c0:	1813      	adds	r3, r2, r0
 80085c2:	2a01      	cmp	r2, #1
 80085c4:	4681      	mov	r9, r0
 80085c6:	6123      	str	r3, [r4, #16]
 80085c8:	dc02      	bgt.n	80085d0 <_printf_float+0x168>
 80085ca:	6822      	ldr	r2, [r4, #0]
 80085cc:	07d2      	lsls	r2, r2, #31
 80085ce:	d501      	bpl.n	80085d4 <_printf_float+0x16c>
 80085d0:	3301      	adds	r3, #1
 80085d2:	6123      	str	r3, [r4, #16]
 80085d4:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 80085d8:	2b00      	cmp	r3, #0
 80085da:	d09c      	beq.n	8008516 <_printf_float+0xae>
 80085dc:	232d      	movs	r3, #45	; 0x2d
 80085de:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80085e2:	e798      	b.n	8008516 <_printf_float+0xae>
 80085e4:	9a06      	ldr	r2, [sp, #24]
 80085e6:	2a47      	cmp	r2, #71	; 0x47
 80085e8:	d1be      	bne.n	8008568 <_printf_float+0x100>
 80085ea:	2b00      	cmp	r3, #0
 80085ec:	d1bc      	bne.n	8008568 <_printf_float+0x100>
 80085ee:	2301      	movs	r3, #1
 80085f0:	e7b9      	b.n	8008566 <_printf_float+0xfe>
 80085f2:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 80085f6:	d118      	bne.n	800862a <_printf_float+0x1c2>
 80085f8:	2900      	cmp	r1, #0
 80085fa:	6863      	ldr	r3, [r4, #4]
 80085fc:	dd0b      	ble.n	8008616 <_printf_float+0x1ae>
 80085fe:	6121      	str	r1, [r4, #16]
 8008600:	b913      	cbnz	r3, 8008608 <_printf_float+0x1a0>
 8008602:	6822      	ldr	r2, [r4, #0]
 8008604:	07d0      	lsls	r0, r2, #31
 8008606:	d502      	bpl.n	800860e <_printf_float+0x1a6>
 8008608:	3301      	adds	r3, #1
 800860a:	440b      	add	r3, r1
 800860c:	6123      	str	r3, [r4, #16]
 800860e:	65a1      	str	r1, [r4, #88]	; 0x58
 8008610:	f04f 0900 	mov.w	r9, #0
 8008614:	e7de      	b.n	80085d4 <_printf_float+0x16c>
 8008616:	b913      	cbnz	r3, 800861e <_printf_float+0x1b6>
 8008618:	6822      	ldr	r2, [r4, #0]
 800861a:	07d2      	lsls	r2, r2, #31
 800861c:	d501      	bpl.n	8008622 <_printf_float+0x1ba>
 800861e:	3302      	adds	r3, #2
 8008620:	e7f4      	b.n	800860c <_printf_float+0x1a4>
 8008622:	2301      	movs	r3, #1
 8008624:	e7f2      	b.n	800860c <_printf_float+0x1a4>
 8008626:	f04f 0b67 	mov.w	fp, #103	; 0x67
 800862a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800862c:	4299      	cmp	r1, r3
 800862e:	db05      	blt.n	800863c <_printf_float+0x1d4>
 8008630:	6823      	ldr	r3, [r4, #0]
 8008632:	6121      	str	r1, [r4, #16]
 8008634:	07d8      	lsls	r0, r3, #31
 8008636:	d5ea      	bpl.n	800860e <_printf_float+0x1a6>
 8008638:	1c4b      	adds	r3, r1, #1
 800863a:	e7e7      	b.n	800860c <_printf_float+0x1a4>
 800863c:	2900      	cmp	r1, #0
 800863e:	bfd4      	ite	le
 8008640:	f1c1 0202 	rsble	r2, r1, #2
 8008644:	2201      	movgt	r2, #1
 8008646:	4413      	add	r3, r2
 8008648:	e7e0      	b.n	800860c <_printf_float+0x1a4>
 800864a:	6823      	ldr	r3, [r4, #0]
 800864c:	055a      	lsls	r2, r3, #21
 800864e:	d407      	bmi.n	8008660 <_printf_float+0x1f8>
 8008650:	6923      	ldr	r3, [r4, #16]
 8008652:	4642      	mov	r2, r8
 8008654:	4631      	mov	r1, r6
 8008656:	4628      	mov	r0, r5
 8008658:	47b8      	blx	r7
 800865a:	3001      	adds	r0, #1
 800865c:	d12c      	bne.n	80086b8 <_printf_float+0x250>
 800865e:	e764      	b.n	800852a <_printf_float+0xc2>
 8008660:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8008664:	f240 80e0 	bls.w	8008828 <_printf_float+0x3c0>
 8008668:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800866c:	2200      	movs	r2, #0
 800866e:	2300      	movs	r3, #0
 8008670:	f7f8 fa2a 	bl	8000ac8 <__aeabi_dcmpeq>
 8008674:	2800      	cmp	r0, #0
 8008676:	d034      	beq.n	80086e2 <_printf_float+0x27a>
 8008678:	4a37      	ldr	r2, [pc, #220]	; (8008758 <_printf_float+0x2f0>)
 800867a:	2301      	movs	r3, #1
 800867c:	4631      	mov	r1, r6
 800867e:	4628      	mov	r0, r5
 8008680:	47b8      	blx	r7
 8008682:	3001      	adds	r0, #1
 8008684:	f43f af51 	beq.w	800852a <_printf_float+0xc2>
 8008688:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800868c:	429a      	cmp	r2, r3
 800868e:	db02      	blt.n	8008696 <_printf_float+0x22e>
 8008690:	6823      	ldr	r3, [r4, #0]
 8008692:	07d8      	lsls	r0, r3, #31
 8008694:	d510      	bpl.n	80086b8 <_printf_float+0x250>
 8008696:	ee18 3a10 	vmov	r3, s16
 800869a:	4652      	mov	r2, sl
 800869c:	4631      	mov	r1, r6
 800869e:	4628      	mov	r0, r5
 80086a0:	47b8      	blx	r7
 80086a2:	3001      	adds	r0, #1
 80086a4:	f43f af41 	beq.w	800852a <_printf_float+0xc2>
 80086a8:	f04f 0800 	mov.w	r8, #0
 80086ac:	f104 091a 	add.w	r9, r4, #26
 80086b0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80086b2:	3b01      	subs	r3, #1
 80086b4:	4543      	cmp	r3, r8
 80086b6:	dc09      	bgt.n	80086cc <_printf_float+0x264>
 80086b8:	6823      	ldr	r3, [r4, #0]
 80086ba:	079b      	lsls	r3, r3, #30
 80086bc:	f100 8105 	bmi.w	80088ca <_printf_float+0x462>
 80086c0:	68e0      	ldr	r0, [r4, #12]
 80086c2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80086c4:	4298      	cmp	r0, r3
 80086c6:	bfb8      	it	lt
 80086c8:	4618      	movlt	r0, r3
 80086ca:	e730      	b.n	800852e <_printf_float+0xc6>
 80086cc:	2301      	movs	r3, #1
 80086ce:	464a      	mov	r2, r9
 80086d0:	4631      	mov	r1, r6
 80086d2:	4628      	mov	r0, r5
 80086d4:	47b8      	blx	r7
 80086d6:	3001      	adds	r0, #1
 80086d8:	f43f af27 	beq.w	800852a <_printf_float+0xc2>
 80086dc:	f108 0801 	add.w	r8, r8, #1
 80086e0:	e7e6      	b.n	80086b0 <_printf_float+0x248>
 80086e2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80086e4:	2b00      	cmp	r3, #0
 80086e6:	dc39      	bgt.n	800875c <_printf_float+0x2f4>
 80086e8:	4a1b      	ldr	r2, [pc, #108]	; (8008758 <_printf_float+0x2f0>)
 80086ea:	2301      	movs	r3, #1
 80086ec:	4631      	mov	r1, r6
 80086ee:	4628      	mov	r0, r5
 80086f0:	47b8      	blx	r7
 80086f2:	3001      	adds	r0, #1
 80086f4:	f43f af19 	beq.w	800852a <_printf_float+0xc2>
 80086f8:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80086fc:	4313      	orrs	r3, r2
 80086fe:	d102      	bne.n	8008706 <_printf_float+0x29e>
 8008700:	6823      	ldr	r3, [r4, #0]
 8008702:	07d9      	lsls	r1, r3, #31
 8008704:	d5d8      	bpl.n	80086b8 <_printf_float+0x250>
 8008706:	ee18 3a10 	vmov	r3, s16
 800870a:	4652      	mov	r2, sl
 800870c:	4631      	mov	r1, r6
 800870e:	4628      	mov	r0, r5
 8008710:	47b8      	blx	r7
 8008712:	3001      	adds	r0, #1
 8008714:	f43f af09 	beq.w	800852a <_printf_float+0xc2>
 8008718:	f04f 0900 	mov.w	r9, #0
 800871c:	f104 0a1a 	add.w	sl, r4, #26
 8008720:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008722:	425b      	negs	r3, r3
 8008724:	454b      	cmp	r3, r9
 8008726:	dc01      	bgt.n	800872c <_printf_float+0x2c4>
 8008728:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800872a:	e792      	b.n	8008652 <_printf_float+0x1ea>
 800872c:	2301      	movs	r3, #1
 800872e:	4652      	mov	r2, sl
 8008730:	4631      	mov	r1, r6
 8008732:	4628      	mov	r0, r5
 8008734:	47b8      	blx	r7
 8008736:	3001      	adds	r0, #1
 8008738:	f43f aef7 	beq.w	800852a <_printf_float+0xc2>
 800873c:	f109 0901 	add.w	r9, r9, #1
 8008740:	e7ee      	b.n	8008720 <_printf_float+0x2b8>
 8008742:	bf00      	nop
 8008744:	7fefffff 	.word	0x7fefffff
 8008748:	0800cb40 	.word	0x0800cb40
 800874c:	0800cb44 	.word	0x0800cb44
 8008750:	0800cb4c 	.word	0x0800cb4c
 8008754:	0800cb48 	.word	0x0800cb48
 8008758:	0800cb50 	.word	0x0800cb50
 800875c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800875e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8008760:	429a      	cmp	r2, r3
 8008762:	bfa8      	it	ge
 8008764:	461a      	movge	r2, r3
 8008766:	2a00      	cmp	r2, #0
 8008768:	4691      	mov	r9, r2
 800876a:	dc37      	bgt.n	80087dc <_printf_float+0x374>
 800876c:	f04f 0b00 	mov.w	fp, #0
 8008770:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8008774:	f104 021a 	add.w	r2, r4, #26
 8008778:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800877a:	9305      	str	r3, [sp, #20]
 800877c:	eba3 0309 	sub.w	r3, r3, r9
 8008780:	455b      	cmp	r3, fp
 8008782:	dc33      	bgt.n	80087ec <_printf_float+0x384>
 8008784:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8008788:	429a      	cmp	r2, r3
 800878a:	db3b      	blt.n	8008804 <_printf_float+0x39c>
 800878c:	6823      	ldr	r3, [r4, #0]
 800878e:	07da      	lsls	r2, r3, #31
 8008790:	d438      	bmi.n	8008804 <_printf_float+0x39c>
 8008792:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008794:	9a05      	ldr	r2, [sp, #20]
 8008796:	9909      	ldr	r1, [sp, #36]	; 0x24
 8008798:	1a9a      	subs	r2, r3, r2
 800879a:	eba3 0901 	sub.w	r9, r3, r1
 800879e:	4591      	cmp	r9, r2
 80087a0:	bfa8      	it	ge
 80087a2:	4691      	movge	r9, r2
 80087a4:	f1b9 0f00 	cmp.w	r9, #0
 80087a8:	dc35      	bgt.n	8008816 <_printf_float+0x3ae>
 80087aa:	f04f 0800 	mov.w	r8, #0
 80087ae:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80087b2:	f104 0a1a 	add.w	sl, r4, #26
 80087b6:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80087ba:	1a9b      	subs	r3, r3, r2
 80087bc:	eba3 0309 	sub.w	r3, r3, r9
 80087c0:	4543      	cmp	r3, r8
 80087c2:	f77f af79 	ble.w	80086b8 <_printf_float+0x250>
 80087c6:	2301      	movs	r3, #1
 80087c8:	4652      	mov	r2, sl
 80087ca:	4631      	mov	r1, r6
 80087cc:	4628      	mov	r0, r5
 80087ce:	47b8      	blx	r7
 80087d0:	3001      	adds	r0, #1
 80087d2:	f43f aeaa 	beq.w	800852a <_printf_float+0xc2>
 80087d6:	f108 0801 	add.w	r8, r8, #1
 80087da:	e7ec      	b.n	80087b6 <_printf_float+0x34e>
 80087dc:	4613      	mov	r3, r2
 80087de:	4631      	mov	r1, r6
 80087e0:	4642      	mov	r2, r8
 80087e2:	4628      	mov	r0, r5
 80087e4:	47b8      	blx	r7
 80087e6:	3001      	adds	r0, #1
 80087e8:	d1c0      	bne.n	800876c <_printf_float+0x304>
 80087ea:	e69e      	b.n	800852a <_printf_float+0xc2>
 80087ec:	2301      	movs	r3, #1
 80087ee:	4631      	mov	r1, r6
 80087f0:	4628      	mov	r0, r5
 80087f2:	9205      	str	r2, [sp, #20]
 80087f4:	47b8      	blx	r7
 80087f6:	3001      	adds	r0, #1
 80087f8:	f43f ae97 	beq.w	800852a <_printf_float+0xc2>
 80087fc:	9a05      	ldr	r2, [sp, #20]
 80087fe:	f10b 0b01 	add.w	fp, fp, #1
 8008802:	e7b9      	b.n	8008778 <_printf_float+0x310>
 8008804:	ee18 3a10 	vmov	r3, s16
 8008808:	4652      	mov	r2, sl
 800880a:	4631      	mov	r1, r6
 800880c:	4628      	mov	r0, r5
 800880e:	47b8      	blx	r7
 8008810:	3001      	adds	r0, #1
 8008812:	d1be      	bne.n	8008792 <_printf_float+0x32a>
 8008814:	e689      	b.n	800852a <_printf_float+0xc2>
 8008816:	9a05      	ldr	r2, [sp, #20]
 8008818:	464b      	mov	r3, r9
 800881a:	4442      	add	r2, r8
 800881c:	4631      	mov	r1, r6
 800881e:	4628      	mov	r0, r5
 8008820:	47b8      	blx	r7
 8008822:	3001      	adds	r0, #1
 8008824:	d1c1      	bne.n	80087aa <_printf_float+0x342>
 8008826:	e680      	b.n	800852a <_printf_float+0xc2>
 8008828:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800882a:	2a01      	cmp	r2, #1
 800882c:	dc01      	bgt.n	8008832 <_printf_float+0x3ca>
 800882e:	07db      	lsls	r3, r3, #31
 8008830:	d538      	bpl.n	80088a4 <_printf_float+0x43c>
 8008832:	2301      	movs	r3, #1
 8008834:	4642      	mov	r2, r8
 8008836:	4631      	mov	r1, r6
 8008838:	4628      	mov	r0, r5
 800883a:	47b8      	blx	r7
 800883c:	3001      	adds	r0, #1
 800883e:	f43f ae74 	beq.w	800852a <_printf_float+0xc2>
 8008842:	ee18 3a10 	vmov	r3, s16
 8008846:	4652      	mov	r2, sl
 8008848:	4631      	mov	r1, r6
 800884a:	4628      	mov	r0, r5
 800884c:	47b8      	blx	r7
 800884e:	3001      	adds	r0, #1
 8008850:	f43f ae6b 	beq.w	800852a <_printf_float+0xc2>
 8008854:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8008858:	2200      	movs	r2, #0
 800885a:	2300      	movs	r3, #0
 800885c:	f7f8 f934 	bl	8000ac8 <__aeabi_dcmpeq>
 8008860:	b9d8      	cbnz	r0, 800889a <_printf_float+0x432>
 8008862:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008864:	f108 0201 	add.w	r2, r8, #1
 8008868:	3b01      	subs	r3, #1
 800886a:	4631      	mov	r1, r6
 800886c:	4628      	mov	r0, r5
 800886e:	47b8      	blx	r7
 8008870:	3001      	adds	r0, #1
 8008872:	d10e      	bne.n	8008892 <_printf_float+0x42a>
 8008874:	e659      	b.n	800852a <_printf_float+0xc2>
 8008876:	2301      	movs	r3, #1
 8008878:	4652      	mov	r2, sl
 800887a:	4631      	mov	r1, r6
 800887c:	4628      	mov	r0, r5
 800887e:	47b8      	blx	r7
 8008880:	3001      	adds	r0, #1
 8008882:	f43f ae52 	beq.w	800852a <_printf_float+0xc2>
 8008886:	f108 0801 	add.w	r8, r8, #1
 800888a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800888c:	3b01      	subs	r3, #1
 800888e:	4543      	cmp	r3, r8
 8008890:	dcf1      	bgt.n	8008876 <_printf_float+0x40e>
 8008892:	464b      	mov	r3, r9
 8008894:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8008898:	e6dc      	b.n	8008654 <_printf_float+0x1ec>
 800889a:	f04f 0800 	mov.w	r8, #0
 800889e:	f104 0a1a 	add.w	sl, r4, #26
 80088a2:	e7f2      	b.n	800888a <_printf_float+0x422>
 80088a4:	2301      	movs	r3, #1
 80088a6:	4642      	mov	r2, r8
 80088a8:	e7df      	b.n	800886a <_printf_float+0x402>
 80088aa:	2301      	movs	r3, #1
 80088ac:	464a      	mov	r2, r9
 80088ae:	4631      	mov	r1, r6
 80088b0:	4628      	mov	r0, r5
 80088b2:	47b8      	blx	r7
 80088b4:	3001      	adds	r0, #1
 80088b6:	f43f ae38 	beq.w	800852a <_printf_float+0xc2>
 80088ba:	f108 0801 	add.w	r8, r8, #1
 80088be:	68e3      	ldr	r3, [r4, #12]
 80088c0:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80088c2:	1a5b      	subs	r3, r3, r1
 80088c4:	4543      	cmp	r3, r8
 80088c6:	dcf0      	bgt.n	80088aa <_printf_float+0x442>
 80088c8:	e6fa      	b.n	80086c0 <_printf_float+0x258>
 80088ca:	f04f 0800 	mov.w	r8, #0
 80088ce:	f104 0919 	add.w	r9, r4, #25
 80088d2:	e7f4      	b.n	80088be <_printf_float+0x456>

080088d4 <_printf_common>:
 80088d4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80088d8:	4616      	mov	r6, r2
 80088da:	4699      	mov	r9, r3
 80088dc:	688a      	ldr	r2, [r1, #8]
 80088de:	690b      	ldr	r3, [r1, #16]
 80088e0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80088e4:	4293      	cmp	r3, r2
 80088e6:	bfb8      	it	lt
 80088e8:	4613      	movlt	r3, r2
 80088ea:	6033      	str	r3, [r6, #0]
 80088ec:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80088f0:	4607      	mov	r7, r0
 80088f2:	460c      	mov	r4, r1
 80088f4:	b10a      	cbz	r2, 80088fa <_printf_common+0x26>
 80088f6:	3301      	adds	r3, #1
 80088f8:	6033      	str	r3, [r6, #0]
 80088fa:	6823      	ldr	r3, [r4, #0]
 80088fc:	0699      	lsls	r1, r3, #26
 80088fe:	bf42      	ittt	mi
 8008900:	6833      	ldrmi	r3, [r6, #0]
 8008902:	3302      	addmi	r3, #2
 8008904:	6033      	strmi	r3, [r6, #0]
 8008906:	6825      	ldr	r5, [r4, #0]
 8008908:	f015 0506 	ands.w	r5, r5, #6
 800890c:	d106      	bne.n	800891c <_printf_common+0x48>
 800890e:	f104 0a19 	add.w	sl, r4, #25
 8008912:	68e3      	ldr	r3, [r4, #12]
 8008914:	6832      	ldr	r2, [r6, #0]
 8008916:	1a9b      	subs	r3, r3, r2
 8008918:	42ab      	cmp	r3, r5
 800891a:	dc26      	bgt.n	800896a <_printf_common+0x96>
 800891c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8008920:	1e13      	subs	r3, r2, #0
 8008922:	6822      	ldr	r2, [r4, #0]
 8008924:	bf18      	it	ne
 8008926:	2301      	movne	r3, #1
 8008928:	0692      	lsls	r2, r2, #26
 800892a:	d42b      	bmi.n	8008984 <_printf_common+0xb0>
 800892c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8008930:	4649      	mov	r1, r9
 8008932:	4638      	mov	r0, r7
 8008934:	47c0      	blx	r8
 8008936:	3001      	adds	r0, #1
 8008938:	d01e      	beq.n	8008978 <_printf_common+0xa4>
 800893a:	6823      	ldr	r3, [r4, #0]
 800893c:	68e5      	ldr	r5, [r4, #12]
 800893e:	6832      	ldr	r2, [r6, #0]
 8008940:	f003 0306 	and.w	r3, r3, #6
 8008944:	2b04      	cmp	r3, #4
 8008946:	bf08      	it	eq
 8008948:	1aad      	subeq	r5, r5, r2
 800894a:	68a3      	ldr	r3, [r4, #8]
 800894c:	6922      	ldr	r2, [r4, #16]
 800894e:	bf0c      	ite	eq
 8008950:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8008954:	2500      	movne	r5, #0
 8008956:	4293      	cmp	r3, r2
 8008958:	bfc4      	itt	gt
 800895a:	1a9b      	subgt	r3, r3, r2
 800895c:	18ed      	addgt	r5, r5, r3
 800895e:	2600      	movs	r6, #0
 8008960:	341a      	adds	r4, #26
 8008962:	42b5      	cmp	r5, r6
 8008964:	d11a      	bne.n	800899c <_printf_common+0xc8>
 8008966:	2000      	movs	r0, #0
 8008968:	e008      	b.n	800897c <_printf_common+0xa8>
 800896a:	2301      	movs	r3, #1
 800896c:	4652      	mov	r2, sl
 800896e:	4649      	mov	r1, r9
 8008970:	4638      	mov	r0, r7
 8008972:	47c0      	blx	r8
 8008974:	3001      	adds	r0, #1
 8008976:	d103      	bne.n	8008980 <_printf_common+0xac>
 8008978:	f04f 30ff 	mov.w	r0, #4294967295
 800897c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008980:	3501      	adds	r5, #1
 8008982:	e7c6      	b.n	8008912 <_printf_common+0x3e>
 8008984:	18e1      	adds	r1, r4, r3
 8008986:	1c5a      	adds	r2, r3, #1
 8008988:	2030      	movs	r0, #48	; 0x30
 800898a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800898e:	4422      	add	r2, r4
 8008990:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8008994:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8008998:	3302      	adds	r3, #2
 800899a:	e7c7      	b.n	800892c <_printf_common+0x58>
 800899c:	2301      	movs	r3, #1
 800899e:	4622      	mov	r2, r4
 80089a0:	4649      	mov	r1, r9
 80089a2:	4638      	mov	r0, r7
 80089a4:	47c0      	blx	r8
 80089a6:	3001      	adds	r0, #1
 80089a8:	d0e6      	beq.n	8008978 <_printf_common+0xa4>
 80089aa:	3601      	adds	r6, #1
 80089ac:	e7d9      	b.n	8008962 <_printf_common+0x8e>
	...

080089b0 <_printf_i>:
 80089b0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80089b4:	7e0f      	ldrb	r7, [r1, #24]
 80089b6:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80089b8:	2f78      	cmp	r7, #120	; 0x78
 80089ba:	4691      	mov	r9, r2
 80089bc:	4680      	mov	r8, r0
 80089be:	460c      	mov	r4, r1
 80089c0:	469a      	mov	sl, r3
 80089c2:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80089c6:	d807      	bhi.n	80089d8 <_printf_i+0x28>
 80089c8:	2f62      	cmp	r7, #98	; 0x62
 80089ca:	d80a      	bhi.n	80089e2 <_printf_i+0x32>
 80089cc:	2f00      	cmp	r7, #0
 80089ce:	f000 80d8 	beq.w	8008b82 <_printf_i+0x1d2>
 80089d2:	2f58      	cmp	r7, #88	; 0x58
 80089d4:	f000 80a3 	beq.w	8008b1e <_printf_i+0x16e>
 80089d8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80089dc:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80089e0:	e03a      	b.n	8008a58 <_printf_i+0xa8>
 80089e2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80089e6:	2b15      	cmp	r3, #21
 80089e8:	d8f6      	bhi.n	80089d8 <_printf_i+0x28>
 80089ea:	a101      	add	r1, pc, #4	; (adr r1, 80089f0 <_printf_i+0x40>)
 80089ec:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80089f0:	08008a49 	.word	0x08008a49
 80089f4:	08008a5d 	.word	0x08008a5d
 80089f8:	080089d9 	.word	0x080089d9
 80089fc:	080089d9 	.word	0x080089d9
 8008a00:	080089d9 	.word	0x080089d9
 8008a04:	080089d9 	.word	0x080089d9
 8008a08:	08008a5d 	.word	0x08008a5d
 8008a0c:	080089d9 	.word	0x080089d9
 8008a10:	080089d9 	.word	0x080089d9
 8008a14:	080089d9 	.word	0x080089d9
 8008a18:	080089d9 	.word	0x080089d9
 8008a1c:	08008b69 	.word	0x08008b69
 8008a20:	08008a8d 	.word	0x08008a8d
 8008a24:	08008b4b 	.word	0x08008b4b
 8008a28:	080089d9 	.word	0x080089d9
 8008a2c:	080089d9 	.word	0x080089d9
 8008a30:	08008b8b 	.word	0x08008b8b
 8008a34:	080089d9 	.word	0x080089d9
 8008a38:	08008a8d 	.word	0x08008a8d
 8008a3c:	080089d9 	.word	0x080089d9
 8008a40:	080089d9 	.word	0x080089d9
 8008a44:	08008b53 	.word	0x08008b53
 8008a48:	682b      	ldr	r3, [r5, #0]
 8008a4a:	1d1a      	adds	r2, r3, #4
 8008a4c:	681b      	ldr	r3, [r3, #0]
 8008a4e:	602a      	str	r2, [r5, #0]
 8008a50:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008a54:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8008a58:	2301      	movs	r3, #1
 8008a5a:	e0a3      	b.n	8008ba4 <_printf_i+0x1f4>
 8008a5c:	6820      	ldr	r0, [r4, #0]
 8008a5e:	6829      	ldr	r1, [r5, #0]
 8008a60:	0606      	lsls	r6, r0, #24
 8008a62:	f101 0304 	add.w	r3, r1, #4
 8008a66:	d50a      	bpl.n	8008a7e <_printf_i+0xce>
 8008a68:	680e      	ldr	r6, [r1, #0]
 8008a6a:	602b      	str	r3, [r5, #0]
 8008a6c:	2e00      	cmp	r6, #0
 8008a6e:	da03      	bge.n	8008a78 <_printf_i+0xc8>
 8008a70:	232d      	movs	r3, #45	; 0x2d
 8008a72:	4276      	negs	r6, r6
 8008a74:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008a78:	485e      	ldr	r0, [pc, #376]	; (8008bf4 <_printf_i+0x244>)
 8008a7a:	230a      	movs	r3, #10
 8008a7c:	e019      	b.n	8008ab2 <_printf_i+0x102>
 8008a7e:	680e      	ldr	r6, [r1, #0]
 8008a80:	602b      	str	r3, [r5, #0]
 8008a82:	f010 0f40 	tst.w	r0, #64	; 0x40
 8008a86:	bf18      	it	ne
 8008a88:	b236      	sxthne	r6, r6
 8008a8a:	e7ef      	b.n	8008a6c <_printf_i+0xbc>
 8008a8c:	682b      	ldr	r3, [r5, #0]
 8008a8e:	6820      	ldr	r0, [r4, #0]
 8008a90:	1d19      	adds	r1, r3, #4
 8008a92:	6029      	str	r1, [r5, #0]
 8008a94:	0601      	lsls	r1, r0, #24
 8008a96:	d501      	bpl.n	8008a9c <_printf_i+0xec>
 8008a98:	681e      	ldr	r6, [r3, #0]
 8008a9a:	e002      	b.n	8008aa2 <_printf_i+0xf2>
 8008a9c:	0646      	lsls	r6, r0, #25
 8008a9e:	d5fb      	bpl.n	8008a98 <_printf_i+0xe8>
 8008aa0:	881e      	ldrh	r6, [r3, #0]
 8008aa2:	4854      	ldr	r0, [pc, #336]	; (8008bf4 <_printf_i+0x244>)
 8008aa4:	2f6f      	cmp	r7, #111	; 0x6f
 8008aa6:	bf0c      	ite	eq
 8008aa8:	2308      	moveq	r3, #8
 8008aaa:	230a      	movne	r3, #10
 8008aac:	2100      	movs	r1, #0
 8008aae:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8008ab2:	6865      	ldr	r5, [r4, #4]
 8008ab4:	60a5      	str	r5, [r4, #8]
 8008ab6:	2d00      	cmp	r5, #0
 8008ab8:	bfa2      	ittt	ge
 8008aba:	6821      	ldrge	r1, [r4, #0]
 8008abc:	f021 0104 	bicge.w	r1, r1, #4
 8008ac0:	6021      	strge	r1, [r4, #0]
 8008ac2:	b90e      	cbnz	r6, 8008ac8 <_printf_i+0x118>
 8008ac4:	2d00      	cmp	r5, #0
 8008ac6:	d04d      	beq.n	8008b64 <_printf_i+0x1b4>
 8008ac8:	4615      	mov	r5, r2
 8008aca:	fbb6 f1f3 	udiv	r1, r6, r3
 8008ace:	fb03 6711 	mls	r7, r3, r1, r6
 8008ad2:	5dc7      	ldrb	r7, [r0, r7]
 8008ad4:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8008ad8:	4637      	mov	r7, r6
 8008ada:	42bb      	cmp	r3, r7
 8008adc:	460e      	mov	r6, r1
 8008ade:	d9f4      	bls.n	8008aca <_printf_i+0x11a>
 8008ae0:	2b08      	cmp	r3, #8
 8008ae2:	d10b      	bne.n	8008afc <_printf_i+0x14c>
 8008ae4:	6823      	ldr	r3, [r4, #0]
 8008ae6:	07de      	lsls	r6, r3, #31
 8008ae8:	d508      	bpl.n	8008afc <_printf_i+0x14c>
 8008aea:	6923      	ldr	r3, [r4, #16]
 8008aec:	6861      	ldr	r1, [r4, #4]
 8008aee:	4299      	cmp	r1, r3
 8008af0:	bfde      	ittt	le
 8008af2:	2330      	movle	r3, #48	; 0x30
 8008af4:	f805 3c01 	strble.w	r3, [r5, #-1]
 8008af8:	f105 35ff 	addle.w	r5, r5, #4294967295
 8008afc:	1b52      	subs	r2, r2, r5
 8008afe:	6122      	str	r2, [r4, #16]
 8008b00:	f8cd a000 	str.w	sl, [sp]
 8008b04:	464b      	mov	r3, r9
 8008b06:	aa03      	add	r2, sp, #12
 8008b08:	4621      	mov	r1, r4
 8008b0a:	4640      	mov	r0, r8
 8008b0c:	f7ff fee2 	bl	80088d4 <_printf_common>
 8008b10:	3001      	adds	r0, #1
 8008b12:	d14c      	bne.n	8008bae <_printf_i+0x1fe>
 8008b14:	f04f 30ff 	mov.w	r0, #4294967295
 8008b18:	b004      	add	sp, #16
 8008b1a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008b1e:	4835      	ldr	r0, [pc, #212]	; (8008bf4 <_printf_i+0x244>)
 8008b20:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8008b24:	6829      	ldr	r1, [r5, #0]
 8008b26:	6823      	ldr	r3, [r4, #0]
 8008b28:	f851 6b04 	ldr.w	r6, [r1], #4
 8008b2c:	6029      	str	r1, [r5, #0]
 8008b2e:	061d      	lsls	r5, r3, #24
 8008b30:	d514      	bpl.n	8008b5c <_printf_i+0x1ac>
 8008b32:	07df      	lsls	r7, r3, #31
 8008b34:	bf44      	itt	mi
 8008b36:	f043 0320 	orrmi.w	r3, r3, #32
 8008b3a:	6023      	strmi	r3, [r4, #0]
 8008b3c:	b91e      	cbnz	r6, 8008b46 <_printf_i+0x196>
 8008b3e:	6823      	ldr	r3, [r4, #0]
 8008b40:	f023 0320 	bic.w	r3, r3, #32
 8008b44:	6023      	str	r3, [r4, #0]
 8008b46:	2310      	movs	r3, #16
 8008b48:	e7b0      	b.n	8008aac <_printf_i+0xfc>
 8008b4a:	6823      	ldr	r3, [r4, #0]
 8008b4c:	f043 0320 	orr.w	r3, r3, #32
 8008b50:	6023      	str	r3, [r4, #0]
 8008b52:	2378      	movs	r3, #120	; 0x78
 8008b54:	4828      	ldr	r0, [pc, #160]	; (8008bf8 <_printf_i+0x248>)
 8008b56:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8008b5a:	e7e3      	b.n	8008b24 <_printf_i+0x174>
 8008b5c:	0659      	lsls	r1, r3, #25
 8008b5e:	bf48      	it	mi
 8008b60:	b2b6      	uxthmi	r6, r6
 8008b62:	e7e6      	b.n	8008b32 <_printf_i+0x182>
 8008b64:	4615      	mov	r5, r2
 8008b66:	e7bb      	b.n	8008ae0 <_printf_i+0x130>
 8008b68:	682b      	ldr	r3, [r5, #0]
 8008b6a:	6826      	ldr	r6, [r4, #0]
 8008b6c:	6961      	ldr	r1, [r4, #20]
 8008b6e:	1d18      	adds	r0, r3, #4
 8008b70:	6028      	str	r0, [r5, #0]
 8008b72:	0635      	lsls	r5, r6, #24
 8008b74:	681b      	ldr	r3, [r3, #0]
 8008b76:	d501      	bpl.n	8008b7c <_printf_i+0x1cc>
 8008b78:	6019      	str	r1, [r3, #0]
 8008b7a:	e002      	b.n	8008b82 <_printf_i+0x1d2>
 8008b7c:	0670      	lsls	r0, r6, #25
 8008b7e:	d5fb      	bpl.n	8008b78 <_printf_i+0x1c8>
 8008b80:	8019      	strh	r1, [r3, #0]
 8008b82:	2300      	movs	r3, #0
 8008b84:	6123      	str	r3, [r4, #16]
 8008b86:	4615      	mov	r5, r2
 8008b88:	e7ba      	b.n	8008b00 <_printf_i+0x150>
 8008b8a:	682b      	ldr	r3, [r5, #0]
 8008b8c:	1d1a      	adds	r2, r3, #4
 8008b8e:	602a      	str	r2, [r5, #0]
 8008b90:	681d      	ldr	r5, [r3, #0]
 8008b92:	6862      	ldr	r2, [r4, #4]
 8008b94:	2100      	movs	r1, #0
 8008b96:	4628      	mov	r0, r5
 8008b98:	f7f7 fb22 	bl	80001e0 <memchr>
 8008b9c:	b108      	cbz	r0, 8008ba2 <_printf_i+0x1f2>
 8008b9e:	1b40      	subs	r0, r0, r5
 8008ba0:	6060      	str	r0, [r4, #4]
 8008ba2:	6863      	ldr	r3, [r4, #4]
 8008ba4:	6123      	str	r3, [r4, #16]
 8008ba6:	2300      	movs	r3, #0
 8008ba8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008bac:	e7a8      	b.n	8008b00 <_printf_i+0x150>
 8008bae:	6923      	ldr	r3, [r4, #16]
 8008bb0:	462a      	mov	r2, r5
 8008bb2:	4649      	mov	r1, r9
 8008bb4:	4640      	mov	r0, r8
 8008bb6:	47d0      	blx	sl
 8008bb8:	3001      	adds	r0, #1
 8008bba:	d0ab      	beq.n	8008b14 <_printf_i+0x164>
 8008bbc:	6823      	ldr	r3, [r4, #0]
 8008bbe:	079b      	lsls	r3, r3, #30
 8008bc0:	d413      	bmi.n	8008bea <_printf_i+0x23a>
 8008bc2:	68e0      	ldr	r0, [r4, #12]
 8008bc4:	9b03      	ldr	r3, [sp, #12]
 8008bc6:	4298      	cmp	r0, r3
 8008bc8:	bfb8      	it	lt
 8008bca:	4618      	movlt	r0, r3
 8008bcc:	e7a4      	b.n	8008b18 <_printf_i+0x168>
 8008bce:	2301      	movs	r3, #1
 8008bd0:	4632      	mov	r2, r6
 8008bd2:	4649      	mov	r1, r9
 8008bd4:	4640      	mov	r0, r8
 8008bd6:	47d0      	blx	sl
 8008bd8:	3001      	adds	r0, #1
 8008bda:	d09b      	beq.n	8008b14 <_printf_i+0x164>
 8008bdc:	3501      	adds	r5, #1
 8008bde:	68e3      	ldr	r3, [r4, #12]
 8008be0:	9903      	ldr	r1, [sp, #12]
 8008be2:	1a5b      	subs	r3, r3, r1
 8008be4:	42ab      	cmp	r3, r5
 8008be6:	dcf2      	bgt.n	8008bce <_printf_i+0x21e>
 8008be8:	e7eb      	b.n	8008bc2 <_printf_i+0x212>
 8008bea:	2500      	movs	r5, #0
 8008bec:	f104 0619 	add.w	r6, r4, #25
 8008bf0:	e7f5      	b.n	8008bde <_printf_i+0x22e>
 8008bf2:	bf00      	nop
 8008bf4:	0800cb52 	.word	0x0800cb52
 8008bf8:	0800cb63 	.word	0x0800cb63

08008bfc <_scanf_float>:
 8008bfc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008c00:	b087      	sub	sp, #28
 8008c02:	4617      	mov	r7, r2
 8008c04:	9303      	str	r3, [sp, #12]
 8008c06:	688b      	ldr	r3, [r1, #8]
 8008c08:	1e5a      	subs	r2, r3, #1
 8008c0a:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 8008c0e:	bf83      	ittte	hi
 8008c10:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 8008c14:	195b      	addhi	r3, r3, r5
 8008c16:	9302      	strhi	r3, [sp, #8]
 8008c18:	2300      	movls	r3, #0
 8008c1a:	bf86      	itte	hi
 8008c1c:	f240 135d 	movwhi	r3, #349	; 0x15d
 8008c20:	608b      	strhi	r3, [r1, #8]
 8008c22:	9302      	strls	r3, [sp, #8]
 8008c24:	680b      	ldr	r3, [r1, #0]
 8008c26:	468b      	mov	fp, r1
 8008c28:	2500      	movs	r5, #0
 8008c2a:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 8008c2e:	f84b 3b1c 	str.w	r3, [fp], #28
 8008c32:	e9cd 5504 	strd	r5, r5, [sp, #16]
 8008c36:	4680      	mov	r8, r0
 8008c38:	460c      	mov	r4, r1
 8008c3a:	465e      	mov	r6, fp
 8008c3c:	46aa      	mov	sl, r5
 8008c3e:	46a9      	mov	r9, r5
 8008c40:	9501      	str	r5, [sp, #4]
 8008c42:	68a2      	ldr	r2, [r4, #8]
 8008c44:	b152      	cbz	r2, 8008c5c <_scanf_float+0x60>
 8008c46:	683b      	ldr	r3, [r7, #0]
 8008c48:	781b      	ldrb	r3, [r3, #0]
 8008c4a:	2b4e      	cmp	r3, #78	; 0x4e
 8008c4c:	d864      	bhi.n	8008d18 <_scanf_float+0x11c>
 8008c4e:	2b40      	cmp	r3, #64	; 0x40
 8008c50:	d83c      	bhi.n	8008ccc <_scanf_float+0xd0>
 8008c52:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 8008c56:	b2c8      	uxtb	r0, r1
 8008c58:	280e      	cmp	r0, #14
 8008c5a:	d93a      	bls.n	8008cd2 <_scanf_float+0xd6>
 8008c5c:	f1b9 0f00 	cmp.w	r9, #0
 8008c60:	d003      	beq.n	8008c6a <_scanf_float+0x6e>
 8008c62:	6823      	ldr	r3, [r4, #0]
 8008c64:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008c68:	6023      	str	r3, [r4, #0]
 8008c6a:	f10a 3aff 	add.w	sl, sl, #4294967295
 8008c6e:	f1ba 0f01 	cmp.w	sl, #1
 8008c72:	f200 8113 	bhi.w	8008e9c <_scanf_float+0x2a0>
 8008c76:	455e      	cmp	r6, fp
 8008c78:	f200 8105 	bhi.w	8008e86 <_scanf_float+0x28a>
 8008c7c:	2501      	movs	r5, #1
 8008c7e:	4628      	mov	r0, r5
 8008c80:	b007      	add	sp, #28
 8008c82:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008c86:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 8008c8a:	2a0d      	cmp	r2, #13
 8008c8c:	d8e6      	bhi.n	8008c5c <_scanf_float+0x60>
 8008c8e:	a101      	add	r1, pc, #4	; (adr r1, 8008c94 <_scanf_float+0x98>)
 8008c90:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8008c94:	08008dd3 	.word	0x08008dd3
 8008c98:	08008c5d 	.word	0x08008c5d
 8008c9c:	08008c5d 	.word	0x08008c5d
 8008ca0:	08008c5d 	.word	0x08008c5d
 8008ca4:	08008e33 	.word	0x08008e33
 8008ca8:	08008e0b 	.word	0x08008e0b
 8008cac:	08008c5d 	.word	0x08008c5d
 8008cb0:	08008c5d 	.word	0x08008c5d
 8008cb4:	08008de1 	.word	0x08008de1
 8008cb8:	08008c5d 	.word	0x08008c5d
 8008cbc:	08008c5d 	.word	0x08008c5d
 8008cc0:	08008c5d 	.word	0x08008c5d
 8008cc4:	08008c5d 	.word	0x08008c5d
 8008cc8:	08008d99 	.word	0x08008d99
 8008ccc:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 8008cd0:	e7db      	b.n	8008c8a <_scanf_float+0x8e>
 8008cd2:	290e      	cmp	r1, #14
 8008cd4:	d8c2      	bhi.n	8008c5c <_scanf_float+0x60>
 8008cd6:	a001      	add	r0, pc, #4	; (adr r0, 8008cdc <_scanf_float+0xe0>)
 8008cd8:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 8008cdc:	08008d8b 	.word	0x08008d8b
 8008ce0:	08008c5d 	.word	0x08008c5d
 8008ce4:	08008d8b 	.word	0x08008d8b
 8008ce8:	08008e1f 	.word	0x08008e1f
 8008cec:	08008c5d 	.word	0x08008c5d
 8008cf0:	08008d39 	.word	0x08008d39
 8008cf4:	08008d75 	.word	0x08008d75
 8008cf8:	08008d75 	.word	0x08008d75
 8008cfc:	08008d75 	.word	0x08008d75
 8008d00:	08008d75 	.word	0x08008d75
 8008d04:	08008d75 	.word	0x08008d75
 8008d08:	08008d75 	.word	0x08008d75
 8008d0c:	08008d75 	.word	0x08008d75
 8008d10:	08008d75 	.word	0x08008d75
 8008d14:	08008d75 	.word	0x08008d75
 8008d18:	2b6e      	cmp	r3, #110	; 0x6e
 8008d1a:	d809      	bhi.n	8008d30 <_scanf_float+0x134>
 8008d1c:	2b60      	cmp	r3, #96	; 0x60
 8008d1e:	d8b2      	bhi.n	8008c86 <_scanf_float+0x8a>
 8008d20:	2b54      	cmp	r3, #84	; 0x54
 8008d22:	d077      	beq.n	8008e14 <_scanf_float+0x218>
 8008d24:	2b59      	cmp	r3, #89	; 0x59
 8008d26:	d199      	bne.n	8008c5c <_scanf_float+0x60>
 8008d28:	2d07      	cmp	r5, #7
 8008d2a:	d197      	bne.n	8008c5c <_scanf_float+0x60>
 8008d2c:	2508      	movs	r5, #8
 8008d2e:	e029      	b.n	8008d84 <_scanf_float+0x188>
 8008d30:	2b74      	cmp	r3, #116	; 0x74
 8008d32:	d06f      	beq.n	8008e14 <_scanf_float+0x218>
 8008d34:	2b79      	cmp	r3, #121	; 0x79
 8008d36:	e7f6      	b.n	8008d26 <_scanf_float+0x12a>
 8008d38:	6821      	ldr	r1, [r4, #0]
 8008d3a:	05c8      	lsls	r0, r1, #23
 8008d3c:	d51a      	bpl.n	8008d74 <_scanf_float+0x178>
 8008d3e:	9b02      	ldr	r3, [sp, #8]
 8008d40:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 8008d44:	6021      	str	r1, [r4, #0]
 8008d46:	f109 0901 	add.w	r9, r9, #1
 8008d4a:	b11b      	cbz	r3, 8008d54 <_scanf_float+0x158>
 8008d4c:	3b01      	subs	r3, #1
 8008d4e:	3201      	adds	r2, #1
 8008d50:	9302      	str	r3, [sp, #8]
 8008d52:	60a2      	str	r2, [r4, #8]
 8008d54:	68a3      	ldr	r3, [r4, #8]
 8008d56:	3b01      	subs	r3, #1
 8008d58:	60a3      	str	r3, [r4, #8]
 8008d5a:	6923      	ldr	r3, [r4, #16]
 8008d5c:	3301      	adds	r3, #1
 8008d5e:	6123      	str	r3, [r4, #16]
 8008d60:	687b      	ldr	r3, [r7, #4]
 8008d62:	3b01      	subs	r3, #1
 8008d64:	2b00      	cmp	r3, #0
 8008d66:	607b      	str	r3, [r7, #4]
 8008d68:	f340 8084 	ble.w	8008e74 <_scanf_float+0x278>
 8008d6c:	683b      	ldr	r3, [r7, #0]
 8008d6e:	3301      	adds	r3, #1
 8008d70:	603b      	str	r3, [r7, #0]
 8008d72:	e766      	b.n	8008c42 <_scanf_float+0x46>
 8008d74:	eb1a 0f05 	cmn.w	sl, r5
 8008d78:	f47f af70 	bne.w	8008c5c <_scanf_float+0x60>
 8008d7c:	6822      	ldr	r2, [r4, #0]
 8008d7e:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 8008d82:	6022      	str	r2, [r4, #0]
 8008d84:	f806 3b01 	strb.w	r3, [r6], #1
 8008d88:	e7e4      	b.n	8008d54 <_scanf_float+0x158>
 8008d8a:	6822      	ldr	r2, [r4, #0]
 8008d8c:	0610      	lsls	r0, r2, #24
 8008d8e:	f57f af65 	bpl.w	8008c5c <_scanf_float+0x60>
 8008d92:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8008d96:	e7f4      	b.n	8008d82 <_scanf_float+0x186>
 8008d98:	f1ba 0f00 	cmp.w	sl, #0
 8008d9c:	d10e      	bne.n	8008dbc <_scanf_float+0x1c0>
 8008d9e:	f1b9 0f00 	cmp.w	r9, #0
 8008da2:	d10e      	bne.n	8008dc2 <_scanf_float+0x1c6>
 8008da4:	6822      	ldr	r2, [r4, #0]
 8008da6:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8008daa:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8008dae:	d108      	bne.n	8008dc2 <_scanf_float+0x1c6>
 8008db0:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8008db4:	6022      	str	r2, [r4, #0]
 8008db6:	f04f 0a01 	mov.w	sl, #1
 8008dba:	e7e3      	b.n	8008d84 <_scanf_float+0x188>
 8008dbc:	f1ba 0f02 	cmp.w	sl, #2
 8008dc0:	d055      	beq.n	8008e6e <_scanf_float+0x272>
 8008dc2:	2d01      	cmp	r5, #1
 8008dc4:	d002      	beq.n	8008dcc <_scanf_float+0x1d0>
 8008dc6:	2d04      	cmp	r5, #4
 8008dc8:	f47f af48 	bne.w	8008c5c <_scanf_float+0x60>
 8008dcc:	3501      	adds	r5, #1
 8008dce:	b2ed      	uxtb	r5, r5
 8008dd0:	e7d8      	b.n	8008d84 <_scanf_float+0x188>
 8008dd2:	f1ba 0f01 	cmp.w	sl, #1
 8008dd6:	f47f af41 	bne.w	8008c5c <_scanf_float+0x60>
 8008dda:	f04f 0a02 	mov.w	sl, #2
 8008dde:	e7d1      	b.n	8008d84 <_scanf_float+0x188>
 8008de0:	b97d      	cbnz	r5, 8008e02 <_scanf_float+0x206>
 8008de2:	f1b9 0f00 	cmp.w	r9, #0
 8008de6:	f47f af3c 	bne.w	8008c62 <_scanf_float+0x66>
 8008dea:	6822      	ldr	r2, [r4, #0]
 8008dec:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8008df0:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8008df4:	f47f af39 	bne.w	8008c6a <_scanf_float+0x6e>
 8008df8:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8008dfc:	6022      	str	r2, [r4, #0]
 8008dfe:	2501      	movs	r5, #1
 8008e00:	e7c0      	b.n	8008d84 <_scanf_float+0x188>
 8008e02:	2d03      	cmp	r5, #3
 8008e04:	d0e2      	beq.n	8008dcc <_scanf_float+0x1d0>
 8008e06:	2d05      	cmp	r5, #5
 8008e08:	e7de      	b.n	8008dc8 <_scanf_float+0x1cc>
 8008e0a:	2d02      	cmp	r5, #2
 8008e0c:	f47f af26 	bne.w	8008c5c <_scanf_float+0x60>
 8008e10:	2503      	movs	r5, #3
 8008e12:	e7b7      	b.n	8008d84 <_scanf_float+0x188>
 8008e14:	2d06      	cmp	r5, #6
 8008e16:	f47f af21 	bne.w	8008c5c <_scanf_float+0x60>
 8008e1a:	2507      	movs	r5, #7
 8008e1c:	e7b2      	b.n	8008d84 <_scanf_float+0x188>
 8008e1e:	6822      	ldr	r2, [r4, #0]
 8008e20:	0591      	lsls	r1, r2, #22
 8008e22:	f57f af1b 	bpl.w	8008c5c <_scanf_float+0x60>
 8008e26:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 8008e2a:	6022      	str	r2, [r4, #0]
 8008e2c:	f8cd 9004 	str.w	r9, [sp, #4]
 8008e30:	e7a8      	b.n	8008d84 <_scanf_float+0x188>
 8008e32:	6822      	ldr	r2, [r4, #0]
 8008e34:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 8008e38:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 8008e3c:	d006      	beq.n	8008e4c <_scanf_float+0x250>
 8008e3e:	0550      	lsls	r0, r2, #21
 8008e40:	f57f af0c 	bpl.w	8008c5c <_scanf_float+0x60>
 8008e44:	f1b9 0f00 	cmp.w	r9, #0
 8008e48:	f43f af0f 	beq.w	8008c6a <_scanf_float+0x6e>
 8008e4c:	0591      	lsls	r1, r2, #22
 8008e4e:	bf58      	it	pl
 8008e50:	9901      	ldrpl	r1, [sp, #4]
 8008e52:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8008e56:	bf58      	it	pl
 8008e58:	eba9 0101 	subpl.w	r1, r9, r1
 8008e5c:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 8008e60:	bf58      	it	pl
 8008e62:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 8008e66:	6022      	str	r2, [r4, #0]
 8008e68:	f04f 0900 	mov.w	r9, #0
 8008e6c:	e78a      	b.n	8008d84 <_scanf_float+0x188>
 8008e6e:	f04f 0a03 	mov.w	sl, #3
 8008e72:	e787      	b.n	8008d84 <_scanf_float+0x188>
 8008e74:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8008e78:	4639      	mov	r1, r7
 8008e7a:	4640      	mov	r0, r8
 8008e7c:	4798      	blx	r3
 8008e7e:	2800      	cmp	r0, #0
 8008e80:	f43f aedf 	beq.w	8008c42 <_scanf_float+0x46>
 8008e84:	e6ea      	b.n	8008c5c <_scanf_float+0x60>
 8008e86:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8008e8a:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8008e8e:	463a      	mov	r2, r7
 8008e90:	4640      	mov	r0, r8
 8008e92:	4798      	blx	r3
 8008e94:	6923      	ldr	r3, [r4, #16]
 8008e96:	3b01      	subs	r3, #1
 8008e98:	6123      	str	r3, [r4, #16]
 8008e9a:	e6ec      	b.n	8008c76 <_scanf_float+0x7a>
 8008e9c:	1e6b      	subs	r3, r5, #1
 8008e9e:	2b06      	cmp	r3, #6
 8008ea0:	d825      	bhi.n	8008eee <_scanf_float+0x2f2>
 8008ea2:	2d02      	cmp	r5, #2
 8008ea4:	d836      	bhi.n	8008f14 <_scanf_float+0x318>
 8008ea6:	455e      	cmp	r6, fp
 8008ea8:	f67f aee8 	bls.w	8008c7c <_scanf_float+0x80>
 8008eac:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8008eb0:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8008eb4:	463a      	mov	r2, r7
 8008eb6:	4640      	mov	r0, r8
 8008eb8:	4798      	blx	r3
 8008eba:	6923      	ldr	r3, [r4, #16]
 8008ebc:	3b01      	subs	r3, #1
 8008ebe:	6123      	str	r3, [r4, #16]
 8008ec0:	e7f1      	b.n	8008ea6 <_scanf_float+0x2aa>
 8008ec2:	9802      	ldr	r0, [sp, #8]
 8008ec4:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8008ec8:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 8008ecc:	9002      	str	r0, [sp, #8]
 8008ece:	463a      	mov	r2, r7
 8008ed0:	4640      	mov	r0, r8
 8008ed2:	4798      	blx	r3
 8008ed4:	6923      	ldr	r3, [r4, #16]
 8008ed6:	3b01      	subs	r3, #1
 8008ed8:	6123      	str	r3, [r4, #16]
 8008eda:	f10a 3aff 	add.w	sl, sl, #4294967295
 8008ede:	fa5f fa8a 	uxtb.w	sl, sl
 8008ee2:	f1ba 0f02 	cmp.w	sl, #2
 8008ee6:	d1ec      	bne.n	8008ec2 <_scanf_float+0x2c6>
 8008ee8:	3d03      	subs	r5, #3
 8008eea:	b2ed      	uxtb	r5, r5
 8008eec:	1b76      	subs	r6, r6, r5
 8008eee:	6823      	ldr	r3, [r4, #0]
 8008ef0:	05da      	lsls	r2, r3, #23
 8008ef2:	d52f      	bpl.n	8008f54 <_scanf_float+0x358>
 8008ef4:	055b      	lsls	r3, r3, #21
 8008ef6:	d510      	bpl.n	8008f1a <_scanf_float+0x31e>
 8008ef8:	455e      	cmp	r6, fp
 8008efa:	f67f aebf 	bls.w	8008c7c <_scanf_float+0x80>
 8008efe:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8008f02:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8008f06:	463a      	mov	r2, r7
 8008f08:	4640      	mov	r0, r8
 8008f0a:	4798      	blx	r3
 8008f0c:	6923      	ldr	r3, [r4, #16]
 8008f0e:	3b01      	subs	r3, #1
 8008f10:	6123      	str	r3, [r4, #16]
 8008f12:	e7f1      	b.n	8008ef8 <_scanf_float+0x2fc>
 8008f14:	46aa      	mov	sl, r5
 8008f16:	9602      	str	r6, [sp, #8]
 8008f18:	e7df      	b.n	8008eda <_scanf_float+0x2de>
 8008f1a:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 8008f1e:	6923      	ldr	r3, [r4, #16]
 8008f20:	2965      	cmp	r1, #101	; 0x65
 8008f22:	f103 33ff 	add.w	r3, r3, #4294967295
 8008f26:	f106 35ff 	add.w	r5, r6, #4294967295
 8008f2a:	6123      	str	r3, [r4, #16]
 8008f2c:	d00c      	beq.n	8008f48 <_scanf_float+0x34c>
 8008f2e:	2945      	cmp	r1, #69	; 0x45
 8008f30:	d00a      	beq.n	8008f48 <_scanf_float+0x34c>
 8008f32:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8008f36:	463a      	mov	r2, r7
 8008f38:	4640      	mov	r0, r8
 8008f3a:	4798      	blx	r3
 8008f3c:	6923      	ldr	r3, [r4, #16]
 8008f3e:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 8008f42:	3b01      	subs	r3, #1
 8008f44:	1eb5      	subs	r5, r6, #2
 8008f46:	6123      	str	r3, [r4, #16]
 8008f48:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8008f4c:	463a      	mov	r2, r7
 8008f4e:	4640      	mov	r0, r8
 8008f50:	4798      	blx	r3
 8008f52:	462e      	mov	r6, r5
 8008f54:	6825      	ldr	r5, [r4, #0]
 8008f56:	f015 0510 	ands.w	r5, r5, #16
 8008f5a:	d159      	bne.n	8009010 <_scanf_float+0x414>
 8008f5c:	7035      	strb	r5, [r6, #0]
 8008f5e:	6823      	ldr	r3, [r4, #0]
 8008f60:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8008f64:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008f68:	d11b      	bne.n	8008fa2 <_scanf_float+0x3a6>
 8008f6a:	9b01      	ldr	r3, [sp, #4]
 8008f6c:	454b      	cmp	r3, r9
 8008f6e:	eba3 0209 	sub.w	r2, r3, r9
 8008f72:	d123      	bne.n	8008fbc <_scanf_float+0x3c0>
 8008f74:	2200      	movs	r2, #0
 8008f76:	4659      	mov	r1, fp
 8008f78:	4640      	mov	r0, r8
 8008f7a:	f000 ff57 	bl	8009e2c <_strtod_r>
 8008f7e:	6822      	ldr	r2, [r4, #0]
 8008f80:	9b03      	ldr	r3, [sp, #12]
 8008f82:	f012 0f02 	tst.w	r2, #2
 8008f86:	ec57 6b10 	vmov	r6, r7, d0
 8008f8a:	681b      	ldr	r3, [r3, #0]
 8008f8c:	d021      	beq.n	8008fd2 <_scanf_float+0x3d6>
 8008f8e:	9903      	ldr	r1, [sp, #12]
 8008f90:	1d1a      	adds	r2, r3, #4
 8008f92:	600a      	str	r2, [r1, #0]
 8008f94:	681b      	ldr	r3, [r3, #0]
 8008f96:	e9c3 6700 	strd	r6, r7, [r3]
 8008f9a:	68e3      	ldr	r3, [r4, #12]
 8008f9c:	3301      	adds	r3, #1
 8008f9e:	60e3      	str	r3, [r4, #12]
 8008fa0:	e66d      	b.n	8008c7e <_scanf_float+0x82>
 8008fa2:	9b04      	ldr	r3, [sp, #16]
 8008fa4:	2b00      	cmp	r3, #0
 8008fa6:	d0e5      	beq.n	8008f74 <_scanf_float+0x378>
 8008fa8:	9905      	ldr	r1, [sp, #20]
 8008faa:	230a      	movs	r3, #10
 8008fac:	462a      	mov	r2, r5
 8008fae:	3101      	adds	r1, #1
 8008fb0:	4640      	mov	r0, r8
 8008fb2:	f000 ffc3 	bl	8009f3c <_strtol_r>
 8008fb6:	9b04      	ldr	r3, [sp, #16]
 8008fb8:	9e05      	ldr	r6, [sp, #20]
 8008fba:	1ac2      	subs	r2, r0, r3
 8008fbc:	f204 136f 	addw	r3, r4, #367	; 0x16f
 8008fc0:	429e      	cmp	r6, r3
 8008fc2:	bf28      	it	cs
 8008fc4:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 8008fc8:	4912      	ldr	r1, [pc, #72]	; (8009014 <_scanf_float+0x418>)
 8008fca:	4630      	mov	r0, r6
 8008fcc:	f000 f8a6 	bl	800911c <siprintf>
 8008fd0:	e7d0      	b.n	8008f74 <_scanf_float+0x378>
 8008fd2:	9903      	ldr	r1, [sp, #12]
 8008fd4:	f012 0f04 	tst.w	r2, #4
 8008fd8:	f103 0204 	add.w	r2, r3, #4
 8008fdc:	600a      	str	r2, [r1, #0]
 8008fde:	d1d9      	bne.n	8008f94 <_scanf_float+0x398>
 8008fe0:	f8d3 8000 	ldr.w	r8, [r3]
 8008fe4:	ee10 2a10 	vmov	r2, s0
 8008fe8:	ee10 0a10 	vmov	r0, s0
 8008fec:	463b      	mov	r3, r7
 8008fee:	4639      	mov	r1, r7
 8008ff0:	f7f7 fd9c 	bl	8000b2c <__aeabi_dcmpun>
 8008ff4:	b128      	cbz	r0, 8009002 <_scanf_float+0x406>
 8008ff6:	4808      	ldr	r0, [pc, #32]	; (8009018 <_scanf_float+0x41c>)
 8008ff8:	f000 f88a 	bl	8009110 <nanf>
 8008ffc:	ed88 0a00 	vstr	s0, [r8]
 8009000:	e7cb      	b.n	8008f9a <_scanf_float+0x39e>
 8009002:	4630      	mov	r0, r6
 8009004:	4639      	mov	r1, r7
 8009006:	f7f7 fdef 	bl	8000be8 <__aeabi_d2f>
 800900a:	f8c8 0000 	str.w	r0, [r8]
 800900e:	e7c4      	b.n	8008f9a <_scanf_float+0x39e>
 8009010:	2500      	movs	r5, #0
 8009012:	e634      	b.n	8008c7e <_scanf_float+0x82>
 8009014:	0800cb74 	.word	0x0800cb74
 8009018:	0800cf80 	.word	0x0800cf80

0800901c <cleanup_glue>:
 800901c:	b538      	push	{r3, r4, r5, lr}
 800901e:	460c      	mov	r4, r1
 8009020:	6809      	ldr	r1, [r1, #0]
 8009022:	4605      	mov	r5, r0
 8009024:	b109      	cbz	r1, 800902a <cleanup_glue+0xe>
 8009026:	f7ff fff9 	bl	800901c <cleanup_glue>
 800902a:	4621      	mov	r1, r4
 800902c:	4628      	mov	r0, r5
 800902e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009032:	f002 bf69 	b.w	800bf08 <_free_r>
	...

08009038 <_reclaim_reent>:
 8009038:	4b2c      	ldr	r3, [pc, #176]	; (80090ec <_reclaim_reent+0xb4>)
 800903a:	681b      	ldr	r3, [r3, #0]
 800903c:	4283      	cmp	r3, r0
 800903e:	b570      	push	{r4, r5, r6, lr}
 8009040:	4604      	mov	r4, r0
 8009042:	d051      	beq.n	80090e8 <_reclaim_reent+0xb0>
 8009044:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8009046:	b143      	cbz	r3, 800905a <_reclaim_reent+0x22>
 8009048:	68db      	ldr	r3, [r3, #12]
 800904a:	2b00      	cmp	r3, #0
 800904c:	d14a      	bne.n	80090e4 <_reclaim_reent+0xac>
 800904e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009050:	6819      	ldr	r1, [r3, #0]
 8009052:	b111      	cbz	r1, 800905a <_reclaim_reent+0x22>
 8009054:	4620      	mov	r0, r4
 8009056:	f002 ff57 	bl	800bf08 <_free_r>
 800905a:	6961      	ldr	r1, [r4, #20]
 800905c:	b111      	cbz	r1, 8009064 <_reclaim_reent+0x2c>
 800905e:	4620      	mov	r0, r4
 8009060:	f002 ff52 	bl	800bf08 <_free_r>
 8009064:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8009066:	b111      	cbz	r1, 800906e <_reclaim_reent+0x36>
 8009068:	4620      	mov	r0, r4
 800906a:	f002 ff4d 	bl	800bf08 <_free_r>
 800906e:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8009070:	b111      	cbz	r1, 8009078 <_reclaim_reent+0x40>
 8009072:	4620      	mov	r0, r4
 8009074:	f002 ff48 	bl	800bf08 <_free_r>
 8009078:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 800907a:	b111      	cbz	r1, 8009082 <_reclaim_reent+0x4a>
 800907c:	4620      	mov	r0, r4
 800907e:	f002 ff43 	bl	800bf08 <_free_r>
 8009082:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8009084:	b111      	cbz	r1, 800908c <_reclaim_reent+0x54>
 8009086:	4620      	mov	r0, r4
 8009088:	f002 ff3e 	bl	800bf08 <_free_r>
 800908c:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 800908e:	b111      	cbz	r1, 8009096 <_reclaim_reent+0x5e>
 8009090:	4620      	mov	r0, r4
 8009092:	f002 ff39 	bl	800bf08 <_free_r>
 8009096:	6da1      	ldr	r1, [r4, #88]	; 0x58
 8009098:	b111      	cbz	r1, 80090a0 <_reclaim_reent+0x68>
 800909a:	4620      	mov	r0, r4
 800909c:	f002 ff34 	bl	800bf08 <_free_r>
 80090a0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80090a2:	b111      	cbz	r1, 80090aa <_reclaim_reent+0x72>
 80090a4:	4620      	mov	r0, r4
 80090a6:	f002 ff2f 	bl	800bf08 <_free_r>
 80090aa:	69a3      	ldr	r3, [r4, #24]
 80090ac:	b1e3      	cbz	r3, 80090e8 <_reclaim_reent+0xb0>
 80090ae:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80090b0:	4620      	mov	r0, r4
 80090b2:	4798      	blx	r3
 80090b4:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 80090b6:	b1b9      	cbz	r1, 80090e8 <_reclaim_reent+0xb0>
 80090b8:	4620      	mov	r0, r4
 80090ba:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80090be:	f7ff bfad 	b.w	800901c <cleanup_glue>
 80090c2:	5949      	ldr	r1, [r1, r5]
 80090c4:	b941      	cbnz	r1, 80090d8 <_reclaim_reent+0xa0>
 80090c6:	3504      	adds	r5, #4
 80090c8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80090ca:	2d80      	cmp	r5, #128	; 0x80
 80090cc:	68d9      	ldr	r1, [r3, #12]
 80090ce:	d1f8      	bne.n	80090c2 <_reclaim_reent+0x8a>
 80090d0:	4620      	mov	r0, r4
 80090d2:	f002 ff19 	bl	800bf08 <_free_r>
 80090d6:	e7ba      	b.n	800904e <_reclaim_reent+0x16>
 80090d8:	680e      	ldr	r6, [r1, #0]
 80090da:	4620      	mov	r0, r4
 80090dc:	f002 ff14 	bl	800bf08 <_free_r>
 80090e0:	4631      	mov	r1, r6
 80090e2:	e7ef      	b.n	80090c4 <_reclaim_reent+0x8c>
 80090e4:	2500      	movs	r5, #0
 80090e6:	e7ef      	b.n	80090c8 <_reclaim_reent+0x90>
 80090e8:	bd70      	pop	{r4, r5, r6, pc}
 80090ea:	bf00      	nop
 80090ec:	20000010 	.word	0x20000010

080090f0 <_sbrk_r>:
 80090f0:	b538      	push	{r3, r4, r5, lr}
 80090f2:	4d06      	ldr	r5, [pc, #24]	; (800910c <_sbrk_r+0x1c>)
 80090f4:	2300      	movs	r3, #0
 80090f6:	4604      	mov	r4, r0
 80090f8:	4608      	mov	r0, r1
 80090fa:	602b      	str	r3, [r5, #0]
 80090fc:	f7f8 fc82 	bl	8001a04 <_sbrk>
 8009100:	1c43      	adds	r3, r0, #1
 8009102:	d102      	bne.n	800910a <_sbrk_r+0x1a>
 8009104:	682b      	ldr	r3, [r5, #0]
 8009106:	b103      	cbz	r3, 800910a <_sbrk_r+0x1a>
 8009108:	6023      	str	r3, [r4, #0]
 800910a:	bd38      	pop	{r3, r4, r5, pc}
 800910c:	20001dc0 	.word	0x20001dc0

08009110 <nanf>:
 8009110:	ed9f 0a01 	vldr	s0, [pc, #4]	; 8009118 <nanf+0x8>
 8009114:	4770      	bx	lr
 8009116:	bf00      	nop
 8009118:	7fc00000 	.word	0x7fc00000

0800911c <siprintf>:
 800911c:	b40e      	push	{r1, r2, r3}
 800911e:	b500      	push	{lr}
 8009120:	b09c      	sub	sp, #112	; 0x70
 8009122:	ab1d      	add	r3, sp, #116	; 0x74
 8009124:	9002      	str	r0, [sp, #8]
 8009126:	9006      	str	r0, [sp, #24]
 8009128:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800912c:	4809      	ldr	r0, [pc, #36]	; (8009154 <siprintf+0x38>)
 800912e:	9107      	str	r1, [sp, #28]
 8009130:	9104      	str	r1, [sp, #16]
 8009132:	4909      	ldr	r1, [pc, #36]	; (8009158 <siprintf+0x3c>)
 8009134:	f853 2b04 	ldr.w	r2, [r3], #4
 8009138:	9105      	str	r1, [sp, #20]
 800913a:	6800      	ldr	r0, [r0, #0]
 800913c:	9301      	str	r3, [sp, #4]
 800913e:	a902      	add	r1, sp, #8
 8009140:	f002 ff8a 	bl	800c058 <_svfiprintf_r>
 8009144:	9b02      	ldr	r3, [sp, #8]
 8009146:	2200      	movs	r2, #0
 8009148:	701a      	strb	r2, [r3, #0]
 800914a:	b01c      	add	sp, #112	; 0x70
 800914c:	f85d eb04 	ldr.w	lr, [sp], #4
 8009150:	b003      	add	sp, #12
 8009152:	4770      	bx	lr
 8009154:	20000010 	.word	0x20000010
 8009158:	ffff0208 	.word	0xffff0208

0800915c <__sread>:
 800915c:	b510      	push	{r4, lr}
 800915e:	460c      	mov	r4, r1
 8009160:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009164:	f003 f878 	bl	800c258 <_read_r>
 8009168:	2800      	cmp	r0, #0
 800916a:	bfab      	itete	ge
 800916c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800916e:	89a3      	ldrhlt	r3, [r4, #12]
 8009170:	181b      	addge	r3, r3, r0
 8009172:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8009176:	bfac      	ite	ge
 8009178:	6563      	strge	r3, [r4, #84]	; 0x54
 800917a:	81a3      	strhlt	r3, [r4, #12]
 800917c:	bd10      	pop	{r4, pc}

0800917e <__swrite>:
 800917e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009182:	461f      	mov	r7, r3
 8009184:	898b      	ldrh	r3, [r1, #12]
 8009186:	05db      	lsls	r3, r3, #23
 8009188:	4605      	mov	r5, r0
 800918a:	460c      	mov	r4, r1
 800918c:	4616      	mov	r6, r2
 800918e:	d505      	bpl.n	800919c <__swrite+0x1e>
 8009190:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009194:	2302      	movs	r3, #2
 8009196:	2200      	movs	r2, #0
 8009198:	f002 f9a6 	bl	800b4e8 <_lseek_r>
 800919c:	89a3      	ldrh	r3, [r4, #12]
 800919e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80091a2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80091a6:	81a3      	strh	r3, [r4, #12]
 80091a8:	4632      	mov	r2, r6
 80091aa:	463b      	mov	r3, r7
 80091ac:	4628      	mov	r0, r5
 80091ae:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80091b2:	f000 bec5 	b.w	8009f40 <_write_r>

080091b6 <__sseek>:
 80091b6:	b510      	push	{r4, lr}
 80091b8:	460c      	mov	r4, r1
 80091ba:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80091be:	f002 f993 	bl	800b4e8 <_lseek_r>
 80091c2:	1c43      	adds	r3, r0, #1
 80091c4:	89a3      	ldrh	r3, [r4, #12]
 80091c6:	bf15      	itete	ne
 80091c8:	6560      	strne	r0, [r4, #84]	; 0x54
 80091ca:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80091ce:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80091d2:	81a3      	strheq	r3, [r4, #12]
 80091d4:	bf18      	it	ne
 80091d6:	81a3      	strhne	r3, [r4, #12]
 80091d8:	bd10      	pop	{r4, pc}

080091da <__sclose>:
 80091da:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80091de:	f000 bec1 	b.w	8009f64 <_close_r>

080091e2 <sulp>:
 80091e2:	b570      	push	{r4, r5, r6, lr}
 80091e4:	4604      	mov	r4, r0
 80091e6:	460d      	mov	r5, r1
 80091e8:	ec45 4b10 	vmov	d0, r4, r5
 80091ec:	4616      	mov	r6, r2
 80091ee:	f002 fd25 	bl	800bc3c <__ulp>
 80091f2:	ec51 0b10 	vmov	r0, r1, d0
 80091f6:	b17e      	cbz	r6, 8009218 <sulp+0x36>
 80091f8:	f3c5 530a 	ubfx	r3, r5, #20, #11
 80091fc:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8009200:	2b00      	cmp	r3, #0
 8009202:	dd09      	ble.n	8009218 <sulp+0x36>
 8009204:	051b      	lsls	r3, r3, #20
 8009206:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 800920a:	2400      	movs	r4, #0
 800920c:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 8009210:	4622      	mov	r2, r4
 8009212:	462b      	mov	r3, r5
 8009214:	f7f7 f9f0 	bl	80005f8 <__aeabi_dmul>
 8009218:	bd70      	pop	{r4, r5, r6, pc}
 800921a:	0000      	movs	r0, r0
 800921c:	0000      	movs	r0, r0
	...

08009220 <_strtod_l>:
 8009220:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009224:	ed2d 8b02 	vpush	{d8}
 8009228:	b09d      	sub	sp, #116	; 0x74
 800922a:	461f      	mov	r7, r3
 800922c:	2300      	movs	r3, #0
 800922e:	9318      	str	r3, [sp, #96]	; 0x60
 8009230:	4ba2      	ldr	r3, [pc, #648]	; (80094bc <_strtod_l+0x29c>)
 8009232:	9213      	str	r2, [sp, #76]	; 0x4c
 8009234:	681b      	ldr	r3, [r3, #0]
 8009236:	9305      	str	r3, [sp, #20]
 8009238:	4604      	mov	r4, r0
 800923a:	4618      	mov	r0, r3
 800923c:	4688      	mov	r8, r1
 800923e:	f7f6 ffc7 	bl	80001d0 <strlen>
 8009242:	f04f 0a00 	mov.w	sl, #0
 8009246:	4605      	mov	r5, r0
 8009248:	f04f 0b00 	mov.w	fp, #0
 800924c:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 8009250:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8009252:	781a      	ldrb	r2, [r3, #0]
 8009254:	2a2b      	cmp	r2, #43	; 0x2b
 8009256:	d04e      	beq.n	80092f6 <_strtod_l+0xd6>
 8009258:	d83b      	bhi.n	80092d2 <_strtod_l+0xb2>
 800925a:	2a0d      	cmp	r2, #13
 800925c:	d834      	bhi.n	80092c8 <_strtod_l+0xa8>
 800925e:	2a08      	cmp	r2, #8
 8009260:	d834      	bhi.n	80092cc <_strtod_l+0xac>
 8009262:	2a00      	cmp	r2, #0
 8009264:	d03e      	beq.n	80092e4 <_strtod_l+0xc4>
 8009266:	2300      	movs	r3, #0
 8009268:	930a      	str	r3, [sp, #40]	; 0x28
 800926a:	9e17      	ldr	r6, [sp, #92]	; 0x5c
 800926c:	7833      	ldrb	r3, [r6, #0]
 800926e:	2b30      	cmp	r3, #48	; 0x30
 8009270:	f040 80b0 	bne.w	80093d4 <_strtod_l+0x1b4>
 8009274:	7873      	ldrb	r3, [r6, #1]
 8009276:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800927a:	2b58      	cmp	r3, #88	; 0x58
 800927c:	d168      	bne.n	8009350 <_strtod_l+0x130>
 800927e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009280:	9301      	str	r3, [sp, #4]
 8009282:	ab18      	add	r3, sp, #96	; 0x60
 8009284:	9702      	str	r7, [sp, #8]
 8009286:	9300      	str	r3, [sp, #0]
 8009288:	4a8d      	ldr	r2, [pc, #564]	; (80094c0 <_strtod_l+0x2a0>)
 800928a:	ab19      	add	r3, sp, #100	; 0x64
 800928c:	a917      	add	r1, sp, #92	; 0x5c
 800928e:	4620      	mov	r0, r4
 8009290:	f001 fe1e 	bl	800aed0 <__gethex>
 8009294:	f010 0707 	ands.w	r7, r0, #7
 8009298:	4605      	mov	r5, r0
 800929a:	d005      	beq.n	80092a8 <_strtod_l+0x88>
 800929c:	2f06      	cmp	r7, #6
 800929e:	d12c      	bne.n	80092fa <_strtod_l+0xda>
 80092a0:	3601      	adds	r6, #1
 80092a2:	2300      	movs	r3, #0
 80092a4:	9617      	str	r6, [sp, #92]	; 0x5c
 80092a6:	930a      	str	r3, [sp, #40]	; 0x28
 80092a8:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80092aa:	2b00      	cmp	r3, #0
 80092ac:	f040 8590 	bne.w	8009dd0 <_strtod_l+0xbb0>
 80092b0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80092b2:	b1eb      	cbz	r3, 80092f0 <_strtod_l+0xd0>
 80092b4:	4652      	mov	r2, sl
 80092b6:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 80092ba:	ec43 2b10 	vmov	d0, r2, r3
 80092be:	b01d      	add	sp, #116	; 0x74
 80092c0:	ecbd 8b02 	vpop	{d8}
 80092c4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80092c8:	2a20      	cmp	r2, #32
 80092ca:	d1cc      	bne.n	8009266 <_strtod_l+0x46>
 80092cc:	3301      	adds	r3, #1
 80092ce:	9317      	str	r3, [sp, #92]	; 0x5c
 80092d0:	e7be      	b.n	8009250 <_strtod_l+0x30>
 80092d2:	2a2d      	cmp	r2, #45	; 0x2d
 80092d4:	d1c7      	bne.n	8009266 <_strtod_l+0x46>
 80092d6:	2201      	movs	r2, #1
 80092d8:	920a      	str	r2, [sp, #40]	; 0x28
 80092da:	1c5a      	adds	r2, r3, #1
 80092dc:	9217      	str	r2, [sp, #92]	; 0x5c
 80092de:	785b      	ldrb	r3, [r3, #1]
 80092e0:	2b00      	cmp	r3, #0
 80092e2:	d1c2      	bne.n	800926a <_strtod_l+0x4a>
 80092e4:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80092e6:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 80092ea:	2b00      	cmp	r3, #0
 80092ec:	f040 856e 	bne.w	8009dcc <_strtod_l+0xbac>
 80092f0:	4652      	mov	r2, sl
 80092f2:	465b      	mov	r3, fp
 80092f4:	e7e1      	b.n	80092ba <_strtod_l+0x9a>
 80092f6:	2200      	movs	r2, #0
 80092f8:	e7ee      	b.n	80092d8 <_strtod_l+0xb8>
 80092fa:	9a18      	ldr	r2, [sp, #96]	; 0x60
 80092fc:	b13a      	cbz	r2, 800930e <_strtod_l+0xee>
 80092fe:	2135      	movs	r1, #53	; 0x35
 8009300:	a81a      	add	r0, sp, #104	; 0x68
 8009302:	f002 fda6 	bl	800be52 <__copybits>
 8009306:	9918      	ldr	r1, [sp, #96]	; 0x60
 8009308:	4620      	mov	r0, r4
 800930a:	f002 f965 	bl	800b5d8 <_Bfree>
 800930e:	3f01      	subs	r7, #1
 8009310:	2f04      	cmp	r7, #4
 8009312:	d806      	bhi.n	8009322 <_strtod_l+0x102>
 8009314:	e8df f007 	tbb	[pc, r7]
 8009318:	1714030a 	.word	0x1714030a
 800931c:	0a          	.byte	0x0a
 800931d:	00          	.byte	0x00
 800931e:	e9dd ab1a 	ldrd	sl, fp, [sp, #104]	; 0x68
 8009322:	0728      	lsls	r0, r5, #28
 8009324:	d5c0      	bpl.n	80092a8 <_strtod_l+0x88>
 8009326:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 800932a:	e7bd      	b.n	80092a8 <_strtod_l+0x88>
 800932c:	e9dd a31a 	ldrd	sl, r3, [sp, #104]	; 0x68
 8009330:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8009332:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8009336:	f202 4233 	addw	r2, r2, #1075	; 0x433
 800933a:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 800933e:	e7f0      	b.n	8009322 <_strtod_l+0x102>
 8009340:	f8df b180 	ldr.w	fp, [pc, #384]	; 80094c4 <_strtod_l+0x2a4>
 8009344:	e7ed      	b.n	8009322 <_strtod_l+0x102>
 8009346:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 800934a:	f04f 3aff 	mov.w	sl, #4294967295
 800934e:	e7e8      	b.n	8009322 <_strtod_l+0x102>
 8009350:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8009352:	1c5a      	adds	r2, r3, #1
 8009354:	9217      	str	r2, [sp, #92]	; 0x5c
 8009356:	785b      	ldrb	r3, [r3, #1]
 8009358:	2b30      	cmp	r3, #48	; 0x30
 800935a:	d0f9      	beq.n	8009350 <_strtod_l+0x130>
 800935c:	2b00      	cmp	r3, #0
 800935e:	d0a3      	beq.n	80092a8 <_strtod_l+0x88>
 8009360:	2301      	movs	r3, #1
 8009362:	f04f 0900 	mov.w	r9, #0
 8009366:	9304      	str	r3, [sp, #16]
 8009368:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800936a:	9308      	str	r3, [sp, #32]
 800936c:	f8cd 901c 	str.w	r9, [sp, #28]
 8009370:	464f      	mov	r7, r9
 8009372:	220a      	movs	r2, #10
 8009374:	9817      	ldr	r0, [sp, #92]	; 0x5c
 8009376:	7806      	ldrb	r6, [r0, #0]
 8009378:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 800937c:	b2d9      	uxtb	r1, r3
 800937e:	2909      	cmp	r1, #9
 8009380:	d92a      	bls.n	80093d8 <_strtod_l+0x1b8>
 8009382:	9905      	ldr	r1, [sp, #20]
 8009384:	462a      	mov	r2, r5
 8009386:	f002 ff83 	bl	800c290 <strncmp>
 800938a:	b398      	cbz	r0, 80093f4 <_strtod_l+0x1d4>
 800938c:	2000      	movs	r0, #0
 800938e:	4632      	mov	r2, r6
 8009390:	463d      	mov	r5, r7
 8009392:	9005      	str	r0, [sp, #20]
 8009394:	4603      	mov	r3, r0
 8009396:	2a65      	cmp	r2, #101	; 0x65
 8009398:	d001      	beq.n	800939e <_strtod_l+0x17e>
 800939a:	2a45      	cmp	r2, #69	; 0x45
 800939c:	d118      	bne.n	80093d0 <_strtod_l+0x1b0>
 800939e:	b91d      	cbnz	r5, 80093a8 <_strtod_l+0x188>
 80093a0:	9a04      	ldr	r2, [sp, #16]
 80093a2:	4302      	orrs	r2, r0
 80093a4:	d09e      	beq.n	80092e4 <_strtod_l+0xc4>
 80093a6:	2500      	movs	r5, #0
 80093a8:	f8dd 805c 	ldr.w	r8, [sp, #92]	; 0x5c
 80093ac:	f108 0201 	add.w	r2, r8, #1
 80093b0:	9217      	str	r2, [sp, #92]	; 0x5c
 80093b2:	f898 2001 	ldrb.w	r2, [r8, #1]
 80093b6:	2a2b      	cmp	r2, #43	; 0x2b
 80093b8:	d075      	beq.n	80094a6 <_strtod_l+0x286>
 80093ba:	2a2d      	cmp	r2, #45	; 0x2d
 80093bc:	d07b      	beq.n	80094b6 <_strtod_l+0x296>
 80093be:	f04f 0c00 	mov.w	ip, #0
 80093c2:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 80093c6:	2909      	cmp	r1, #9
 80093c8:	f240 8082 	bls.w	80094d0 <_strtod_l+0x2b0>
 80093cc:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 80093d0:	2600      	movs	r6, #0
 80093d2:	e09d      	b.n	8009510 <_strtod_l+0x2f0>
 80093d4:	2300      	movs	r3, #0
 80093d6:	e7c4      	b.n	8009362 <_strtod_l+0x142>
 80093d8:	2f08      	cmp	r7, #8
 80093da:	bfd8      	it	le
 80093dc:	9907      	ldrle	r1, [sp, #28]
 80093de:	f100 0001 	add.w	r0, r0, #1
 80093e2:	bfda      	itte	le
 80093e4:	fb02 3301 	mlale	r3, r2, r1, r3
 80093e8:	9307      	strle	r3, [sp, #28]
 80093ea:	fb02 3909 	mlagt	r9, r2, r9, r3
 80093ee:	3701      	adds	r7, #1
 80093f0:	9017      	str	r0, [sp, #92]	; 0x5c
 80093f2:	e7bf      	b.n	8009374 <_strtod_l+0x154>
 80093f4:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80093f6:	195a      	adds	r2, r3, r5
 80093f8:	9217      	str	r2, [sp, #92]	; 0x5c
 80093fa:	5d5a      	ldrb	r2, [r3, r5]
 80093fc:	2f00      	cmp	r7, #0
 80093fe:	d037      	beq.n	8009470 <_strtod_l+0x250>
 8009400:	9005      	str	r0, [sp, #20]
 8009402:	463d      	mov	r5, r7
 8009404:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 8009408:	2b09      	cmp	r3, #9
 800940a:	d912      	bls.n	8009432 <_strtod_l+0x212>
 800940c:	2301      	movs	r3, #1
 800940e:	e7c2      	b.n	8009396 <_strtod_l+0x176>
 8009410:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8009412:	1c5a      	adds	r2, r3, #1
 8009414:	9217      	str	r2, [sp, #92]	; 0x5c
 8009416:	785a      	ldrb	r2, [r3, #1]
 8009418:	3001      	adds	r0, #1
 800941a:	2a30      	cmp	r2, #48	; 0x30
 800941c:	d0f8      	beq.n	8009410 <_strtod_l+0x1f0>
 800941e:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 8009422:	2b08      	cmp	r3, #8
 8009424:	f200 84d9 	bhi.w	8009dda <_strtod_l+0xbba>
 8009428:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800942a:	9005      	str	r0, [sp, #20]
 800942c:	2000      	movs	r0, #0
 800942e:	9308      	str	r3, [sp, #32]
 8009430:	4605      	mov	r5, r0
 8009432:	3a30      	subs	r2, #48	; 0x30
 8009434:	f100 0301 	add.w	r3, r0, #1
 8009438:	d014      	beq.n	8009464 <_strtod_l+0x244>
 800943a:	9905      	ldr	r1, [sp, #20]
 800943c:	4419      	add	r1, r3
 800943e:	9105      	str	r1, [sp, #20]
 8009440:	462b      	mov	r3, r5
 8009442:	eb00 0e05 	add.w	lr, r0, r5
 8009446:	210a      	movs	r1, #10
 8009448:	4573      	cmp	r3, lr
 800944a:	d113      	bne.n	8009474 <_strtod_l+0x254>
 800944c:	182b      	adds	r3, r5, r0
 800944e:	2b08      	cmp	r3, #8
 8009450:	f105 0501 	add.w	r5, r5, #1
 8009454:	4405      	add	r5, r0
 8009456:	dc1c      	bgt.n	8009492 <_strtod_l+0x272>
 8009458:	9907      	ldr	r1, [sp, #28]
 800945a:	230a      	movs	r3, #10
 800945c:	fb03 2301 	mla	r3, r3, r1, r2
 8009460:	9307      	str	r3, [sp, #28]
 8009462:	2300      	movs	r3, #0
 8009464:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8009466:	1c51      	adds	r1, r2, #1
 8009468:	9117      	str	r1, [sp, #92]	; 0x5c
 800946a:	7852      	ldrb	r2, [r2, #1]
 800946c:	4618      	mov	r0, r3
 800946e:	e7c9      	b.n	8009404 <_strtod_l+0x1e4>
 8009470:	4638      	mov	r0, r7
 8009472:	e7d2      	b.n	800941a <_strtod_l+0x1fa>
 8009474:	2b08      	cmp	r3, #8
 8009476:	dc04      	bgt.n	8009482 <_strtod_l+0x262>
 8009478:	9e07      	ldr	r6, [sp, #28]
 800947a:	434e      	muls	r6, r1
 800947c:	9607      	str	r6, [sp, #28]
 800947e:	3301      	adds	r3, #1
 8009480:	e7e2      	b.n	8009448 <_strtod_l+0x228>
 8009482:	f103 0c01 	add.w	ip, r3, #1
 8009486:	f1bc 0f10 	cmp.w	ip, #16
 800948a:	bfd8      	it	le
 800948c:	fb01 f909 	mulle.w	r9, r1, r9
 8009490:	e7f5      	b.n	800947e <_strtod_l+0x25e>
 8009492:	2d10      	cmp	r5, #16
 8009494:	bfdc      	itt	le
 8009496:	230a      	movle	r3, #10
 8009498:	fb03 2909 	mlale	r9, r3, r9, r2
 800949c:	e7e1      	b.n	8009462 <_strtod_l+0x242>
 800949e:	2300      	movs	r3, #0
 80094a0:	9305      	str	r3, [sp, #20]
 80094a2:	2301      	movs	r3, #1
 80094a4:	e77c      	b.n	80093a0 <_strtod_l+0x180>
 80094a6:	f04f 0c00 	mov.w	ip, #0
 80094aa:	f108 0202 	add.w	r2, r8, #2
 80094ae:	9217      	str	r2, [sp, #92]	; 0x5c
 80094b0:	f898 2002 	ldrb.w	r2, [r8, #2]
 80094b4:	e785      	b.n	80093c2 <_strtod_l+0x1a2>
 80094b6:	f04f 0c01 	mov.w	ip, #1
 80094ba:	e7f6      	b.n	80094aa <_strtod_l+0x28a>
 80094bc:	0800cdc8 	.word	0x0800cdc8
 80094c0:	0800cb7c 	.word	0x0800cb7c
 80094c4:	7ff00000 	.word	0x7ff00000
 80094c8:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 80094ca:	1c51      	adds	r1, r2, #1
 80094cc:	9117      	str	r1, [sp, #92]	; 0x5c
 80094ce:	7852      	ldrb	r2, [r2, #1]
 80094d0:	2a30      	cmp	r2, #48	; 0x30
 80094d2:	d0f9      	beq.n	80094c8 <_strtod_l+0x2a8>
 80094d4:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 80094d8:	2908      	cmp	r1, #8
 80094da:	f63f af79 	bhi.w	80093d0 <_strtod_l+0x1b0>
 80094de:	f1a2 0e30 	sub.w	lr, r2, #48	; 0x30
 80094e2:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 80094e4:	9206      	str	r2, [sp, #24]
 80094e6:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 80094e8:	1c51      	adds	r1, r2, #1
 80094ea:	9117      	str	r1, [sp, #92]	; 0x5c
 80094ec:	7852      	ldrb	r2, [r2, #1]
 80094ee:	f1a2 0630 	sub.w	r6, r2, #48	; 0x30
 80094f2:	2e09      	cmp	r6, #9
 80094f4:	d937      	bls.n	8009566 <_strtod_l+0x346>
 80094f6:	9e06      	ldr	r6, [sp, #24]
 80094f8:	1b89      	subs	r1, r1, r6
 80094fa:	2908      	cmp	r1, #8
 80094fc:	f644 661f 	movw	r6, #19999	; 0x4e1f
 8009500:	dc02      	bgt.n	8009508 <_strtod_l+0x2e8>
 8009502:	4576      	cmp	r6, lr
 8009504:	bfa8      	it	ge
 8009506:	4676      	movge	r6, lr
 8009508:	f1bc 0f00 	cmp.w	ip, #0
 800950c:	d000      	beq.n	8009510 <_strtod_l+0x2f0>
 800950e:	4276      	negs	r6, r6
 8009510:	2d00      	cmp	r5, #0
 8009512:	d14d      	bne.n	80095b0 <_strtod_l+0x390>
 8009514:	9904      	ldr	r1, [sp, #16]
 8009516:	4301      	orrs	r1, r0
 8009518:	f47f aec6 	bne.w	80092a8 <_strtod_l+0x88>
 800951c:	2b00      	cmp	r3, #0
 800951e:	f47f aee1 	bne.w	80092e4 <_strtod_l+0xc4>
 8009522:	2a69      	cmp	r2, #105	; 0x69
 8009524:	d027      	beq.n	8009576 <_strtod_l+0x356>
 8009526:	dc24      	bgt.n	8009572 <_strtod_l+0x352>
 8009528:	2a49      	cmp	r2, #73	; 0x49
 800952a:	d024      	beq.n	8009576 <_strtod_l+0x356>
 800952c:	2a4e      	cmp	r2, #78	; 0x4e
 800952e:	f47f aed9 	bne.w	80092e4 <_strtod_l+0xc4>
 8009532:	499f      	ldr	r1, [pc, #636]	; (80097b0 <_strtod_l+0x590>)
 8009534:	a817      	add	r0, sp, #92	; 0x5c
 8009536:	f001 ff23 	bl	800b380 <__match>
 800953a:	2800      	cmp	r0, #0
 800953c:	f43f aed2 	beq.w	80092e4 <_strtod_l+0xc4>
 8009540:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8009542:	781b      	ldrb	r3, [r3, #0]
 8009544:	2b28      	cmp	r3, #40	; 0x28
 8009546:	d12d      	bne.n	80095a4 <_strtod_l+0x384>
 8009548:	499a      	ldr	r1, [pc, #616]	; (80097b4 <_strtod_l+0x594>)
 800954a:	aa1a      	add	r2, sp, #104	; 0x68
 800954c:	a817      	add	r0, sp, #92	; 0x5c
 800954e:	f001 ff2b 	bl	800b3a8 <__hexnan>
 8009552:	2805      	cmp	r0, #5
 8009554:	d126      	bne.n	80095a4 <_strtod_l+0x384>
 8009556:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8009558:	f8dd a068 	ldr.w	sl, [sp, #104]	; 0x68
 800955c:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 8009560:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 8009564:	e6a0      	b.n	80092a8 <_strtod_l+0x88>
 8009566:	210a      	movs	r1, #10
 8009568:	fb01 2e0e 	mla	lr, r1, lr, r2
 800956c:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 8009570:	e7b9      	b.n	80094e6 <_strtod_l+0x2c6>
 8009572:	2a6e      	cmp	r2, #110	; 0x6e
 8009574:	e7db      	b.n	800952e <_strtod_l+0x30e>
 8009576:	4990      	ldr	r1, [pc, #576]	; (80097b8 <_strtod_l+0x598>)
 8009578:	a817      	add	r0, sp, #92	; 0x5c
 800957a:	f001 ff01 	bl	800b380 <__match>
 800957e:	2800      	cmp	r0, #0
 8009580:	f43f aeb0 	beq.w	80092e4 <_strtod_l+0xc4>
 8009584:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8009586:	498d      	ldr	r1, [pc, #564]	; (80097bc <_strtod_l+0x59c>)
 8009588:	3b01      	subs	r3, #1
 800958a:	a817      	add	r0, sp, #92	; 0x5c
 800958c:	9317      	str	r3, [sp, #92]	; 0x5c
 800958e:	f001 fef7 	bl	800b380 <__match>
 8009592:	b910      	cbnz	r0, 800959a <_strtod_l+0x37a>
 8009594:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8009596:	3301      	adds	r3, #1
 8009598:	9317      	str	r3, [sp, #92]	; 0x5c
 800959a:	f8df b230 	ldr.w	fp, [pc, #560]	; 80097cc <_strtod_l+0x5ac>
 800959e:	f04f 0a00 	mov.w	sl, #0
 80095a2:	e681      	b.n	80092a8 <_strtod_l+0x88>
 80095a4:	4886      	ldr	r0, [pc, #536]	; (80097c0 <_strtod_l+0x5a0>)
 80095a6:	f002 fe6b 	bl	800c280 <nan>
 80095aa:	ec5b ab10 	vmov	sl, fp, d0
 80095ae:	e67b      	b.n	80092a8 <_strtod_l+0x88>
 80095b0:	9b05      	ldr	r3, [sp, #20]
 80095b2:	9807      	ldr	r0, [sp, #28]
 80095b4:	1af3      	subs	r3, r6, r3
 80095b6:	2f00      	cmp	r7, #0
 80095b8:	bf08      	it	eq
 80095ba:	462f      	moveq	r7, r5
 80095bc:	2d10      	cmp	r5, #16
 80095be:	9306      	str	r3, [sp, #24]
 80095c0:	46a8      	mov	r8, r5
 80095c2:	bfa8      	it	ge
 80095c4:	f04f 0810 	movge.w	r8, #16
 80095c8:	f7f6 ff9c 	bl	8000504 <__aeabi_ui2d>
 80095cc:	2d09      	cmp	r5, #9
 80095ce:	4682      	mov	sl, r0
 80095d0:	468b      	mov	fp, r1
 80095d2:	dd13      	ble.n	80095fc <_strtod_l+0x3dc>
 80095d4:	4b7b      	ldr	r3, [pc, #492]	; (80097c4 <_strtod_l+0x5a4>)
 80095d6:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 80095da:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 80095de:	f7f7 f80b 	bl	80005f8 <__aeabi_dmul>
 80095e2:	4682      	mov	sl, r0
 80095e4:	4648      	mov	r0, r9
 80095e6:	468b      	mov	fp, r1
 80095e8:	f7f6 ff8c 	bl	8000504 <__aeabi_ui2d>
 80095ec:	4602      	mov	r2, r0
 80095ee:	460b      	mov	r3, r1
 80095f0:	4650      	mov	r0, sl
 80095f2:	4659      	mov	r1, fp
 80095f4:	f7f6 fe4a 	bl	800028c <__adddf3>
 80095f8:	4682      	mov	sl, r0
 80095fa:	468b      	mov	fp, r1
 80095fc:	2d0f      	cmp	r5, #15
 80095fe:	dc38      	bgt.n	8009672 <_strtod_l+0x452>
 8009600:	9b06      	ldr	r3, [sp, #24]
 8009602:	2b00      	cmp	r3, #0
 8009604:	f43f ae50 	beq.w	80092a8 <_strtod_l+0x88>
 8009608:	dd24      	ble.n	8009654 <_strtod_l+0x434>
 800960a:	2b16      	cmp	r3, #22
 800960c:	dc0b      	bgt.n	8009626 <_strtod_l+0x406>
 800960e:	496d      	ldr	r1, [pc, #436]	; (80097c4 <_strtod_l+0x5a4>)
 8009610:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8009614:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009618:	4652      	mov	r2, sl
 800961a:	465b      	mov	r3, fp
 800961c:	f7f6 ffec 	bl	80005f8 <__aeabi_dmul>
 8009620:	4682      	mov	sl, r0
 8009622:	468b      	mov	fp, r1
 8009624:	e640      	b.n	80092a8 <_strtod_l+0x88>
 8009626:	9a06      	ldr	r2, [sp, #24]
 8009628:	f1c5 0325 	rsb	r3, r5, #37	; 0x25
 800962c:	4293      	cmp	r3, r2
 800962e:	db20      	blt.n	8009672 <_strtod_l+0x452>
 8009630:	4c64      	ldr	r4, [pc, #400]	; (80097c4 <_strtod_l+0x5a4>)
 8009632:	f1c5 050f 	rsb	r5, r5, #15
 8009636:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 800963a:	4652      	mov	r2, sl
 800963c:	465b      	mov	r3, fp
 800963e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009642:	f7f6 ffd9 	bl	80005f8 <__aeabi_dmul>
 8009646:	9b06      	ldr	r3, [sp, #24]
 8009648:	1b5d      	subs	r5, r3, r5
 800964a:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 800964e:	e9d4 2300 	ldrd	r2, r3, [r4]
 8009652:	e7e3      	b.n	800961c <_strtod_l+0x3fc>
 8009654:	9b06      	ldr	r3, [sp, #24]
 8009656:	3316      	adds	r3, #22
 8009658:	db0b      	blt.n	8009672 <_strtod_l+0x452>
 800965a:	9b05      	ldr	r3, [sp, #20]
 800965c:	1b9e      	subs	r6, r3, r6
 800965e:	4b59      	ldr	r3, [pc, #356]	; (80097c4 <_strtod_l+0x5a4>)
 8009660:	eb03 06c6 	add.w	r6, r3, r6, lsl #3
 8009664:	e9d6 2300 	ldrd	r2, r3, [r6]
 8009668:	4650      	mov	r0, sl
 800966a:	4659      	mov	r1, fp
 800966c:	f7f7 f8ee 	bl	800084c <__aeabi_ddiv>
 8009670:	e7d6      	b.n	8009620 <_strtod_l+0x400>
 8009672:	9b06      	ldr	r3, [sp, #24]
 8009674:	eba5 0808 	sub.w	r8, r5, r8
 8009678:	4498      	add	r8, r3
 800967a:	f1b8 0f00 	cmp.w	r8, #0
 800967e:	dd74      	ble.n	800976a <_strtod_l+0x54a>
 8009680:	f018 030f 	ands.w	r3, r8, #15
 8009684:	d00a      	beq.n	800969c <_strtod_l+0x47c>
 8009686:	494f      	ldr	r1, [pc, #316]	; (80097c4 <_strtod_l+0x5a4>)
 8009688:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800968c:	4652      	mov	r2, sl
 800968e:	465b      	mov	r3, fp
 8009690:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009694:	f7f6 ffb0 	bl	80005f8 <__aeabi_dmul>
 8009698:	4682      	mov	sl, r0
 800969a:	468b      	mov	fp, r1
 800969c:	f038 080f 	bics.w	r8, r8, #15
 80096a0:	d04f      	beq.n	8009742 <_strtod_l+0x522>
 80096a2:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 80096a6:	dd22      	ble.n	80096ee <_strtod_l+0x4ce>
 80096a8:	2500      	movs	r5, #0
 80096aa:	462e      	mov	r6, r5
 80096ac:	9507      	str	r5, [sp, #28]
 80096ae:	9505      	str	r5, [sp, #20]
 80096b0:	2322      	movs	r3, #34	; 0x22
 80096b2:	f8df b118 	ldr.w	fp, [pc, #280]	; 80097cc <_strtod_l+0x5ac>
 80096b6:	6023      	str	r3, [r4, #0]
 80096b8:	f04f 0a00 	mov.w	sl, #0
 80096bc:	9b07      	ldr	r3, [sp, #28]
 80096be:	2b00      	cmp	r3, #0
 80096c0:	f43f adf2 	beq.w	80092a8 <_strtod_l+0x88>
 80096c4:	9918      	ldr	r1, [sp, #96]	; 0x60
 80096c6:	4620      	mov	r0, r4
 80096c8:	f001 ff86 	bl	800b5d8 <_Bfree>
 80096cc:	9905      	ldr	r1, [sp, #20]
 80096ce:	4620      	mov	r0, r4
 80096d0:	f001 ff82 	bl	800b5d8 <_Bfree>
 80096d4:	4631      	mov	r1, r6
 80096d6:	4620      	mov	r0, r4
 80096d8:	f001 ff7e 	bl	800b5d8 <_Bfree>
 80096dc:	9907      	ldr	r1, [sp, #28]
 80096de:	4620      	mov	r0, r4
 80096e0:	f001 ff7a 	bl	800b5d8 <_Bfree>
 80096e4:	4629      	mov	r1, r5
 80096e6:	4620      	mov	r0, r4
 80096e8:	f001 ff76 	bl	800b5d8 <_Bfree>
 80096ec:	e5dc      	b.n	80092a8 <_strtod_l+0x88>
 80096ee:	4b36      	ldr	r3, [pc, #216]	; (80097c8 <_strtod_l+0x5a8>)
 80096f0:	9304      	str	r3, [sp, #16]
 80096f2:	2300      	movs	r3, #0
 80096f4:	ea4f 1828 	mov.w	r8, r8, asr #4
 80096f8:	4650      	mov	r0, sl
 80096fa:	4659      	mov	r1, fp
 80096fc:	4699      	mov	r9, r3
 80096fe:	f1b8 0f01 	cmp.w	r8, #1
 8009702:	dc21      	bgt.n	8009748 <_strtod_l+0x528>
 8009704:	b10b      	cbz	r3, 800970a <_strtod_l+0x4ea>
 8009706:	4682      	mov	sl, r0
 8009708:	468b      	mov	fp, r1
 800970a:	4b2f      	ldr	r3, [pc, #188]	; (80097c8 <_strtod_l+0x5a8>)
 800970c:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 8009710:	eb03 09c9 	add.w	r9, r3, r9, lsl #3
 8009714:	4652      	mov	r2, sl
 8009716:	465b      	mov	r3, fp
 8009718:	e9d9 0100 	ldrd	r0, r1, [r9]
 800971c:	f7f6 ff6c 	bl	80005f8 <__aeabi_dmul>
 8009720:	4b2a      	ldr	r3, [pc, #168]	; (80097cc <_strtod_l+0x5ac>)
 8009722:	460a      	mov	r2, r1
 8009724:	400b      	ands	r3, r1
 8009726:	492a      	ldr	r1, [pc, #168]	; (80097d0 <_strtod_l+0x5b0>)
 8009728:	428b      	cmp	r3, r1
 800972a:	4682      	mov	sl, r0
 800972c:	d8bc      	bhi.n	80096a8 <_strtod_l+0x488>
 800972e:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 8009732:	428b      	cmp	r3, r1
 8009734:	bf86      	itte	hi
 8009736:	f8df b09c 	ldrhi.w	fp, [pc, #156]	; 80097d4 <_strtod_l+0x5b4>
 800973a:	f04f 3aff 	movhi.w	sl, #4294967295
 800973e:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 8009742:	2300      	movs	r3, #0
 8009744:	9304      	str	r3, [sp, #16]
 8009746:	e084      	b.n	8009852 <_strtod_l+0x632>
 8009748:	f018 0f01 	tst.w	r8, #1
 800974c:	d005      	beq.n	800975a <_strtod_l+0x53a>
 800974e:	9b04      	ldr	r3, [sp, #16]
 8009750:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009754:	f7f6 ff50 	bl	80005f8 <__aeabi_dmul>
 8009758:	2301      	movs	r3, #1
 800975a:	9a04      	ldr	r2, [sp, #16]
 800975c:	3208      	adds	r2, #8
 800975e:	f109 0901 	add.w	r9, r9, #1
 8009762:	ea4f 0868 	mov.w	r8, r8, asr #1
 8009766:	9204      	str	r2, [sp, #16]
 8009768:	e7c9      	b.n	80096fe <_strtod_l+0x4de>
 800976a:	d0ea      	beq.n	8009742 <_strtod_l+0x522>
 800976c:	f1c8 0800 	rsb	r8, r8, #0
 8009770:	f018 020f 	ands.w	r2, r8, #15
 8009774:	d00a      	beq.n	800978c <_strtod_l+0x56c>
 8009776:	4b13      	ldr	r3, [pc, #76]	; (80097c4 <_strtod_l+0x5a4>)
 8009778:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800977c:	4650      	mov	r0, sl
 800977e:	4659      	mov	r1, fp
 8009780:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009784:	f7f7 f862 	bl	800084c <__aeabi_ddiv>
 8009788:	4682      	mov	sl, r0
 800978a:	468b      	mov	fp, r1
 800978c:	ea5f 1828 	movs.w	r8, r8, asr #4
 8009790:	d0d7      	beq.n	8009742 <_strtod_l+0x522>
 8009792:	f1b8 0f1f 	cmp.w	r8, #31
 8009796:	dd1f      	ble.n	80097d8 <_strtod_l+0x5b8>
 8009798:	2500      	movs	r5, #0
 800979a:	462e      	mov	r6, r5
 800979c:	9507      	str	r5, [sp, #28]
 800979e:	9505      	str	r5, [sp, #20]
 80097a0:	2322      	movs	r3, #34	; 0x22
 80097a2:	f04f 0a00 	mov.w	sl, #0
 80097a6:	f04f 0b00 	mov.w	fp, #0
 80097aa:	6023      	str	r3, [r4, #0]
 80097ac:	e786      	b.n	80096bc <_strtod_l+0x49c>
 80097ae:	bf00      	nop
 80097b0:	0800cb4d 	.word	0x0800cb4d
 80097b4:	0800cb90 	.word	0x0800cb90
 80097b8:	0800cb45 	.word	0x0800cb45
 80097bc:	0800ccd4 	.word	0x0800ccd4
 80097c0:	0800cf80 	.word	0x0800cf80
 80097c4:	0800ce60 	.word	0x0800ce60
 80097c8:	0800ce38 	.word	0x0800ce38
 80097cc:	7ff00000 	.word	0x7ff00000
 80097d0:	7ca00000 	.word	0x7ca00000
 80097d4:	7fefffff 	.word	0x7fefffff
 80097d8:	f018 0310 	ands.w	r3, r8, #16
 80097dc:	bf18      	it	ne
 80097de:	236a      	movne	r3, #106	; 0x6a
 80097e0:	f8df 93ac 	ldr.w	r9, [pc, #940]	; 8009b90 <_strtod_l+0x970>
 80097e4:	9304      	str	r3, [sp, #16]
 80097e6:	4650      	mov	r0, sl
 80097e8:	4659      	mov	r1, fp
 80097ea:	2300      	movs	r3, #0
 80097ec:	f018 0f01 	tst.w	r8, #1
 80097f0:	d004      	beq.n	80097fc <_strtod_l+0x5dc>
 80097f2:	e9d9 2300 	ldrd	r2, r3, [r9]
 80097f6:	f7f6 feff 	bl	80005f8 <__aeabi_dmul>
 80097fa:	2301      	movs	r3, #1
 80097fc:	ea5f 0868 	movs.w	r8, r8, asr #1
 8009800:	f109 0908 	add.w	r9, r9, #8
 8009804:	d1f2      	bne.n	80097ec <_strtod_l+0x5cc>
 8009806:	b10b      	cbz	r3, 800980c <_strtod_l+0x5ec>
 8009808:	4682      	mov	sl, r0
 800980a:	468b      	mov	fp, r1
 800980c:	9b04      	ldr	r3, [sp, #16]
 800980e:	b1c3      	cbz	r3, 8009842 <_strtod_l+0x622>
 8009810:	f3cb 520a 	ubfx	r2, fp, #20, #11
 8009814:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 8009818:	2b00      	cmp	r3, #0
 800981a:	4659      	mov	r1, fp
 800981c:	dd11      	ble.n	8009842 <_strtod_l+0x622>
 800981e:	2b1f      	cmp	r3, #31
 8009820:	f340 8124 	ble.w	8009a6c <_strtod_l+0x84c>
 8009824:	2b34      	cmp	r3, #52	; 0x34
 8009826:	bfde      	ittt	le
 8009828:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 800982c:	f04f 33ff 	movle.w	r3, #4294967295
 8009830:	fa03 f202 	lslle.w	r2, r3, r2
 8009834:	f04f 0a00 	mov.w	sl, #0
 8009838:	bfcc      	ite	gt
 800983a:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 800983e:	ea02 0b01 	andle.w	fp, r2, r1
 8009842:	2200      	movs	r2, #0
 8009844:	2300      	movs	r3, #0
 8009846:	4650      	mov	r0, sl
 8009848:	4659      	mov	r1, fp
 800984a:	f7f7 f93d 	bl	8000ac8 <__aeabi_dcmpeq>
 800984e:	2800      	cmp	r0, #0
 8009850:	d1a2      	bne.n	8009798 <_strtod_l+0x578>
 8009852:	9b07      	ldr	r3, [sp, #28]
 8009854:	9300      	str	r3, [sp, #0]
 8009856:	9908      	ldr	r1, [sp, #32]
 8009858:	462b      	mov	r3, r5
 800985a:	463a      	mov	r2, r7
 800985c:	4620      	mov	r0, r4
 800985e:	f001 ff23 	bl	800b6a8 <__s2b>
 8009862:	9007      	str	r0, [sp, #28]
 8009864:	2800      	cmp	r0, #0
 8009866:	f43f af1f 	beq.w	80096a8 <_strtod_l+0x488>
 800986a:	9b05      	ldr	r3, [sp, #20]
 800986c:	1b9e      	subs	r6, r3, r6
 800986e:	9b06      	ldr	r3, [sp, #24]
 8009870:	2b00      	cmp	r3, #0
 8009872:	bfb4      	ite	lt
 8009874:	4633      	movlt	r3, r6
 8009876:	2300      	movge	r3, #0
 8009878:	930c      	str	r3, [sp, #48]	; 0x30
 800987a:	9b06      	ldr	r3, [sp, #24]
 800987c:	2500      	movs	r5, #0
 800987e:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8009882:	9312      	str	r3, [sp, #72]	; 0x48
 8009884:	462e      	mov	r6, r5
 8009886:	9b07      	ldr	r3, [sp, #28]
 8009888:	4620      	mov	r0, r4
 800988a:	6859      	ldr	r1, [r3, #4]
 800988c:	f001 fe64 	bl	800b558 <_Balloc>
 8009890:	9005      	str	r0, [sp, #20]
 8009892:	2800      	cmp	r0, #0
 8009894:	f43f af0c 	beq.w	80096b0 <_strtod_l+0x490>
 8009898:	9b07      	ldr	r3, [sp, #28]
 800989a:	691a      	ldr	r2, [r3, #16]
 800989c:	3202      	adds	r2, #2
 800989e:	f103 010c 	add.w	r1, r3, #12
 80098a2:	0092      	lsls	r2, r2, #2
 80098a4:	300c      	adds	r0, #12
 80098a6:	f7fe fc94 	bl	80081d2 <memcpy>
 80098aa:	ec4b ab10 	vmov	d0, sl, fp
 80098ae:	aa1a      	add	r2, sp, #104	; 0x68
 80098b0:	a919      	add	r1, sp, #100	; 0x64
 80098b2:	4620      	mov	r0, r4
 80098b4:	f002 fa3e 	bl	800bd34 <__d2b>
 80098b8:	ec4b ab18 	vmov	d8, sl, fp
 80098bc:	9018      	str	r0, [sp, #96]	; 0x60
 80098be:	2800      	cmp	r0, #0
 80098c0:	f43f aef6 	beq.w	80096b0 <_strtod_l+0x490>
 80098c4:	2101      	movs	r1, #1
 80098c6:	4620      	mov	r0, r4
 80098c8:	f001 ff88 	bl	800b7dc <__i2b>
 80098cc:	4606      	mov	r6, r0
 80098ce:	2800      	cmp	r0, #0
 80098d0:	f43f aeee 	beq.w	80096b0 <_strtod_l+0x490>
 80098d4:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80098d6:	9904      	ldr	r1, [sp, #16]
 80098d8:	2b00      	cmp	r3, #0
 80098da:	bfab      	itete	ge
 80098dc:	9a0c      	ldrge	r2, [sp, #48]	; 0x30
 80098de:	9a12      	ldrlt	r2, [sp, #72]	; 0x48
 80098e0:	9f12      	ldrge	r7, [sp, #72]	; 0x48
 80098e2:	f8dd 9030 	ldrlt.w	r9, [sp, #48]	; 0x30
 80098e6:	bfac      	ite	ge
 80098e8:	eb03 0902 	addge.w	r9, r3, r2
 80098ec:	1ad7      	sublt	r7, r2, r3
 80098ee:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 80098f0:	eba3 0801 	sub.w	r8, r3, r1
 80098f4:	4490      	add	r8, r2
 80098f6:	4ba1      	ldr	r3, [pc, #644]	; (8009b7c <_strtod_l+0x95c>)
 80098f8:	f108 38ff 	add.w	r8, r8, #4294967295
 80098fc:	4598      	cmp	r8, r3
 80098fe:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 8009902:	f280 80c7 	bge.w	8009a94 <_strtod_l+0x874>
 8009906:	eba3 0308 	sub.w	r3, r3, r8
 800990a:	2b1f      	cmp	r3, #31
 800990c:	eba2 0203 	sub.w	r2, r2, r3
 8009910:	f04f 0101 	mov.w	r1, #1
 8009914:	f300 80b1 	bgt.w	8009a7a <_strtod_l+0x85a>
 8009918:	fa01 f303 	lsl.w	r3, r1, r3
 800991c:	930d      	str	r3, [sp, #52]	; 0x34
 800991e:	2300      	movs	r3, #0
 8009920:	9308      	str	r3, [sp, #32]
 8009922:	eb09 0802 	add.w	r8, r9, r2
 8009926:	9b04      	ldr	r3, [sp, #16]
 8009928:	45c1      	cmp	r9, r8
 800992a:	4417      	add	r7, r2
 800992c:	441f      	add	r7, r3
 800992e:	464b      	mov	r3, r9
 8009930:	bfa8      	it	ge
 8009932:	4643      	movge	r3, r8
 8009934:	42bb      	cmp	r3, r7
 8009936:	bfa8      	it	ge
 8009938:	463b      	movge	r3, r7
 800993a:	2b00      	cmp	r3, #0
 800993c:	bfc2      	ittt	gt
 800993e:	eba8 0803 	subgt.w	r8, r8, r3
 8009942:	1aff      	subgt	r7, r7, r3
 8009944:	eba9 0903 	subgt.w	r9, r9, r3
 8009948:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800994a:	2b00      	cmp	r3, #0
 800994c:	dd17      	ble.n	800997e <_strtod_l+0x75e>
 800994e:	4631      	mov	r1, r6
 8009950:	461a      	mov	r2, r3
 8009952:	4620      	mov	r0, r4
 8009954:	f002 f802 	bl	800b95c <__pow5mult>
 8009958:	4606      	mov	r6, r0
 800995a:	2800      	cmp	r0, #0
 800995c:	f43f aea8 	beq.w	80096b0 <_strtod_l+0x490>
 8009960:	4601      	mov	r1, r0
 8009962:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8009964:	4620      	mov	r0, r4
 8009966:	f001 ff4f 	bl	800b808 <__multiply>
 800996a:	900b      	str	r0, [sp, #44]	; 0x2c
 800996c:	2800      	cmp	r0, #0
 800996e:	f43f ae9f 	beq.w	80096b0 <_strtod_l+0x490>
 8009972:	9918      	ldr	r1, [sp, #96]	; 0x60
 8009974:	4620      	mov	r0, r4
 8009976:	f001 fe2f 	bl	800b5d8 <_Bfree>
 800997a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800997c:	9318      	str	r3, [sp, #96]	; 0x60
 800997e:	f1b8 0f00 	cmp.w	r8, #0
 8009982:	f300 808c 	bgt.w	8009a9e <_strtod_l+0x87e>
 8009986:	9b06      	ldr	r3, [sp, #24]
 8009988:	2b00      	cmp	r3, #0
 800998a:	dd08      	ble.n	800999e <_strtod_l+0x77e>
 800998c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800998e:	9905      	ldr	r1, [sp, #20]
 8009990:	4620      	mov	r0, r4
 8009992:	f001 ffe3 	bl	800b95c <__pow5mult>
 8009996:	9005      	str	r0, [sp, #20]
 8009998:	2800      	cmp	r0, #0
 800999a:	f43f ae89 	beq.w	80096b0 <_strtod_l+0x490>
 800999e:	2f00      	cmp	r7, #0
 80099a0:	dd08      	ble.n	80099b4 <_strtod_l+0x794>
 80099a2:	9905      	ldr	r1, [sp, #20]
 80099a4:	463a      	mov	r2, r7
 80099a6:	4620      	mov	r0, r4
 80099a8:	f002 f832 	bl	800ba10 <__lshift>
 80099ac:	9005      	str	r0, [sp, #20]
 80099ae:	2800      	cmp	r0, #0
 80099b0:	f43f ae7e 	beq.w	80096b0 <_strtod_l+0x490>
 80099b4:	f1b9 0f00 	cmp.w	r9, #0
 80099b8:	dd08      	ble.n	80099cc <_strtod_l+0x7ac>
 80099ba:	4631      	mov	r1, r6
 80099bc:	464a      	mov	r2, r9
 80099be:	4620      	mov	r0, r4
 80099c0:	f002 f826 	bl	800ba10 <__lshift>
 80099c4:	4606      	mov	r6, r0
 80099c6:	2800      	cmp	r0, #0
 80099c8:	f43f ae72 	beq.w	80096b0 <_strtod_l+0x490>
 80099cc:	9a05      	ldr	r2, [sp, #20]
 80099ce:	9918      	ldr	r1, [sp, #96]	; 0x60
 80099d0:	4620      	mov	r0, r4
 80099d2:	f002 f8a9 	bl	800bb28 <__mdiff>
 80099d6:	4605      	mov	r5, r0
 80099d8:	2800      	cmp	r0, #0
 80099da:	f43f ae69 	beq.w	80096b0 <_strtod_l+0x490>
 80099de:	68c3      	ldr	r3, [r0, #12]
 80099e0:	930b      	str	r3, [sp, #44]	; 0x2c
 80099e2:	2300      	movs	r3, #0
 80099e4:	60c3      	str	r3, [r0, #12]
 80099e6:	4631      	mov	r1, r6
 80099e8:	f002 f882 	bl	800baf0 <__mcmp>
 80099ec:	2800      	cmp	r0, #0
 80099ee:	da60      	bge.n	8009ab2 <_strtod_l+0x892>
 80099f0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80099f2:	ea53 030a 	orrs.w	r3, r3, sl
 80099f6:	f040 8082 	bne.w	8009afe <_strtod_l+0x8de>
 80099fa:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80099fe:	2b00      	cmp	r3, #0
 8009a00:	d17d      	bne.n	8009afe <_strtod_l+0x8de>
 8009a02:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8009a06:	0d1b      	lsrs	r3, r3, #20
 8009a08:	051b      	lsls	r3, r3, #20
 8009a0a:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 8009a0e:	d976      	bls.n	8009afe <_strtod_l+0x8de>
 8009a10:	696b      	ldr	r3, [r5, #20]
 8009a12:	b913      	cbnz	r3, 8009a1a <_strtod_l+0x7fa>
 8009a14:	692b      	ldr	r3, [r5, #16]
 8009a16:	2b01      	cmp	r3, #1
 8009a18:	dd71      	ble.n	8009afe <_strtod_l+0x8de>
 8009a1a:	4629      	mov	r1, r5
 8009a1c:	2201      	movs	r2, #1
 8009a1e:	4620      	mov	r0, r4
 8009a20:	f001 fff6 	bl	800ba10 <__lshift>
 8009a24:	4631      	mov	r1, r6
 8009a26:	4605      	mov	r5, r0
 8009a28:	f002 f862 	bl	800baf0 <__mcmp>
 8009a2c:	2800      	cmp	r0, #0
 8009a2e:	dd66      	ble.n	8009afe <_strtod_l+0x8de>
 8009a30:	9904      	ldr	r1, [sp, #16]
 8009a32:	4a53      	ldr	r2, [pc, #332]	; (8009b80 <_strtod_l+0x960>)
 8009a34:	465b      	mov	r3, fp
 8009a36:	2900      	cmp	r1, #0
 8009a38:	f000 8081 	beq.w	8009b3e <_strtod_l+0x91e>
 8009a3c:	ea02 010b 	and.w	r1, r2, fp
 8009a40:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 8009a44:	dc7b      	bgt.n	8009b3e <_strtod_l+0x91e>
 8009a46:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 8009a4a:	f77f aea9 	ble.w	80097a0 <_strtod_l+0x580>
 8009a4e:	4b4d      	ldr	r3, [pc, #308]	; (8009b84 <_strtod_l+0x964>)
 8009a50:	4650      	mov	r0, sl
 8009a52:	4659      	mov	r1, fp
 8009a54:	2200      	movs	r2, #0
 8009a56:	f7f6 fdcf 	bl	80005f8 <__aeabi_dmul>
 8009a5a:	460b      	mov	r3, r1
 8009a5c:	4303      	orrs	r3, r0
 8009a5e:	bf08      	it	eq
 8009a60:	2322      	moveq	r3, #34	; 0x22
 8009a62:	4682      	mov	sl, r0
 8009a64:	468b      	mov	fp, r1
 8009a66:	bf08      	it	eq
 8009a68:	6023      	streq	r3, [r4, #0]
 8009a6a:	e62b      	b.n	80096c4 <_strtod_l+0x4a4>
 8009a6c:	f04f 32ff 	mov.w	r2, #4294967295
 8009a70:	fa02 f303 	lsl.w	r3, r2, r3
 8009a74:	ea03 0a0a 	and.w	sl, r3, sl
 8009a78:	e6e3      	b.n	8009842 <_strtod_l+0x622>
 8009a7a:	f1c8 487f 	rsb	r8, r8, #4278190080	; 0xff000000
 8009a7e:	f508 087f 	add.w	r8, r8, #16711680	; 0xff0000
 8009a82:	f508 487b 	add.w	r8, r8, #64256	; 0xfb00
 8009a86:	f108 08e2 	add.w	r8, r8, #226	; 0xe2
 8009a8a:	fa01 f308 	lsl.w	r3, r1, r8
 8009a8e:	9308      	str	r3, [sp, #32]
 8009a90:	910d      	str	r1, [sp, #52]	; 0x34
 8009a92:	e746      	b.n	8009922 <_strtod_l+0x702>
 8009a94:	2300      	movs	r3, #0
 8009a96:	9308      	str	r3, [sp, #32]
 8009a98:	2301      	movs	r3, #1
 8009a9a:	930d      	str	r3, [sp, #52]	; 0x34
 8009a9c:	e741      	b.n	8009922 <_strtod_l+0x702>
 8009a9e:	9918      	ldr	r1, [sp, #96]	; 0x60
 8009aa0:	4642      	mov	r2, r8
 8009aa2:	4620      	mov	r0, r4
 8009aa4:	f001 ffb4 	bl	800ba10 <__lshift>
 8009aa8:	9018      	str	r0, [sp, #96]	; 0x60
 8009aaa:	2800      	cmp	r0, #0
 8009aac:	f47f af6b 	bne.w	8009986 <_strtod_l+0x766>
 8009ab0:	e5fe      	b.n	80096b0 <_strtod_l+0x490>
 8009ab2:	465f      	mov	r7, fp
 8009ab4:	d16e      	bne.n	8009b94 <_strtod_l+0x974>
 8009ab6:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8009ab8:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8009abc:	b342      	cbz	r2, 8009b10 <_strtod_l+0x8f0>
 8009abe:	4a32      	ldr	r2, [pc, #200]	; (8009b88 <_strtod_l+0x968>)
 8009ac0:	4293      	cmp	r3, r2
 8009ac2:	d128      	bne.n	8009b16 <_strtod_l+0x8f6>
 8009ac4:	9b04      	ldr	r3, [sp, #16]
 8009ac6:	4651      	mov	r1, sl
 8009ac8:	b1eb      	cbz	r3, 8009b06 <_strtod_l+0x8e6>
 8009aca:	4b2d      	ldr	r3, [pc, #180]	; (8009b80 <_strtod_l+0x960>)
 8009acc:	403b      	ands	r3, r7
 8009ace:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8009ad2:	f04f 32ff 	mov.w	r2, #4294967295
 8009ad6:	d819      	bhi.n	8009b0c <_strtod_l+0x8ec>
 8009ad8:	0d1b      	lsrs	r3, r3, #20
 8009ada:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8009ade:	fa02 f303 	lsl.w	r3, r2, r3
 8009ae2:	4299      	cmp	r1, r3
 8009ae4:	d117      	bne.n	8009b16 <_strtod_l+0x8f6>
 8009ae6:	4b29      	ldr	r3, [pc, #164]	; (8009b8c <_strtod_l+0x96c>)
 8009ae8:	429f      	cmp	r7, r3
 8009aea:	d102      	bne.n	8009af2 <_strtod_l+0x8d2>
 8009aec:	3101      	adds	r1, #1
 8009aee:	f43f addf 	beq.w	80096b0 <_strtod_l+0x490>
 8009af2:	4b23      	ldr	r3, [pc, #140]	; (8009b80 <_strtod_l+0x960>)
 8009af4:	403b      	ands	r3, r7
 8009af6:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 8009afa:	f04f 0a00 	mov.w	sl, #0
 8009afe:	9b04      	ldr	r3, [sp, #16]
 8009b00:	2b00      	cmp	r3, #0
 8009b02:	d1a4      	bne.n	8009a4e <_strtod_l+0x82e>
 8009b04:	e5de      	b.n	80096c4 <_strtod_l+0x4a4>
 8009b06:	f04f 33ff 	mov.w	r3, #4294967295
 8009b0a:	e7ea      	b.n	8009ae2 <_strtod_l+0x8c2>
 8009b0c:	4613      	mov	r3, r2
 8009b0e:	e7e8      	b.n	8009ae2 <_strtod_l+0x8c2>
 8009b10:	ea53 030a 	orrs.w	r3, r3, sl
 8009b14:	d08c      	beq.n	8009a30 <_strtod_l+0x810>
 8009b16:	9b08      	ldr	r3, [sp, #32]
 8009b18:	b1db      	cbz	r3, 8009b52 <_strtod_l+0x932>
 8009b1a:	423b      	tst	r3, r7
 8009b1c:	d0ef      	beq.n	8009afe <_strtod_l+0x8de>
 8009b1e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009b20:	9a04      	ldr	r2, [sp, #16]
 8009b22:	4650      	mov	r0, sl
 8009b24:	4659      	mov	r1, fp
 8009b26:	b1c3      	cbz	r3, 8009b5a <_strtod_l+0x93a>
 8009b28:	f7ff fb5b 	bl	80091e2 <sulp>
 8009b2c:	4602      	mov	r2, r0
 8009b2e:	460b      	mov	r3, r1
 8009b30:	ec51 0b18 	vmov	r0, r1, d8
 8009b34:	f7f6 fbaa 	bl	800028c <__adddf3>
 8009b38:	4682      	mov	sl, r0
 8009b3a:	468b      	mov	fp, r1
 8009b3c:	e7df      	b.n	8009afe <_strtod_l+0x8de>
 8009b3e:	4013      	ands	r3, r2
 8009b40:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 8009b44:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 8009b48:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 8009b4c:	f04f 3aff 	mov.w	sl, #4294967295
 8009b50:	e7d5      	b.n	8009afe <_strtod_l+0x8de>
 8009b52:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009b54:	ea13 0f0a 	tst.w	r3, sl
 8009b58:	e7e0      	b.n	8009b1c <_strtod_l+0x8fc>
 8009b5a:	f7ff fb42 	bl	80091e2 <sulp>
 8009b5e:	4602      	mov	r2, r0
 8009b60:	460b      	mov	r3, r1
 8009b62:	ec51 0b18 	vmov	r0, r1, d8
 8009b66:	f7f6 fb8f 	bl	8000288 <__aeabi_dsub>
 8009b6a:	2200      	movs	r2, #0
 8009b6c:	2300      	movs	r3, #0
 8009b6e:	4682      	mov	sl, r0
 8009b70:	468b      	mov	fp, r1
 8009b72:	f7f6 ffa9 	bl	8000ac8 <__aeabi_dcmpeq>
 8009b76:	2800      	cmp	r0, #0
 8009b78:	d0c1      	beq.n	8009afe <_strtod_l+0x8de>
 8009b7a:	e611      	b.n	80097a0 <_strtod_l+0x580>
 8009b7c:	fffffc02 	.word	0xfffffc02
 8009b80:	7ff00000 	.word	0x7ff00000
 8009b84:	39500000 	.word	0x39500000
 8009b88:	000fffff 	.word	0x000fffff
 8009b8c:	7fefffff 	.word	0x7fefffff
 8009b90:	0800cba8 	.word	0x0800cba8
 8009b94:	4631      	mov	r1, r6
 8009b96:	4628      	mov	r0, r5
 8009b98:	f002 f928 	bl	800bdec <__ratio>
 8009b9c:	ec59 8b10 	vmov	r8, r9, d0
 8009ba0:	ee10 0a10 	vmov	r0, s0
 8009ba4:	2200      	movs	r2, #0
 8009ba6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8009baa:	4649      	mov	r1, r9
 8009bac:	f7f6 ffa0 	bl	8000af0 <__aeabi_dcmple>
 8009bb0:	2800      	cmp	r0, #0
 8009bb2:	d07a      	beq.n	8009caa <_strtod_l+0xa8a>
 8009bb4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009bb6:	2b00      	cmp	r3, #0
 8009bb8:	d04a      	beq.n	8009c50 <_strtod_l+0xa30>
 8009bba:	4b95      	ldr	r3, [pc, #596]	; (8009e10 <_strtod_l+0xbf0>)
 8009bbc:	2200      	movs	r2, #0
 8009bbe:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8009bc2:	f8df 924c 	ldr.w	r9, [pc, #588]	; 8009e10 <_strtod_l+0xbf0>
 8009bc6:	f04f 0800 	mov.w	r8, #0
 8009bca:	4b92      	ldr	r3, [pc, #584]	; (8009e14 <_strtod_l+0xbf4>)
 8009bcc:	403b      	ands	r3, r7
 8009bce:	930d      	str	r3, [sp, #52]	; 0x34
 8009bd0:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8009bd2:	4b91      	ldr	r3, [pc, #580]	; (8009e18 <_strtod_l+0xbf8>)
 8009bd4:	429a      	cmp	r2, r3
 8009bd6:	f040 80b0 	bne.w	8009d3a <_strtod_l+0xb1a>
 8009bda:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8009bde:	f1a7 7b54 	sub.w	fp, r7, #55574528	; 0x3500000
 8009be2:	ec4b ab10 	vmov	d0, sl, fp
 8009be6:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8009bea:	f002 f827 	bl	800bc3c <__ulp>
 8009bee:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8009bf2:	ec53 2b10 	vmov	r2, r3, d0
 8009bf6:	f7f6 fcff 	bl	80005f8 <__aeabi_dmul>
 8009bfa:	4652      	mov	r2, sl
 8009bfc:	465b      	mov	r3, fp
 8009bfe:	f7f6 fb45 	bl	800028c <__adddf3>
 8009c02:	460b      	mov	r3, r1
 8009c04:	4983      	ldr	r1, [pc, #524]	; (8009e14 <_strtod_l+0xbf4>)
 8009c06:	4a85      	ldr	r2, [pc, #532]	; (8009e1c <_strtod_l+0xbfc>)
 8009c08:	4019      	ands	r1, r3
 8009c0a:	4291      	cmp	r1, r2
 8009c0c:	4682      	mov	sl, r0
 8009c0e:	d960      	bls.n	8009cd2 <_strtod_l+0xab2>
 8009c10:	ee18 3a90 	vmov	r3, s17
 8009c14:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 8009c18:	4293      	cmp	r3, r2
 8009c1a:	d104      	bne.n	8009c26 <_strtod_l+0xa06>
 8009c1c:	ee18 3a10 	vmov	r3, s16
 8009c20:	3301      	adds	r3, #1
 8009c22:	f43f ad45 	beq.w	80096b0 <_strtod_l+0x490>
 8009c26:	f8df b200 	ldr.w	fp, [pc, #512]	; 8009e28 <_strtod_l+0xc08>
 8009c2a:	f04f 3aff 	mov.w	sl, #4294967295
 8009c2e:	9918      	ldr	r1, [sp, #96]	; 0x60
 8009c30:	4620      	mov	r0, r4
 8009c32:	f001 fcd1 	bl	800b5d8 <_Bfree>
 8009c36:	9905      	ldr	r1, [sp, #20]
 8009c38:	4620      	mov	r0, r4
 8009c3a:	f001 fccd 	bl	800b5d8 <_Bfree>
 8009c3e:	4631      	mov	r1, r6
 8009c40:	4620      	mov	r0, r4
 8009c42:	f001 fcc9 	bl	800b5d8 <_Bfree>
 8009c46:	4629      	mov	r1, r5
 8009c48:	4620      	mov	r0, r4
 8009c4a:	f001 fcc5 	bl	800b5d8 <_Bfree>
 8009c4e:	e61a      	b.n	8009886 <_strtod_l+0x666>
 8009c50:	f1ba 0f00 	cmp.w	sl, #0
 8009c54:	d11b      	bne.n	8009c8e <_strtod_l+0xa6e>
 8009c56:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8009c5a:	b9f3      	cbnz	r3, 8009c9a <_strtod_l+0xa7a>
 8009c5c:	4b6c      	ldr	r3, [pc, #432]	; (8009e10 <_strtod_l+0xbf0>)
 8009c5e:	2200      	movs	r2, #0
 8009c60:	4640      	mov	r0, r8
 8009c62:	4649      	mov	r1, r9
 8009c64:	f7f6 ff3a 	bl	8000adc <__aeabi_dcmplt>
 8009c68:	b9d0      	cbnz	r0, 8009ca0 <_strtod_l+0xa80>
 8009c6a:	4640      	mov	r0, r8
 8009c6c:	4649      	mov	r1, r9
 8009c6e:	4b6c      	ldr	r3, [pc, #432]	; (8009e20 <_strtod_l+0xc00>)
 8009c70:	2200      	movs	r2, #0
 8009c72:	f7f6 fcc1 	bl	80005f8 <__aeabi_dmul>
 8009c76:	4680      	mov	r8, r0
 8009c78:	4689      	mov	r9, r1
 8009c7a:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 8009c7e:	f8cd 8050 	str.w	r8, [sp, #80]	; 0x50
 8009c82:	9315      	str	r3, [sp, #84]	; 0x54
 8009c84:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 8009c88:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8009c8c:	e79d      	b.n	8009bca <_strtod_l+0x9aa>
 8009c8e:	f1ba 0f01 	cmp.w	sl, #1
 8009c92:	d102      	bne.n	8009c9a <_strtod_l+0xa7a>
 8009c94:	2f00      	cmp	r7, #0
 8009c96:	f43f ad83 	beq.w	80097a0 <_strtod_l+0x580>
 8009c9a:	4b62      	ldr	r3, [pc, #392]	; (8009e24 <_strtod_l+0xc04>)
 8009c9c:	2200      	movs	r2, #0
 8009c9e:	e78e      	b.n	8009bbe <_strtod_l+0x99e>
 8009ca0:	f8df 917c 	ldr.w	r9, [pc, #380]	; 8009e20 <_strtod_l+0xc00>
 8009ca4:	f04f 0800 	mov.w	r8, #0
 8009ca8:	e7e7      	b.n	8009c7a <_strtod_l+0xa5a>
 8009caa:	4b5d      	ldr	r3, [pc, #372]	; (8009e20 <_strtod_l+0xc00>)
 8009cac:	4640      	mov	r0, r8
 8009cae:	4649      	mov	r1, r9
 8009cb0:	2200      	movs	r2, #0
 8009cb2:	f7f6 fca1 	bl	80005f8 <__aeabi_dmul>
 8009cb6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009cb8:	4680      	mov	r8, r0
 8009cba:	4689      	mov	r9, r1
 8009cbc:	b933      	cbnz	r3, 8009ccc <_strtod_l+0xaac>
 8009cbe:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8009cc2:	900e      	str	r0, [sp, #56]	; 0x38
 8009cc4:	930f      	str	r3, [sp, #60]	; 0x3c
 8009cc6:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 8009cca:	e7dd      	b.n	8009c88 <_strtod_l+0xa68>
 8009ccc:	e9cd 890e 	strd	r8, r9, [sp, #56]	; 0x38
 8009cd0:	e7f9      	b.n	8009cc6 <_strtod_l+0xaa6>
 8009cd2:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 8009cd6:	9b04      	ldr	r3, [sp, #16]
 8009cd8:	2b00      	cmp	r3, #0
 8009cda:	d1a8      	bne.n	8009c2e <_strtod_l+0xa0e>
 8009cdc:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8009ce0:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8009ce2:	0d1b      	lsrs	r3, r3, #20
 8009ce4:	051b      	lsls	r3, r3, #20
 8009ce6:	429a      	cmp	r2, r3
 8009ce8:	d1a1      	bne.n	8009c2e <_strtod_l+0xa0e>
 8009cea:	4640      	mov	r0, r8
 8009cec:	4649      	mov	r1, r9
 8009cee:	f7f6 ffe3 	bl	8000cb8 <__aeabi_d2lz>
 8009cf2:	f7f6 fc53 	bl	800059c <__aeabi_l2d>
 8009cf6:	4602      	mov	r2, r0
 8009cf8:	460b      	mov	r3, r1
 8009cfa:	4640      	mov	r0, r8
 8009cfc:	4649      	mov	r1, r9
 8009cfe:	f7f6 fac3 	bl	8000288 <__aeabi_dsub>
 8009d02:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8009d04:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8009d08:	ea43 030a 	orr.w	r3, r3, sl
 8009d0c:	4313      	orrs	r3, r2
 8009d0e:	4680      	mov	r8, r0
 8009d10:	4689      	mov	r9, r1
 8009d12:	d055      	beq.n	8009dc0 <_strtod_l+0xba0>
 8009d14:	a336      	add	r3, pc, #216	; (adr r3, 8009df0 <_strtod_l+0xbd0>)
 8009d16:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009d1a:	f7f6 fedf 	bl	8000adc <__aeabi_dcmplt>
 8009d1e:	2800      	cmp	r0, #0
 8009d20:	f47f acd0 	bne.w	80096c4 <_strtod_l+0x4a4>
 8009d24:	a334      	add	r3, pc, #208	; (adr r3, 8009df8 <_strtod_l+0xbd8>)
 8009d26:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009d2a:	4640      	mov	r0, r8
 8009d2c:	4649      	mov	r1, r9
 8009d2e:	f7f6 fef3 	bl	8000b18 <__aeabi_dcmpgt>
 8009d32:	2800      	cmp	r0, #0
 8009d34:	f43f af7b 	beq.w	8009c2e <_strtod_l+0xa0e>
 8009d38:	e4c4      	b.n	80096c4 <_strtod_l+0x4a4>
 8009d3a:	9b04      	ldr	r3, [sp, #16]
 8009d3c:	b333      	cbz	r3, 8009d8c <_strtod_l+0xb6c>
 8009d3e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009d40:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8009d44:	d822      	bhi.n	8009d8c <_strtod_l+0xb6c>
 8009d46:	a32e      	add	r3, pc, #184	; (adr r3, 8009e00 <_strtod_l+0xbe0>)
 8009d48:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009d4c:	4640      	mov	r0, r8
 8009d4e:	4649      	mov	r1, r9
 8009d50:	f7f6 fece 	bl	8000af0 <__aeabi_dcmple>
 8009d54:	b1a0      	cbz	r0, 8009d80 <_strtod_l+0xb60>
 8009d56:	4649      	mov	r1, r9
 8009d58:	4640      	mov	r0, r8
 8009d5a:	f7f6 ff25 	bl	8000ba8 <__aeabi_d2uiz>
 8009d5e:	2801      	cmp	r0, #1
 8009d60:	bf38      	it	cc
 8009d62:	2001      	movcc	r0, #1
 8009d64:	f7f6 fbce 	bl	8000504 <__aeabi_ui2d>
 8009d68:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009d6a:	4680      	mov	r8, r0
 8009d6c:	4689      	mov	r9, r1
 8009d6e:	bb23      	cbnz	r3, 8009dba <_strtod_l+0xb9a>
 8009d70:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8009d74:	9010      	str	r0, [sp, #64]	; 0x40
 8009d76:	9311      	str	r3, [sp, #68]	; 0x44
 8009d78:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8009d7c:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8009d80:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009d82:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8009d84:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 8009d88:	1a9b      	subs	r3, r3, r2
 8009d8a:	9309      	str	r3, [sp, #36]	; 0x24
 8009d8c:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8009d90:	eeb0 0a48 	vmov.f32	s0, s16
 8009d94:	eef0 0a68 	vmov.f32	s1, s17
 8009d98:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8009d9c:	f001 ff4e 	bl	800bc3c <__ulp>
 8009da0:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8009da4:	ec53 2b10 	vmov	r2, r3, d0
 8009da8:	f7f6 fc26 	bl	80005f8 <__aeabi_dmul>
 8009dac:	ec53 2b18 	vmov	r2, r3, d8
 8009db0:	f7f6 fa6c 	bl	800028c <__adddf3>
 8009db4:	4682      	mov	sl, r0
 8009db6:	468b      	mov	fp, r1
 8009db8:	e78d      	b.n	8009cd6 <_strtod_l+0xab6>
 8009dba:	e9cd 8910 	strd	r8, r9, [sp, #64]	; 0x40
 8009dbe:	e7db      	b.n	8009d78 <_strtod_l+0xb58>
 8009dc0:	a311      	add	r3, pc, #68	; (adr r3, 8009e08 <_strtod_l+0xbe8>)
 8009dc2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009dc6:	f7f6 fe89 	bl	8000adc <__aeabi_dcmplt>
 8009dca:	e7b2      	b.n	8009d32 <_strtod_l+0xb12>
 8009dcc:	2300      	movs	r3, #0
 8009dce:	930a      	str	r3, [sp, #40]	; 0x28
 8009dd0:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8009dd2:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8009dd4:	6013      	str	r3, [r2, #0]
 8009dd6:	f7ff ba6b 	b.w	80092b0 <_strtod_l+0x90>
 8009dda:	2a65      	cmp	r2, #101	; 0x65
 8009ddc:	f43f ab5f 	beq.w	800949e <_strtod_l+0x27e>
 8009de0:	2a45      	cmp	r2, #69	; 0x45
 8009de2:	f43f ab5c 	beq.w	800949e <_strtod_l+0x27e>
 8009de6:	2301      	movs	r3, #1
 8009de8:	f7ff bb94 	b.w	8009514 <_strtod_l+0x2f4>
 8009dec:	f3af 8000 	nop.w
 8009df0:	94a03595 	.word	0x94a03595
 8009df4:	3fdfffff 	.word	0x3fdfffff
 8009df8:	35afe535 	.word	0x35afe535
 8009dfc:	3fe00000 	.word	0x3fe00000
 8009e00:	ffc00000 	.word	0xffc00000
 8009e04:	41dfffff 	.word	0x41dfffff
 8009e08:	94a03595 	.word	0x94a03595
 8009e0c:	3fcfffff 	.word	0x3fcfffff
 8009e10:	3ff00000 	.word	0x3ff00000
 8009e14:	7ff00000 	.word	0x7ff00000
 8009e18:	7fe00000 	.word	0x7fe00000
 8009e1c:	7c9fffff 	.word	0x7c9fffff
 8009e20:	3fe00000 	.word	0x3fe00000
 8009e24:	bff00000 	.word	0xbff00000
 8009e28:	7fefffff 	.word	0x7fefffff

08009e2c <_strtod_r>:
 8009e2c:	4b01      	ldr	r3, [pc, #4]	; (8009e34 <_strtod_r+0x8>)
 8009e2e:	f7ff b9f7 	b.w	8009220 <_strtod_l>
 8009e32:	bf00      	nop
 8009e34:	20000078 	.word	0x20000078

08009e38 <_strtol_l.constprop.0>:
 8009e38:	2b01      	cmp	r3, #1
 8009e3a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009e3e:	d001      	beq.n	8009e44 <_strtol_l.constprop.0+0xc>
 8009e40:	2b24      	cmp	r3, #36	; 0x24
 8009e42:	d906      	bls.n	8009e52 <_strtol_l.constprop.0+0x1a>
 8009e44:	f7fe f8a2 	bl	8007f8c <__errno>
 8009e48:	2316      	movs	r3, #22
 8009e4a:	6003      	str	r3, [r0, #0]
 8009e4c:	2000      	movs	r0, #0
 8009e4e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009e52:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 8009f38 <_strtol_l.constprop.0+0x100>
 8009e56:	460d      	mov	r5, r1
 8009e58:	462e      	mov	r6, r5
 8009e5a:	f815 4b01 	ldrb.w	r4, [r5], #1
 8009e5e:	f814 700c 	ldrb.w	r7, [r4, ip]
 8009e62:	f017 0708 	ands.w	r7, r7, #8
 8009e66:	d1f7      	bne.n	8009e58 <_strtol_l.constprop.0+0x20>
 8009e68:	2c2d      	cmp	r4, #45	; 0x2d
 8009e6a:	d132      	bne.n	8009ed2 <_strtol_l.constprop.0+0x9a>
 8009e6c:	782c      	ldrb	r4, [r5, #0]
 8009e6e:	2701      	movs	r7, #1
 8009e70:	1cb5      	adds	r5, r6, #2
 8009e72:	2b00      	cmp	r3, #0
 8009e74:	d05b      	beq.n	8009f2e <_strtol_l.constprop.0+0xf6>
 8009e76:	2b10      	cmp	r3, #16
 8009e78:	d109      	bne.n	8009e8e <_strtol_l.constprop.0+0x56>
 8009e7a:	2c30      	cmp	r4, #48	; 0x30
 8009e7c:	d107      	bne.n	8009e8e <_strtol_l.constprop.0+0x56>
 8009e7e:	782c      	ldrb	r4, [r5, #0]
 8009e80:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 8009e84:	2c58      	cmp	r4, #88	; 0x58
 8009e86:	d14d      	bne.n	8009f24 <_strtol_l.constprop.0+0xec>
 8009e88:	786c      	ldrb	r4, [r5, #1]
 8009e8a:	2310      	movs	r3, #16
 8009e8c:	3502      	adds	r5, #2
 8009e8e:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 8009e92:	f108 38ff 	add.w	r8, r8, #4294967295
 8009e96:	f04f 0c00 	mov.w	ip, #0
 8009e9a:	fbb8 f9f3 	udiv	r9, r8, r3
 8009e9e:	4666      	mov	r6, ip
 8009ea0:	fb03 8a19 	mls	sl, r3, r9, r8
 8009ea4:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
 8009ea8:	f1be 0f09 	cmp.w	lr, #9
 8009eac:	d816      	bhi.n	8009edc <_strtol_l.constprop.0+0xa4>
 8009eae:	4674      	mov	r4, lr
 8009eb0:	42a3      	cmp	r3, r4
 8009eb2:	dd24      	ble.n	8009efe <_strtol_l.constprop.0+0xc6>
 8009eb4:	f1bc 0f00 	cmp.w	ip, #0
 8009eb8:	db1e      	blt.n	8009ef8 <_strtol_l.constprop.0+0xc0>
 8009eba:	45b1      	cmp	r9, r6
 8009ebc:	d31c      	bcc.n	8009ef8 <_strtol_l.constprop.0+0xc0>
 8009ebe:	d101      	bne.n	8009ec4 <_strtol_l.constprop.0+0x8c>
 8009ec0:	45a2      	cmp	sl, r4
 8009ec2:	db19      	blt.n	8009ef8 <_strtol_l.constprop.0+0xc0>
 8009ec4:	fb06 4603 	mla	r6, r6, r3, r4
 8009ec8:	f04f 0c01 	mov.w	ip, #1
 8009ecc:	f815 4b01 	ldrb.w	r4, [r5], #1
 8009ed0:	e7e8      	b.n	8009ea4 <_strtol_l.constprop.0+0x6c>
 8009ed2:	2c2b      	cmp	r4, #43	; 0x2b
 8009ed4:	bf04      	itt	eq
 8009ed6:	782c      	ldrbeq	r4, [r5, #0]
 8009ed8:	1cb5      	addeq	r5, r6, #2
 8009eda:	e7ca      	b.n	8009e72 <_strtol_l.constprop.0+0x3a>
 8009edc:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
 8009ee0:	f1be 0f19 	cmp.w	lr, #25
 8009ee4:	d801      	bhi.n	8009eea <_strtol_l.constprop.0+0xb2>
 8009ee6:	3c37      	subs	r4, #55	; 0x37
 8009ee8:	e7e2      	b.n	8009eb0 <_strtol_l.constprop.0+0x78>
 8009eea:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
 8009eee:	f1be 0f19 	cmp.w	lr, #25
 8009ef2:	d804      	bhi.n	8009efe <_strtol_l.constprop.0+0xc6>
 8009ef4:	3c57      	subs	r4, #87	; 0x57
 8009ef6:	e7db      	b.n	8009eb0 <_strtol_l.constprop.0+0x78>
 8009ef8:	f04f 3cff 	mov.w	ip, #4294967295
 8009efc:	e7e6      	b.n	8009ecc <_strtol_l.constprop.0+0x94>
 8009efe:	f1bc 0f00 	cmp.w	ip, #0
 8009f02:	da05      	bge.n	8009f10 <_strtol_l.constprop.0+0xd8>
 8009f04:	2322      	movs	r3, #34	; 0x22
 8009f06:	6003      	str	r3, [r0, #0]
 8009f08:	4646      	mov	r6, r8
 8009f0a:	b942      	cbnz	r2, 8009f1e <_strtol_l.constprop.0+0xe6>
 8009f0c:	4630      	mov	r0, r6
 8009f0e:	e79e      	b.n	8009e4e <_strtol_l.constprop.0+0x16>
 8009f10:	b107      	cbz	r7, 8009f14 <_strtol_l.constprop.0+0xdc>
 8009f12:	4276      	negs	r6, r6
 8009f14:	2a00      	cmp	r2, #0
 8009f16:	d0f9      	beq.n	8009f0c <_strtol_l.constprop.0+0xd4>
 8009f18:	f1bc 0f00 	cmp.w	ip, #0
 8009f1c:	d000      	beq.n	8009f20 <_strtol_l.constprop.0+0xe8>
 8009f1e:	1e69      	subs	r1, r5, #1
 8009f20:	6011      	str	r1, [r2, #0]
 8009f22:	e7f3      	b.n	8009f0c <_strtol_l.constprop.0+0xd4>
 8009f24:	2430      	movs	r4, #48	; 0x30
 8009f26:	2b00      	cmp	r3, #0
 8009f28:	d1b1      	bne.n	8009e8e <_strtol_l.constprop.0+0x56>
 8009f2a:	2308      	movs	r3, #8
 8009f2c:	e7af      	b.n	8009e8e <_strtol_l.constprop.0+0x56>
 8009f2e:	2c30      	cmp	r4, #48	; 0x30
 8009f30:	d0a5      	beq.n	8009e7e <_strtol_l.constprop.0+0x46>
 8009f32:	230a      	movs	r3, #10
 8009f34:	e7ab      	b.n	8009e8e <_strtol_l.constprop.0+0x56>
 8009f36:	bf00      	nop
 8009f38:	0800cbd1 	.word	0x0800cbd1

08009f3c <_strtol_r>:
 8009f3c:	f7ff bf7c 	b.w	8009e38 <_strtol_l.constprop.0>

08009f40 <_write_r>:
 8009f40:	b538      	push	{r3, r4, r5, lr}
 8009f42:	4d07      	ldr	r5, [pc, #28]	; (8009f60 <_write_r+0x20>)
 8009f44:	4604      	mov	r4, r0
 8009f46:	4608      	mov	r0, r1
 8009f48:	4611      	mov	r1, r2
 8009f4a:	2200      	movs	r2, #0
 8009f4c:	602a      	str	r2, [r5, #0]
 8009f4e:	461a      	mov	r2, r3
 8009f50:	f7f7 fd07 	bl	8001962 <_write>
 8009f54:	1c43      	adds	r3, r0, #1
 8009f56:	d102      	bne.n	8009f5e <_write_r+0x1e>
 8009f58:	682b      	ldr	r3, [r5, #0]
 8009f5a:	b103      	cbz	r3, 8009f5e <_write_r+0x1e>
 8009f5c:	6023      	str	r3, [r4, #0]
 8009f5e:	bd38      	pop	{r3, r4, r5, pc}
 8009f60:	20001dc0 	.word	0x20001dc0

08009f64 <_close_r>:
 8009f64:	b538      	push	{r3, r4, r5, lr}
 8009f66:	4d06      	ldr	r5, [pc, #24]	; (8009f80 <_close_r+0x1c>)
 8009f68:	2300      	movs	r3, #0
 8009f6a:	4604      	mov	r4, r0
 8009f6c:	4608      	mov	r0, r1
 8009f6e:	602b      	str	r3, [r5, #0]
 8009f70:	f7f7 fd13 	bl	800199a <_close>
 8009f74:	1c43      	adds	r3, r0, #1
 8009f76:	d102      	bne.n	8009f7e <_close_r+0x1a>
 8009f78:	682b      	ldr	r3, [r5, #0]
 8009f7a:	b103      	cbz	r3, 8009f7e <_close_r+0x1a>
 8009f7c:	6023      	str	r3, [r4, #0]
 8009f7e:	bd38      	pop	{r3, r4, r5, pc}
 8009f80:	20001dc0 	.word	0x20001dc0

08009f84 <quorem>:
 8009f84:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009f88:	6903      	ldr	r3, [r0, #16]
 8009f8a:	690c      	ldr	r4, [r1, #16]
 8009f8c:	42a3      	cmp	r3, r4
 8009f8e:	4607      	mov	r7, r0
 8009f90:	f2c0 8081 	blt.w	800a096 <quorem+0x112>
 8009f94:	3c01      	subs	r4, #1
 8009f96:	f101 0814 	add.w	r8, r1, #20
 8009f9a:	f100 0514 	add.w	r5, r0, #20
 8009f9e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8009fa2:	9301      	str	r3, [sp, #4]
 8009fa4:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8009fa8:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8009fac:	3301      	adds	r3, #1
 8009fae:	429a      	cmp	r2, r3
 8009fb0:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8009fb4:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8009fb8:	fbb2 f6f3 	udiv	r6, r2, r3
 8009fbc:	d331      	bcc.n	800a022 <quorem+0x9e>
 8009fbe:	f04f 0e00 	mov.w	lr, #0
 8009fc2:	4640      	mov	r0, r8
 8009fc4:	46ac      	mov	ip, r5
 8009fc6:	46f2      	mov	sl, lr
 8009fc8:	f850 2b04 	ldr.w	r2, [r0], #4
 8009fcc:	b293      	uxth	r3, r2
 8009fce:	fb06 e303 	mla	r3, r6, r3, lr
 8009fd2:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8009fd6:	b29b      	uxth	r3, r3
 8009fd8:	ebaa 0303 	sub.w	r3, sl, r3
 8009fdc:	f8dc a000 	ldr.w	sl, [ip]
 8009fe0:	0c12      	lsrs	r2, r2, #16
 8009fe2:	fa13 f38a 	uxtah	r3, r3, sl
 8009fe6:	fb06 e202 	mla	r2, r6, r2, lr
 8009fea:	9300      	str	r3, [sp, #0]
 8009fec:	9b00      	ldr	r3, [sp, #0]
 8009fee:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8009ff2:	b292      	uxth	r2, r2
 8009ff4:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8009ff8:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8009ffc:	f8bd 3000 	ldrh.w	r3, [sp]
 800a000:	4581      	cmp	r9, r0
 800a002:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800a006:	f84c 3b04 	str.w	r3, [ip], #4
 800a00a:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800a00e:	d2db      	bcs.n	8009fc8 <quorem+0x44>
 800a010:	f855 300b 	ldr.w	r3, [r5, fp]
 800a014:	b92b      	cbnz	r3, 800a022 <quorem+0x9e>
 800a016:	9b01      	ldr	r3, [sp, #4]
 800a018:	3b04      	subs	r3, #4
 800a01a:	429d      	cmp	r5, r3
 800a01c:	461a      	mov	r2, r3
 800a01e:	d32e      	bcc.n	800a07e <quorem+0xfa>
 800a020:	613c      	str	r4, [r7, #16]
 800a022:	4638      	mov	r0, r7
 800a024:	f001 fd64 	bl	800baf0 <__mcmp>
 800a028:	2800      	cmp	r0, #0
 800a02a:	db24      	blt.n	800a076 <quorem+0xf2>
 800a02c:	3601      	adds	r6, #1
 800a02e:	4628      	mov	r0, r5
 800a030:	f04f 0c00 	mov.w	ip, #0
 800a034:	f858 2b04 	ldr.w	r2, [r8], #4
 800a038:	f8d0 e000 	ldr.w	lr, [r0]
 800a03c:	b293      	uxth	r3, r2
 800a03e:	ebac 0303 	sub.w	r3, ip, r3
 800a042:	0c12      	lsrs	r2, r2, #16
 800a044:	fa13 f38e 	uxtah	r3, r3, lr
 800a048:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800a04c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800a050:	b29b      	uxth	r3, r3
 800a052:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800a056:	45c1      	cmp	r9, r8
 800a058:	f840 3b04 	str.w	r3, [r0], #4
 800a05c:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800a060:	d2e8      	bcs.n	800a034 <quorem+0xb0>
 800a062:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800a066:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800a06a:	b922      	cbnz	r2, 800a076 <quorem+0xf2>
 800a06c:	3b04      	subs	r3, #4
 800a06e:	429d      	cmp	r5, r3
 800a070:	461a      	mov	r2, r3
 800a072:	d30a      	bcc.n	800a08a <quorem+0x106>
 800a074:	613c      	str	r4, [r7, #16]
 800a076:	4630      	mov	r0, r6
 800a078:	b003      	add	sp, #12
 800a07a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a07e:	6812      	ldr	r2, [r2, #0]
 800a080:	3b04      	subs	r3, #4
 800a082:	2a00      	cmp	r2, #0
 800a084:	d1cc      	bne.n	800a020 <quorem+0x9c>
 800a086:	3c01      	subs	r4, #1
 800a088:	e7c7      	b.n	800a01a <quorem+0x96>
 800a08a:	6812      	ldr	r2, [r2, #0]
 800a08c:	3b04      	subs	r3, #4
 800a08e:	2a00      	cmp	r2, #0
 800a090:	d1f0      	bne.n	800a074 <quorem+0xf0>
 800a092:	3c01      	subs	r4, #1
 800a094:	e7eb      	b.n	800a06e <quorem+0xea>
 800a096:	2000      	movs	r0, #0
 800a098:	e7ee      	b.n	800a078 <quorem+0xf4>
 800a09a:	0000      	movs	r0, r0
 800a09c:	0000      	movs	r0, r0
	...

0800a0a0 <_dtoa_r>:
 800a0a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a0a4:	ed2d 8b04 	vpush	{d8-d9}
 800a0a8:	ec57 6b10 	vmov	r6, r7, d0
 800a0ac:	b093      	sub	sp, #76	; 0x4c
 800a0ae:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800a0b0:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800a0b4:	9106      	str	r1, [sp, #24]
 800a0b6:	ee10 aa10 	vmov	sl, s0
 800a0ba:	4604      	mov	r4, r0
 800a0bc:	9209      	str	r2, [sp, #36]	; 0x24
 800a0be:	930c      	str	r3, [sp, #48]	; 0x30
 800a0c0:	46bb      	mov	fp, r7
 800a0c2:	b975      	cbnz	r5, 800a0e2 <_dtoa_r+0x42>
 800a0c4:	2010      	movs	r0, #16
 800a0c6:	f001 fa21 	bl	800b50c <malloc>
 800a0ca:	4602      	mov	r2, r0
 800a0cc:	6260      	str	r0, [r4, #36]	; 0x24
 800a0ce:	b920      	cbnz	r0, 800a0da <_dtoa_r+0x3a>
 800a0d0:	4ba7      	ldr	r3, [pc, #668]	; (800a370 <_dtoa_r+0x2d0>)
 800a0d2:	21ea      	movs	r1, #234	; 0xea
 800a0d4:	48a7      	ldr	r0, [pc, #668]	; (800a374 <_dtoa_r+0x2d4>)
 800a0d6:	f002 f8fd 	bl	800c2d4 <__assert_func>
 800a0da:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800a0de:	6005      	str	r5, [r0, #0]
 800a0e0:	60c5      	str	r5, [r0, #12]
 800a0e2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800a0e4:	6819      	ldr	r1, [r3, #0]
 800a0e6:	b151      	cbz	r1, 800a0fe <_dtoa_r+0x5e>
 800a0e8:	685a      	ldr	r2, [r3, #4]
 800a0ea:	604a      	str	r2, [r1, #4]
 800a0ec:	2301      	movs	r3, #1
 800a0ee:	4093      	lsls	r3, r2
 800a0f0:	608b      	str	r3, [r1, #8]
 800a0f2:	4620      	mov	r0, r4
 800a0f4:	f001 fa70 	bl	800b5d8 <_Bfree>
 800a0f8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800a0fa:	2200      	movs	r2, #0
 800a0fc:	601a      	str	r2, [r3, #0]
 800a0fe:	1e3b      	subs	r3, r7, #0
 800a100:	bfaa      	itet	ge
 800a102:	2300      	movge	r3, #0
 800a104:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 800a108:	f8c8 3000 	strge.w	r3, [r8]
 800a10c:	4b9a      	ldr	r3, [pc, #616]	; (800a378 <_dtoa_r+0x2d8>)
 800a10e:	bfbc      	itt	lt
 800a110:	2201      	movlt	r2, #1
 800a112:	f8c8 2000 	strlt.w	r2, [r8]
 800a116:	ea33 030b 	bics.w	r3, r3, fp
 800a11a:	d11b      	bne.n	800a154 <_dtoa_r+0xb4>
 800a11c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800a11e:	f242 730f 	movw	r3, #9999	; 0x270f
 800a122:	6013      	str	r3, [r2, #0]
 800a124:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800a128:	4333      	orrs	r3, r6
 800a12a:	f000 8592 	beq.w	800ac52 <_dtoa_r+0xbb2>
 800a12e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800a130:	b963      	cbnz	r3, 800a14c <_dtoa_r+0xac>
 800a132:	4b92      	ldr	r3, [pc, #584]	; (800a37c <_dtoa_r+0x2dc>)
 800a134:	e022      	b.n	800a17c <_dtoa_r+0xdc>
 800a136:	4b92      	ldr	r3, [pc, #584]	; (800a380 <_dtoa_r+0x2e0>)
 800a138:	9301      	str	r3, [sp, #4]
 800a13a:	3308      	adds	r3, #8
 800a13c:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800a13e:	6013      	str	r3, [r2, #0]
 800a140:	9801      	ldr	r0, [sp, #4]
 800a142:	b013      	add	sp, #76	; 0x4c
 800a144:	ecbd 8b04 	vpop	{d8-d9}
 800a148:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a14c:	4b8b      	ldr	r3, [pc, #556]	; (800a37c <_dtoa_r+0x2dc>)
 800a14e:	9301      	str	r3, [sp, #4]
 800a150:	3303      	adds	r3, #3
 800a152:	e7f3      	b.n	800a13c <_dtoa_r+0x9c>
 800a154:	2200      	movs	r2, #0
 800a156:	2300      	movs	r3, #0
 800a158:	4650      	mov	r0, sl
 800a15a:	4659      	mov	r1, fp
 800a15c:	f7f6 fcb4 	bl	8000ac8 <__aeabi_dcmpeq>
 800a160:	ec4b ab19 	vmov	d9, sl, fp
 800a164:	4680      	mov	r8, r0
 800a166:	b158      	cbz	r0, 800a180 <_dtoa_r+0xe0>
 800a168:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800a16a:	2301      	movs	r3, #1
 800a16c:	6013      	str	r3, [r2, #0]
 800a16e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800a170:	2b00      	cmp	r3, #0
 800a172:	f000 856b 	beq.w	800ac4c <_dtoa_r+0xbac>
 800a176:	4883      	ldr	r0, [pc, #524]	; (800a384 <_dtoa_r+0x2e4>)
 800a178:	6018      	str	r0, [r3, #0]
 800a17a:	1e43      	subs	r3, r0, #1
 800a17c:	9301      	str	r3, [sp, #4]
 800a17e:	e7df      	b.n	800a140 <_dtoa_r+0xa0>
 800a180:	ec4b ab10 	vmov	d0, sl, fp
 800a184:	aa10      	add	r2, sp, #64	; 0x40
 800a186:	a911      	add	r1, sp, #68	; 0x44
 800a188:	4620      	mov	r0, r4
 800a18a:	f001 fdd3 	bl	800bd34 <__d2b>
 800a18e:	f3cb 550a 	ubfx	r5, fp, #20, #11
 800a192:	ee08 0a10 	vmov	s16, r0
 800a196:	2d00      	cmp	r5, #0
 800a198:	f000 8084 	beq.w	800a2a4 <_dtoa_r+0x204>
 800a19c:	ee19 3a90 	vmov	r3, s19
 800a1a0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800a1a4:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 800a1a8:	4656      	mov	r6, sl
 800a1aa:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 800a1ae:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800a1b2:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 800a1b6:	4b74      	ldr	r3, [pc, #464]	; (800a388 <_dtoa_r+0x2e8>)
 800a1b8:	2200      	movs	r2, #0
 800a1ba:	4630      	mov	r0, r6
 800a1bc:	4639      	mov	r1, r7
 800a1be:	f7f6 f863 	bl	8000288 <__aeabi_dsub>
 800a1c2:	a365      	add	r3, pc, #404	; (adr r3, 800a358 <_dtoa_r+0x2b8>)
 800a1c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a1c8:	f7f6 fa16 	bl	80005f8 <__aeabi_dmul>
 800a1cc:	a364      	add	r3, pc, #400	; (adr r3, 800a360 <_dtoa_r+0x2c0>)
 800a1ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a1d2:	f7f6 f85b 	bl	800028c <__adddf3>
 800a1d6:	4606      	mov	r6, r0
 800a1d8:	4628      	mov	r0, r5
 800a1da:	460f      	mov	r7, r1
 800a1dc:	f7f6 f9a2 	bl	8000524 <__aeabi_i2d>
 800a1e0:	a361      	add	r3, pc, #388	; (adr r3, 800a368 <_dtoa_r+0x2c8>)
 800a1e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a1e6:	f7f6 fa07 	bl	80005f8 <__aeabi_dmul>
 800a1ea:	4602      	mov	r2, r0
 800a1ec:	460b      	mov	r3, r1
 800a1ee:	4630      	mov	r0, r6
 800a1f0:	4639      	mov	r1, r7
 800a1f2:	f7f6 f84b 	bl	800028c <__adddf3>
 800a1f6:	4606      	mov	r6, r0
 800a1f8:	460f      	mov	r7, r1
 800a1fa:	f7f6 fcad 	bl	8000b58 <__aeabi_d2iz>
 800a1fe:	2200      	movs	r2, #0
 800a200:	9000      	str	r0, [sp, #0]
 800a202:	2300      	movs	r3, #0
 800a204:	4630      	mov	r0, r6
 800a206:	4639      	mov	r1, r7
 800a208:	f7f6 fc68 	bl	8000adc <__aeabi_dcmplt>
 800a20c:	b150      	cbz	r0, 800a224 <_dtoa_r+0x184>
 800a20e:	9800      	ldr	r0, [sp, #0]
 800a210:	f7f6 f988 	bl	8000524 <__aeabi_i2d>
 800a214:	4632      	mov	r2, r6
 800a216:	463b      	mov	r3, r7
 800a218:	f7f6 fc56 	bl	8000ac8 <__aeabi_dcmpeq>
 800a21c:	b910      	cbnz	r0, 800a224 <_dtoa_r+0x184>
 800a21e:	9b00      	ldr	r3, [sp, #0]
 800a220:	3b01      	subs	r3, #1
 800a222:	9300      	str	r3, [sp, #0]
 800a224:	9b00      	ldr	r3, [sp, #0]
 800a226:	2b16      	cmp	r3, #22
 800a228:	d85a      	bhi.n	800a2e0 <_dtoa_r+0x240>
 800a22a:	9a00      	ldr	r2, [sp, #0]
 800a22c:	4b57      	ldr	r3, [pc, #348]	; (800a38c <_dtoa_r+0x2ec>)
 800a22e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800a232:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a236:	ec51 0b19 	vmov	r0, r1, d9
 800a23a:	f7f6 fc4f 	bl	8000adc <__aeabi_dcmplt>
 800a23e:	2800      	cmp	r0, #0
 800a240:	d050      	beq.n	800a2e4 <_dtoa_r+0x244>
 800a242:	9b00      	ldr	r3, [sp, #0]
 800a244:	3b01      	subs	r3, #1
 800a246:	9300      	str	r3, [sp, #0]
 800a248:	2300      	movs	r3, #0
 800a24a:	930b      	str	r3, [sp, #44]	; 0x2c
 800a24c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800a24e:	1b5d      	subs	r5, r3, r5
 800a250:	1e6b      	subs	r3, r5, #1
 800a252:	9305      	str	r3, [sp, #20]
 800a254:	bf45      	ittet	mi
 800a256:	f1c5 0301 	rsbmi	r3, r5, #1
 800a25a:	9304      	strmi	r3, [sp, #16]
 800a25c:	2300      	movpl	r3, #0
 800a25e:	2300      	movmi	r3, #0
 800a260:	bf4c      	ite	mi
 800a262:	9305      	strmi	r3, [sp, #20]
 800a264:	9304      	strpl	r3, [sp, #16]
 800a266:	9b00      	ldr	r3, [sp, #0]
 800a268:	2b00      	cmp	r3, #0
 800a26a:	db3d      	blt.n	800a2e8 <_dtoa_r+0x248>
 800a26c:	9b05      	ldr	r3, [sp, #20]
 800a26e:	9a00      	ldr	r2, [sp, #0]
 800a270:	920a      	str	r2, [sp, #40]	; 0x28
 800a272:	4413      	add	r3, r2
 800a274:	9305      	str	r3, [sp, #20]
 800a276:	2300      	movs	r3, #0
 800a278:	9307      	str	r3, [sp, #28]
 800a27a:	9b06      	ldr	r3, [sp, #24]
 800a27c:	2b09      	cmp	r3, #9
 800a27e:	f200 8089 	bhi.w	800a394 <_dtoa_r+0x2f4>
 800a282:	2b05      	cmp	r3, #5
 800a284:	bfc4      	itt	gt
 800a286:	3b04      	subgt	r3, #4
 800a288:	9306      	strgt	r3, [sp, #24]
 800a28a:	9b06      	ldr	r3, [sp, #24]
 800a28c:	f1a3 0302 	sub.w	r3, r3, #2
 800a290:	bfcc      	ite	gt
 800a292:	2500      	movgt	r5, #0
 800a294:	2501      	movle	r5, #1
 800a296:	2b03      	cmp	r3, #3
 800a298:	f200 8087 	bhi.w	800a3aa <_dtoa_r+0x30a>
 800a29c:	e8df f003 	tbb	[pc, r3]
 800a2a0:	59383a2d 	.word	0x59383a2d
 800a2a4:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 800a2a8:	441d      	add	r5, r3
 800a2aa:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800a2ae:	2b20      	cmp	r3, #32
 800a2b0:	bfc1      	itttt	gt
 800a2b2:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800a2b6:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 800a2ba:	fa0b f303 	lslgt.w	r3, fp, r3
 800a2be:	fa26 f000 	lsrgt.w	r0, r6, r0
 800a2c2:	bfda      	itte	le
 800a2c4:	f1c3 0320 	rsble	r3, r3, #32
 800a2c8:	fa06 f003 	lslle.w	r0, r6, r3
 800a2cc:	4318      	orrgt	r0, r3
 800a2ce:	f7f6 f919 	bl	8000504 <__aeabi_ui2d>
 800a2d2:	2301      	movs	r3, #1
 800a2d4:	4606      	mov	r6, r0
 800a2d6:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 800a2da:	3d01      	subs	r5, #1
 800a2dc:	930e      	str	r3, [sp, #56]	; 0x38
 800a2de:	e76a      	b.n	800a1b6 <_dtoa_r+0x116>
 800a2e0:	2301      	movs	r3, #1
 800a2e2:	e7b2      	b.n	800a24a <_dtoa_r+0x1aa>
 800a2e4:	900b      	str	r0, [sp, #44]	; 0x2c
 800a2e6:	e7b1      	b.n	800a24c <_dtoa_r+0x1ac>
 800a2e8:	9b04      	ldr	r3, [sp, #16]
 800a2ea:	9a00      	ldr	r2, [sp, #0]
 800a2ec:	1a9b      	subs	r3, r3, r2
 800a2ee:	9304      	str	r3, [sp, #16]
 800a2f0:	4253      	negs	r3, r2
 800a2f2:	9307      	str	r3, [sp, #28]
 800a2f4:	2300      	movs	r3, #0
 800a2f6:	930a      	str	r3, [sp, #40]	; 0x28
 800a2f8:	e7bf      	b.n	800a27a <_dtoa_r+0x1da>
 800a2fa:	2300      	movs	r3, #0
 800a2fc:	9308      	str	r3, [sp, #32]
 800a2fe:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a300:	2b00      	cmp	r3, #0
 800a302:	dc55      	bgt.n	800a3b0 <_dtoa_r+0x310>
 800a304:	2301      	movs	r3, #1
 800a306:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800a30a:	461a      	mov	r2, r3
 800a30c:	9209      	str	r2, [sp, #36]	; 0x24
 800a30e:	e00c      	b.n	800a32a <_dtoa_r+0x28a>
 800a310:	2301      	movs	r3, #1
 800a312:	e7f3      	b.n	800a2fc <_dtoa_r+0x25c>
 800a314:	2300      	movs	r3, #0
 800a316:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a318:	9308      	str	r3, [sp, #32]
 800a31a:	9b00      	ldr	r3, [sp, #0]
 800a31c:	4413      	add	r3, r2
 800a31e:	9302      	str	r3, [sp, #8]
 800a320:	3301      	adds	r3, #1
 800a322:	2b01      	cmp	r3, #1
 800a324:	9303      	str	r3, [sp, #12]
 800a326:	bfb8      	it	lt
 800a328:	2301      	movlt	r3, #1
 800a32a:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800a32c:	2200      	movs	r2, #0
 800a32e:	6042      	str	r2, [r0, #4]
 800a330:	2204      	movs	r2, #4
 800a332:	f102 0614 	add.w	r6, r2, #20
 800a336:	429e      	cmp	r6, r3
 800a338:	6841      	ldr	r1, [r0, #4]
 800a33a:	d93d      	bls.n	800a3b8 <_dtoa_r+0x318>
 800a33c:	4620      	mov	r0, r4
 800a33e:	f001 f90b 	bl	800b558 <_Balloc>
 800a342:	9001      	str	r0, [sp, #4]
 800a344:	2800      	cmp	r0, #0
 800a346:	d13b      	bne.n	800a3c0 <_dtoa_r+0x320>
 800a348:	4b11      	ldr	r3, [pc, #68]	; (800a390 <_dtoa_r+0x2f0>)
 800a34a:	4602      	mov	r2, r0
 800a34c:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800a350:	e6c0      	b.n	800a0d4 <_dtoa_r+0x34>
 800a352:	2301      	movs	r3, #1
 800a354:	e7df      	b.n	800a316 <_dtoa_r+0x276>
 800a356:	bf00      	nop
 800a358:	636f4361 	.word	0x636f4361
 800a35c:	3fd287a7 	.word	0x3fd287a7
 800a360:	8b60c8b3 	.word	0x8b60c8b3
 800a364:	3fc68a28 	.word	0x3fc68a28
 800a368:	509f79fb 	.word	0x509f79fb
 800a36c:	3fd34413 	.word	0x3fd34413
 800a370:	0800ccde 	.word	0x0800ccde
 800a374:	0800ccf5 	.word	0x0800ccf5
 800a378:	7ff00000 	.word	0x7ff00000
 800a37c:	0800ccda 	.word	0x0800ccda
 800a380:	0800ccd1 	.word	0x0800ccd1
 800a384:	0800cb51 	.word	0x0800cb51
 800a388:	3ff80000 	.word	0x3ff80000
 800a38c:	0800ce60 	.word	0x0800ce60
 800a390:	0800cd50 	.word	0x0800cd50
 800a394:	2501      	movs	r5, #1
 800a396:	2300      	movs	r3, #0
 800a398:	9306      	str	r3, [sp, #24]
 800a39a:	9508      	str	r5, [sp, #32]
 800a39c:	f04f 33ff 	mov.w	r3, #4294967295
 800a3a0:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800a3a4:	2200      	movs	r2, #0
 800a3a6:	2312      	movs	r3, #18
 800a3a8:	e7b0      	b.n	800a30c <_dtoa_r+0x26c>
 800a3aa:	2301      	movs	r3, #1
 800a3ac:	9308      	str	r3, [sp, #32]
 800a3ae:	e7f5      	b.n	800a39c <_dtoa_r+0x2fc>
 800a3b0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a3b2:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800a3b6:	e7b8      	b.n	800a32a <_dtoa_r+0x28a>
 800a3b8:	3101      	adds	r1, #1
 800a3ba:	6041      	str	r1, [r0, #4]
 800a3bc:	0052      	lsls	r2, r2, #1
 800a3be:	e7b8      	b.n	800a332 <_dtoa_r+0x292>
 800a3c0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800a3c2:	9a01      	ldr	r2, [sp, #4]
 800a3c4:	601a      	str	r2, [r3, #0]
 800a3c6:	9b03      	ldr	r3, [sp, #12]
 800a3c8:	2b0e      	cmp	r3, #14
 800a3ca:	f200 809d 	bhi.w	800a508 <_dtoa_r+0x468>
 800a3ce:	2d00      	cmp	r5, #0
 800a3d0:	f000 809a 	beq.w	800a508 <_dtoa_r+0x468>
 800a3d4:	9b00      	ldr	r3, [sp, #0]
 800a3d6:	2b00      	cmp	r3, #0
 800a3d8:	dd32      	ble.n	800a440 <_dtoa_r+0x3a0>
 800a3da:	4ab7      	ldr	r2, [pc, #732]	; (800a6b8 <_dtoa_r+0x618>)
 800a3dc:	f003 030f 	and.w	r3, r3, #15
 800a3e0:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800a3e4:	e9d3 8900 	ldrd	r8, r9, [r3]
 800a3e8:	9b00      	ldr	r3, [sp, #0]
 800a3ea:	05d8      	lsls	r0, r3, #23
 800a3ec:	ea4f 1723 	mov.w	r7, r3, asr #4
 800a3f0:	d516      	bpl.n	800a420 <_dtoa_r+0x380>
 800a3f2:	4bb2      	ldr	r3, [pc, #712]	; (800a6bc <_dtoa_r+0x61c>)
 800a3f4:	ec51 0b19 	vmov	r0, r1, d9
 800a3f8:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800a3fc:	f7f6 fa26 	bl	800084c <__aeabi_ddiv>
 800a400:	f007 070f 	and.w	r7, r7, #15
 800a404:	4682      	mov	sl, r0
 800a406:	468b      	mov	fp, r1
 800a408:	2503      	movs	r5, #3
 800a40a:	4eac      	ldr	r6, [pc, #688]	; (800a6bc <_dtoa_r+0x61c>)
 800a40c:	b957      	cbnz	r7, 800a424 <_dtoa_r+0x384>
 800a40e:	4642      	mov	r2, r8
 800a410:	464b      	mov	r3, r9
 800a412:	4650      	mov	r0, sl
 800a414:	4659      	mov	r1, fp
 800a416:	f7f6 fa19 	bl	800084c <__aeabi_ddiv>
 800a41a:	4682      	mov	sl, r0
 800a41c:	468b      	mov	fp, r1
 800a41e:	e028      	b.n	800a472 <_dtoa_r+0x3d2>
 800a420:	2502      	movs	r5, #2
 800a422:	e7f2      	b.n	800a40a <_dtoa_r+0x36a>
 800a424:	07f9      	lsls	r1, r7, #31
 800a426:	d508      	bpl.n	800a43a <_dtoa_r+0x39a>
 800a428:	4640      	mov	r0, r8
 800a42a:	4649      	mov	r1, r9
 800a42c:	e9d6 2300 	ldrd	r2, r3, [r6]
 800a430:	f7f6 f8e2 	bl	80005f8 <__aeabi_dmul>
 800a434:	3501      	adds	r5, #1
 800a436:	4680      	mov	r8, r0
 800a438:	4689      	mov	r9, r1
 800a43a:	107f      	asrs	r7, r7, #1
 800a43c:	3608      	adds	r6, #8
 800a43e:	e7e5      	b.n	800a40c <_dtoa_r+0x36c>
 800a440:	f000 809b 	beq.w	800a57a <_dtoa_r+0x4da>
 800a444:	9b00      	ldr	r3, [sp, #0]
 800a446:	4f9d      	ldr	r7, [pc, #628]	; (800a6bc <_dtoa_r+0x61c>)
 800a448:	425e      	negs	r6, r3
 800a44a:	4b9b      	ldr	r3, [pc, #620]	; (800a6b8 <_dtoa_r+0x618>)
 800a44c:	f006 020f 	and.w	r2, r6, #15
 800a450:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800a454:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a458:	ec51 0b19 	vmov	r0, r1, d9
 800a45c:	f7f6 f8cc 	bl	80005f8 <__aeabi_dmul>
 800a460:	1136      	asrs	r6, r6, #4
 800a462:	4682      	mov	sl, r0
 800a464:	468b      	mov	fp, r1
 800a466:	2300      	movs	r3, #0
 800a468:	2502      	movs	r5, #2
 800a46a:	2e00      	cmp	r6, #0
 800a46c:	d17a      	bne.n	800a564 <_dtoa_r+0x4c4>
 800a46e:	2b00      	cmp	r3, #0
 800a470:	d1d3      	bne.n	800a41a <_dtoa_r+0x37a>
 800a472:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a474:	2b00      	cmp	r3, #0
 800a476:	f000 8082 	beq.w	800a57e <_dtoa_r+0x4de>
 800a47a:	4b91      	ldr	r3, [pc, #580]	; (800a6c0 <_dtoa_r+0x620>)
 800a47c:	2200      	movs	r2, #0
 800a47e:	4650      	mov	r0, sl
 800a480:	4659      	mov	r1, fp
 800a482:	f7f6 fb2b 	bl	8000adc <__aeabi_dcmplt>
 800a486:	2800      	cmp	r0, #0
 800a488:	d079      	beq.n	800a57e <_dtoa_r+0x4de>
 800a48a:	9b03      	ldr	r3, [sp, #12]
 800a48c:	2b00      	cmp	r3, #0
 800a48e:	d076      	beq.n	800a57e <_dtoa_r+0x4de>
 800a490:	9b02      	ldr	r3, [sp, #8]
 800a492:	2b00      	cmp	r3, #0
 800a494:	dd36      	ble.n	800a504 <_dtoa_r+0x464>
 800a496:	9b00      	ldr	r3, [sp, #0]
 800a498:	4650      	mov	r0, sl
 800a49a:	4659      	mov	r1, fp
 800a49c:	1e5f      	subs	r7, r3, #1
 800a49e:	2200      	movs	r2, #0
 800a4a0:	4b88      	ldr	r3, [pc, #544]	; (800a6c4 <_dtoa_r+0x624>)
 800a4a2:	f7f6 f8a9 	bl	80005f8 <__aeabi_dmul>
 800a4a6:	9e02      	ldr	r6, [sp, #8]
 800a4a8:	4682      	mov	sl, r0
 800a4aa:	468b      	mov	fp, r1
 800a4ac:	3501      	adds	r5, #1
 800a4ae:	4628      	mov	r0, r5
 800a4b0:	f7f6 f838 	bl	8000524 <__aeabi_i2d>
 800a4b4:	4652      	mov	r2, sl
 800a4b6:	465b      	mov	r3, fp
 800a4b8:	f7f6 f89e 	bl	80005f8 <__aeabi_dmul>
 800a4bc:	4b82      	ldr	r3, [pc, #520]	; (800a6c8 <_dtoa_r+0x628>)
 800a4be:	2200      	movs	r2, #0
 800a4c0:	f7f5 fee4 	bl	800028c <__adddf3>
 800a4c4:	46d0      	mov	r8, sl
 800a4c6:	46d9      	mov	r9, fp
 800a4c8:	4682      	mov	sl, r0
 800a4ca:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 800a4ce:	2e00      	cmp	r6, #0
 800a4d0:	d158      	bne.n	800a584 <_dtoa_r+0x4e4>
 800a4d2:	4b7e      	ldr	r3, [pc, #504]	; (800a6cc <_dtoa_r+0x62c>)
 800a4d4:	2200      	movs	r2, #0
 800a4d6:	4640      	mov	r0, r8
 800a4d8:	4649      	mov	r1, r9
 800a4da:	f7f5 fed5 	bl	8000288 <__aeabi_dsub>
 800a4de:	4652      	mov	r2, sl
 800a4e0:	465b      	mov	r3, fp
 800a4e2:	4680      	mov	r8, r0
 800a4e4:	4689      	mov	r9, r1
 800a4e6:	f7f6 fb17 	bl	8000b18 <__aeabi_dcmpgt>
 800a4ea:	2800      	cmp	r0, #0
 800a4ec:	f040 8295 	bne.w	800aa1a <_dtoa_r+0x97a>
 800a4f0:	4652      	mov	r2, sl
 800a4f2:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 800a4f6:	4640      	mov	r0, r8
 800a4f8:	4649      	mov	r1, r9
 800a4fa:	f7f6 faef 	bl	8000adc <__aeabi_dcmplt>
 800a4fe:	2800      	cmp	r0, #0
 800a500:	f040 8289 	bne.w	800aa16 <_dtoa_r+0x976>
 800a504:	ec5b ab19 	vmov	sl, fp, d9
 800a508:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800a50a:	2b00      	cmp	r3, #0
 800a50c:	f2c0 8148 	blt.w	800a7a0 <_dtoa_r+0x700>
 800a510:	9a00      	ldr	r2, [sp, #0]
 800a512:	2a0e      	cmp	r2, #14
 800a514:	f300 8144 	bgt.w	800a7a0 <_dtoa_r+0x700>
 800a518:	4b67      	ldr	r3, [pc, #412]	; (800a6b8 <_dtoa_r+0x618>)
 800a51a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800a51e:	e9d3 8900 	ldrd	r8, r9, [r3]
 800a522:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a524:	2b00      	cmp	r3, #0
 800a526:	f280 80d5 	bge.w	800a6d4 <_dtoa_r+0x634>
 800a52a:	9b03      	ldr	r3, [sp, #12]
 800a52c:	2b00      	cmp	r3, #0
 800a52e:	f300 80d1 	bgt.w	800a6d4 <_dtoa_r+0x634>
 800a532:	f040 826f 	bne.w	800aa14 <_dtoa_r+0x974>
 800a536:	4b65      	ldr	r3, [pc, #404]	; (800a6cc <_dtoa_r+0x62c>)
 800a538:	2200      	movs	r2, #0
 800a53a:	4640      	mov	r0, r8
 800a53c:	4649      	mov	r1, r9
 800a53e:	f7f6 f85b 	bl	80005f8 <__aeabi_dmul>
 800a542:	4652      	mov	r2, sl
 800a544:	465b      	mov	r3, fp
 800a546:	f7f6 fadd 	bl	8000b04 <__aeabi_dcmpge>
 800a54a:	9e03      	ldr	r6, [sp, #12]
 800a54c:	4637      	mov	r7, r6
 800a54e:	2800      	cmp	r0, #0
 800a550:	f040 8245 	bne.w	800a9de <_dtoa_r+0x93e>
 800a554:	9d01      	ldr	r5, [sp, #4]
 800a556:	2331      	movs	r3, #49	; 0x31
 800a558:	f805 3b01 	strb.w	r3, [r5], #1
 800a55c:	9b00      	ldr	r3, [sp, #0]
 800a55e:	3301      	adds	r3, #1
 800a560:	9300      	str	r3, [sp, #0]
 800a562:	e240      	b.n	800a9e6 <_dtoa_r+0x946>
 800a564:	07f2      	lsls	r2, r6, #31
 800a566:	d505      	bpl.n	800a574 <_dtoa_r+0x4d4>
 800a568:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a56c:	f7f6 f844 	bl	80005f8 <__aeabi_dmul>
 800a570:	3501      	adds	r5, #1
 800a572:	2301      	movs	r3, #1
 800a574:	1076      	asrs	r6, r6, #1
 800a576:	3708      	adds	r7, #8
 800a578:	e777      	b.n	800a46a <_dtoa_r+0x3ca>
 800a57a:	2502      	movs	r5, #2
 800a57c:	e779      	b.n	800a472 <_dtoa_r+0x3d2>
 800a57e:	9f00      	ldr	r7, [sp, #0]
 800a580:	9e03      	ldr	r6, [sp, #12]
 800a582:	e794      	b.n	800a4ae <_dtoa_r+0x40e>
 800a584:	9901      	ldr	r1, [sp, #4]
 800a586:	4b4c      	ldr	r3, [pc, #304]	; (800a6b8 <_dtoa_r+0x618>)
 800a588:	4431      	add	r1, r6
 800a58a:	910d      	str	r1, [sp, #52]	; 0x34
 800a58c:	9908      	ldr	r1, [sp, #32]
 800a58e:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800a592:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800a596:	2900      	cmp	r1, #0
 800a598:	d043      	beq.n	800a622 <_dtoa_r+0x582>
 800a59a:	494d      	ldr	r1, [pc, #308]	; (800a6d0 <_dtoa_r+0x630>)
 800a59c:	2000      	movs	r0, #0
 800a59e:	f7f6 f955 	bl	800084c <__aeabi_ddiv>
 800a5a2:	4652      	mov	r2, sl
 800a5a4:	465b      	mov	r3, fp
 800a5a6:	f7f5 fe6f 	bl	8000288 <__aeabi_dsub>
 800a5aa:	9d01      	ldr	r5, [sp, #4]
 800a5ac:	4682      	mov	sl, r0
 800a5ae:	468b      	mov	fp, r1
 800a5b0:	4649      	mov	r1, r9
 800a5b2:	4640      	mov	r0, r8
 800a5b4:	f7f6 fad0 	bl	8000b58 <__aeabi_d2iz>
 800a5b8:	4606      	mov	r6, r0
 800a5ba:	f7f5 ffb3 	bl	8000524 <__aeabi_i2d>
 800a5be:	4602      	mov	r2, r0
 800a5c0:	460b      	mov	r3, r1
 800a5c2:	4640      	mov	r0, r8
 800a5c4:	4649      	mov	r1, r9
 800a5c6:	f7f5 fe5f 	bl	8000288 <__aeabi_dsub>
 800a5ca:	3630      	adds	r6, #48	; 0x30
 800a5cc:	f805 6b01 	strb.w	r6, [r5], #1
 800a5d0:	4652      	mov	r2, sl
 800a5d2:	465b      	mov	r3, fp
 800a5d4:	4680      	mov	r8, r0
 800a5d6:	4689      	mov	r9, r1
 800a5d8:	f7f6 fa80 	bl	8000adc <__aeabi_dcmplt>
 800a5dc:	2800      	cmp	r0, #0
 800a5de:	d163      	bne.n	800a6a8 <_dtoa_r+0x608>
 800a5e0:	4642      	mov	r2, r8
 800a5e2:	464b      	mov	r3, r9
 800a5e4:	4936      	ldr	r1, [pc, #216]	; (800a6c0 <_dtoa_r+0x620>)
 800a5e6:	2000      	movs	r0, #0
 800a5e8:	f7f5 fe4e 	bl	8000288 <__aeabi_dsub>
 800a5ec:	4652      	mov	r2, sl
 800a5ee:	465b      	mov	r3, fp
 800a5f0:	f7f6 fa74 	bl	8000adc <__aeabi_dcmplt>
 800a5f4:	2800      	cmp	r0, #0
 800a5f6:	f040 80b5 	bne.w	800a764 <_dtoa_r+0x6c4>
 800a5fa:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800a5fc:	429d      	cmp	r5, r3
 800a5fe:	d081      	beq.n	800a504 <_dtoa_r+0x464>
 800a600:	4b30      	ldr	r3, [pc, #192]	; (800a6c4 <_dtoa_r+0x624>)
 800a602:	2200      	movs	r2, #0
 800a604:	4650      	mov	r0, sl
 800a606:	4659      	mov	r1, fp
 800a608:	f7f5 fff6 	bl	80005f8 <__aeabi_dmul>
 800a60c:	4b2d      	ldr	r3, [pc, #180]	; (800a6c4 <_dtoa_r+0x624>)
 800a60e:	4682      	mov	sl, r0
 800a610:	468b      	mov	fp, r1
 800a612:	4640      	mov	r0, r8
 800a614:	4649      	mov	r1, r9
 800a616:	2200      	movs	r2, #0
 800a618:	f7f5 ffee 	bl	80005f8 <__aeabi_dmul>
 800a61c:	4680      	mov	r8, r0
 800a61e:	4689      	mov	r9, r1
 800a620:	e7c6      	b.n	800a5b0 <_dtoa_r+0x510>
 800a622:	4650      	mov	r0, sl
 800a624:	4659      	mov	r1, fp
 800a626:	f7f5 ffe7 	bl	80005f8 <__aeabi_dmul>
 800a62a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800a62c:	9d01      	ldr	r5, [sp, #4]
 800a62e:	930f      	str	r3, [sp, #60]	; 0x3c
 800a630:	4682      	mov	sl, r0
 800a632:	468b      	mov	fp, r1
 800a634:	4649      	mov	r1, r9
 800a636:	4640      	mov	r0, r8
 800a638:	f7f6 fa8e 	bl	8000b58 <__aeabi_d2iz>
 800a63c:	4606      	mov	r6, r0
 800a63e:	f7f5 ff71 	bl	8000524 <__aeabi_i2d>
 800a642:	3630      	adds	r6, #48	; 0x30
 800a644:	4602      	mov	r2, r0
 800a646:	460b      	mov	r3, r1
 800a648:	4640      	mov	r0, r8
 800a64a:	4649      	mov	r1, r9
 800a64c:	f7f5 fe1c 	bl	8000288 <__aeabi_dsub>
 800a650:	f805 6b01 	strb.w	r6, [r5], #1
 800a654:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800a656:	429d      	cmp	r5, r3
 800a658:	4680      	mov	r8, r0
 800a65a:	4689      	mov	r9, r1
 800a65c:	f04f 0200 	mov.w	r2, #0
 800a660:	d124      	bne.n	800a6ac <_dtoa_r+0x60c>
 800a662:	4b1b      	ldr	r3, [pc, #108]	; (800a6d0 <_dtoa_r+0x630>)
 800a664:	4650      	mov	r0, sl
 800a666:	4659      	mov	r1, fp
 800a668:	f7f5 fe10 	bl	800028c <__adddf3>
 800a66c:	4602      	mov	r2, r0
 800a66e:	460b      	mov	r3, r1
 800a670:	4640      	mov	r0, r8
 800a672:	4649      	mov	r1, r9
 800a674:	f7f6 fa50 	bl	8000b18 <__aeabi_dcmpgt>
 800a678:	2800      	cmp	r0, #0
 800a67a:	d173      	bne.n	800a764 <_dtoa_r+0x6c4>
 800a67c:	4652      	mov	r2, sl
 800a67e:	465b      	mov	r3, fp
 800a680:	4913      	ldr	r1, [pc, #76]	; (800a6d0 <_dtoa_r+0x630>)
 800a682:	2000      	movs	r0, #0
 800a684:	f7f5 fe00 	bl	8000288 <__aeabi_dsub>
 800a688:	4602      	mov	r2, r0
 800a68a:	460b      	mov	r3, r1
 800a68c:	4640      	mov	r0, r8
 800a68e:	4649      	mov	r1, r9
 800a690:	f7f6 fa24 	bl	8000adc <__aeabi_dcmplt>
 800a694:	2800      	cmp	r0, #0
 800a696:	f43f af35 	beq.w	800a504 <_dtoa_r+0x464>
 800a69a:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 800a69c:	1e6b      	subs	r3, r5, #1
 800a69e:	930f      	str	r3, [sp, #60]	; 0x3c
 800a6a0:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800a6a4:	2b30      	cmp	r3, #48	; 0x30
 800a6a6:	d0f8      	beq.n	800a69a <_dtoa_r+0x5fa>
 800a6a8:	9700      	str	r7, [sp, #0]
 800a6aa:	e049      	b.n	800a740 <_dtoa_r+0x6a0>
 800a6ac:	4b05      	ldr	r3, [pc, #20]	; (800a6c4 <_dtoa_r+0x624>)
 800a6ae:	f7f5 ffa3 	bl	80005f8 <__aeabi_dmul>
 800a6b2:	4680      	mov	r8, r0
 800a6b4:	4689      	mov	r9, r1
 800a6b6:	e7bd      	b.n	800a634 <_dtoa_r+0x594>
 800a6b8:	0800ce60 	.word	0x0800ce60
 800a6bc:	0800ce38 	.word	0x0800ce38
 800a6c0:	3ff00000 	.word	0x3ff00000
 800a6c4:	40240000 	.word	0x40240000
 800a6c8:	401c0000 	.word	0x401c0000
 800a6cc:	40140000 	.word	0x40140000
 800a6d0:	3fe00000 	.word	0x3fe00000
 800a6d4:	9d01      	ldr	r5, [sp, #4]
 800a6d6:	4656      	mov	r6, sl
 800a6d8:	465f      	mov	r7, fp
 800a6da:	4642      	mov	r2, r8
 800a6dc:	464b      	mov	r3, r9
 800a6de:	4630      	mov	r0, r6
 800a6e0:	4639      	mov	r1, r7
 800a6e2:	f7f6 f8b3 	bl	800084c <__aeabi_ddiv>
 800a6e6:	f7f6 fa37 	bl	8000b58 <__aeabi_d2iz>
 800a6ea:	4682      	mov	sl, r0
 800a6ec:	f7f5 ff1a 	bl	8000524 <__aeabi_i2d>
 800a6f0:	4642      	mov	r2, r8
 800a6f2:	464b      	mov	r3, r9
 800a6f4:	f7f5 ff80 	bl	80005f8 <__aeabi_dmul>
 800a6f8:	4602      	mov	r2, r0
 800a6fa:	460b      	mov	r3, r1
 800a6fc:	4630      	mov	r0, r6
 800a6fe:	4639      	mov	r1, r7
 800a700:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 800a704:	f7f5 fdc0 	bl	8000288 <__aeabi_dsub>
 800a708:	f805 6b01 	strb.w	r6, [r5], #1
 800a70c:	9e01      	ldr	r6, [sp, #4]
 800a70e:	9f03      	ldr	r7, [sp, #12]
 800a710:	1bae      	subs	r6, r5, r6
 800a712:	42b7      	cmp	r7, r6
 800a714:	4602      	mov	r2, r0
 800a716:	460b      	mov	r3, r1
 800a718:	d135      	bne.n	800a786 <_dtoa_r+0x6e6>
 800a71a:	f7f5 fdb7 	bl	800028c <__adddf3>
 800a71e:	4642      	mov	r2, r8
 800a720:	464b      	mov	r3, r9
 800a722:	4606      	mov	r6, r0
 800a724:	460f      	mov	r7, r1
 800a726:	f7f6 f9f7 	bl	8000b18 <__aeabi_dcmpgt>
 800a72a:	b9d0      	cbnz	r0, 800a762 <_dtoa_r+0x6c2>
 800a72c:	4642      	mov	r2, r8
 800a72e:	464b      	mov	r3, r9
 800a730:	4630      	mov	r0, r6
 800a732:	4639      	mov	r1, r7
 800a734:	f7f6 f9c8 	bl	8000ac8 <__aeabi_dcmpeq>
 800a738:	b110      	cbz	r0, 800a740 <_dtoa_r+0x6a0>
 800a73a:	f01a 0f01 	tst.w	sl, #1
 800a73e:	d110      	bne.n	800a762 <_dtoa_r+0x6c2>
 800a740:	4620      	mov	r0, r4
 800a742:	ee18 1a10 	vmov	r1, s16
 800a746:	f000 ff47 	bl	800b5d8 <_Bfree>
 800a74a:	2300      	movs	r3, #0
 800a74c:	9800      	ldr	r0, [sp, #0]
 800a74e:	702b      	strb	r3, [r5, #0]
 800a750:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800a752:	3001      	adds	r0, #1
 800a754:	6018      	str	r0, [r3, #0]
 800a756:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800a758:	2b00      	cmp	r3, #0
 800a75a:	f43f acf1 	beq.w	800a140 <_dtoa_r+0xa0>
 800a75e:	601d      	str	r5, [r3, #0]
 800a760:	e4ee      	b.n	800a140 <_dtoa_r+0xa0>
 800a762:	9f00      	ldr	r7, [sp, #0]
 800a764:	462b      	mov	r3, r5
 800a766:	461d      	mov	r5, r3
 800a768:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800a76c:	2a39      	cmp	r2, #57	; 0x39
 800a76e:	d106      	bne.n	800a77e <_dtoa_r+0x6de>
 800a770:	9a01      	ldr	r2, [sp, #4]
 800a772:	429a      	cmp	r2, r3
 800a774:	d1f7      	bne.n	800a766 <_dtoa_r+0x6c6>
 800a776:	9901      	ldr	r1, [sp, #4]
 800a778:	2230      	movs	r2, #48	; 0x30
 800a77a:	3701      	adds	r7, #1
 800a77c:	700a      	strb	r2, [r1, #0]
 800a77e:	781a      	ldrb	r2, [r3, #0]
 800a780:	3201      	adds	r2, #1
 800a782:	701a      	strb	r2, [r3, #0]
 800a784:	e790      	b.n	800a6a8 <_dtoa_r+0x608>
 800a786:	4ba6      	ldr	r3, [pc, #664]	; (800aa20 <_dtoa_r+0x980>)
 800a788:	2200      	movs	r2, #0
 800a78a:	f7f5 ff35 	bl	80005f8 <__aeabi_dmul>
 800a78e:	2200      	movs	r2, #0
 800a790:	2300      	movs	r3, #0
 800a792:	4606      	mov	r6, r0
 800a794:	460f      	mov	r7, r1
 800a796:	f7f6 f997 	bl	8000ac8 <__aeabi_dcmpeq>
 800a79a:	2800      	cmp	r0, #0
 800a79c:	d09d      	beq.n	800a6da <_dtoa_r+0x63a>
 800a79e:	e7cf      	b.n	800a740 <_dtoa_r+0x6a0>
 800a7a0:	9a08      	ldr	r2, [sp, #32]
 800a7a2:	2a00      	cmp	r2, #0
 800a7a4:	f000 80d7 	beq.w	800a956 <_dtoa_r+0x8b6>
 800a7a8:	9a06      	ldr	r2, [sp, #24]
 800a7aa:	2a01      	cmp	r2, #1
 800a7ac:	f300 80ba 	bgt.w	800a924 <_dtoa_r+0x884>
 800a7b0:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800a7b2:	2a00      	cmp	r2, #0
 800a7b4:	f000 80b2 	beq.w	800a91c <_dtoa_r+0x87c>
 800a7b8:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800a7bc:	9e07      	ldr	r6, [sp, #28]
 800a7be:	9d04      	ldr	r5, [sp, #16]
 800a7c0:	9a04      	ldr	r2, [sp, #16]
 800a7c2:	441a      	add	r2, r3
 800a7c4:	9204      	str	r2, [sp, #16]
 800a7c6:	9a05      	ldr	r2, [sp, #20]
 800a7c8:	2101      	movs	r1, #1
 800a7ca:	441a      	add	r2, r3
 800a7cc:	4620      	mov	r0, r4
 800a7ce:	9205      	str	r2, [sp, #20]
 800a7d0:	f001 f804 	bl	800b7dc <__i2b>
 800a7d4:	4607      	mov	r7, r0
 800a7d6:	2d00      	cmp	r5, #0
 800a7d8:	dd0c      	ble.n	800a7f4 <_dtoa_r+0x754>
 800a7da:	9b05      	ldr	r3, [sp, #20]
 800a7dc:	2b00      	cmp	r3, #0
 800a7de:	dd09      	ble.n	800a7f4 <_dtoa_r+0x754>
 800a7e0:	42ab      	cmp	r3, r5
 800a7e2:	9a04      	ldr	r2, [sp, #16]
 800a7e4:	bfa8      	it	ge
 800a7e6:	462b      	movge	r3, r5
 800a7e8:	1ad2      	subs	r2, r2, r3
 800a7ea:	9204      	str	r2, [sp, #16]
 800a7ec:	9a05      	ldr	r2, [sp, #20]
 800a7ee:	1aed      	subs	r5, r5, r3
 800a7f0:	1ad3      	subs	r3, r2, r3
 800a7f2:	9305      	str	r3, [sp, #20]
 800a7f4:	9b07      	ldr	r3, [sp, #28]
 800a7f6:	b31b      	cbz	r3, 800a840 <_dtoa_r+0x7a0>
 800a7f8:	9b08      	ldr	r3, [sp, #32]
 800a7fa:	2b00      	cmp	r3, #0
 800a7fc:	f000 80af 	beq.w	800a95e <_dtoa_r+0x8be>
 800a800:	2e00      	cmp	r6, #0
 800a802:	dd13      	ble.n	800a82c <_dtoa_r+0x78c>
 800a804:	4639      	mov	r1, r7
 800a806:	4632      	mov	r2, r6
 800a808:	4620      	mov	r0, r4
 800a80a:	f001 f8a7 	bl	800b95c <__pow5mult>
 800a80e:	ee18 2a10 	vmov	r2, s16
 800a812:	4601      	mov	r1, r0
 800a814:	4607      	mov	r7, r0
 800a816:	4620      	mov	r0, r4
 800a818:	f000 fff6 	bl	800b808 <__multiply>
 800a81c:	ee18 1a10 	vmov	r1, s16
 800a820:	4680      	mov	r8, r0
 800a822:	4620      	mov	r0, r4
 800a824:	f000 fed8 	bl	800b5d8 <_Bfree>
 800a828:	ee08 8a10 	vmov	s16, r8
 800a82c:	9b07      	ldr	r3, [sp, #28]
 800a82e:	1b9a      	subs	r2, r3, r6
 800a830:	d006      	beq.n	800a840 <_dtoa_r+0x7a0>
 800a832:	ee18 1a10 	vmov	r1, s16
 800a836:	4620      	mov	r0, r4
 800a838:	f001 f890 	bl	800b95c <__pow5mult>
 800a83c:	ee08 0a10 	vmov	s16, r0
 800a840:	2101      	movs	r1, #1
 800a842:	4620      	mov	r0, r4
 800a844:	f000 ffca 	bl	800b7dc <__i2b>
 800a848:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a84a:	2b00      	cmp	r3, #0
 800a84c:	4606      	mov	r6, r0
 800a84e:	f340 8088 	ble.w	800a962 <_dtoa_r+0x8c2>
 800a852:	461a      	mov	r2, r3
 800a854:	4601      	mov	r1, r0
 800a856:	4620      	mov	r0, r4
 800a858:	f001 f880 	bl	800b95c <__pow5mult>
 800a85c:	9b06      	ldr	r3, [sp, #24]
 800a85e:	2b01      	cmp	r3, #1
 800a860:	4606      	mov	r6, r0
 800a862:	f340 8081 	ble.w	800a968 <_dtoa_r+0x8c8>
 800a866:	f04f 0800 	mov.w	r8, #0
 800a86a:	6933      	ldr	r3, [r6, #16]
 800a86c:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800a870:	6918      	ldr	r0, [r3, #16]
 800a872:	f000 ff63 	bl	800b73c <__hi0bits>
 800a876:	f1c0 0020 	rsb	r0, r0, #32
 800a87a:	9b05      	ldr	r3, [sp, #20]
 800a87c:	4418      	add	r0, r3
 800a87e:	f010 001f 	ands.w	r0, r0, #31
 800a882:	f000 8092 	beq.w	800a9aa <_dtoa_r+0x90a>
 800a886:	f1c0 0320 	rsb	r3, r0, #32
 800a88a:	2b04      	cmp	r3, #4
 800a88c:	f340 808a 	ble.w	800a9a4 <_dtoa_r+0x904>
 800a890:	f1c0 001c 	rsb	r0, r0, #28
 800a894:	9b04      	ldr	r3, [sp, #16]
 800a896:	4403      	add	r3, r0
 800a898:	9304      	str	r3, [sp, #16]
 800a89a:	9b05      	ldr	r3, [sp, #20]
 800a89c:	4403      	add	r3, r0
 800a89e:	4405      	add	r5, r0
 800a8a0:	9305      	str	r3, [sp, #20]
 800a8a2:	9b04      	ldr	r3, [sp, #16]
 800a8a4:	2b00      	cmp	r3, #0
 800a8a6:	dd07      	ble.n	800a8b8 <_dtoa_r+0x818>
 800a8a8:	ee18 1a10 	vmov	r1, s16
 800a8ac:	461a      	mov	r2, r3
 800a8ae:	4620      	mov	r0, r4
 800a8b0:	f001 f8ae 	bl	800ba10 <__lshift>
 800a8b4:	ee08 0a10 	vmov	s16, r0
 800a8b8:	9b05      	ldr	r3, [sp, #20]
 800a8ba:	2b00      	cmp	r3, #0
 800a8bc:	dd05      	ble.n	800a8ca <_dtoa_r+0x82a>
 800a8be:	4631      	mov	r1, r6
 800a8c0:	461a      	mov	r2, r3
 800a8c2:	4620      	mov	r0, r4
 800a8c4:	f001 f8a4 	bl	800ba10 <__lshift>
 800a8c8:	4606      	mov	r6, r0
 800a8ca:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a8cc:	2b00      	cmp	r3, #0
 800a8ce:	d06e      	beq.n	800a9ae <_dtoa_r+0x90e>
 800a8d0:	ee18 0a10 	vmov	r0, s16
 800a8d4:	4631      	mov	r1, r6
 800a8d6:	f001 f90b 	bl	800baf0 <__mcmp>
 800a8da:	2800      	cmp	r0, #0
 800a8dc:	da67      	bge.n	800a9ae <_dtoa_r+0x90e>
 800a8de:	9b00      	ldr	r3, [sp, #0]
 800a8e0:	3b01      	subs	r3, #1
 800a8e2:	ee18 1a10 	vmov	r1, s16
 800a8e6:	9300      	str	r3, [sp, #0]
 800a8e8:	220a      	movs	r2, #10
 800a8ea:	2300      	movs	r3, #0
 800a8ec:	4620      	mov	r0, r4
 800a8ee:	f000 fe95 	bl	800b61c <__multadd>
 800a8f2:	9b08      	ldr	r3, [sp, #32]
 800a8f4:	ee08 0a10 	vmov	s16, r0
 800a8f8:	2b00      	cmp	r3, #0
 800a8fa:	f000 81b1 	beq.w	800ac60 <_dtoa_r+0xbc0>
 800a8fe:	2300      	movs	r3, #0
 800a900:	4639      	mov	r1, r7
 800a902:	220a      	movs	r2, #10
 800a904:	4620      	mov	r0, r4
 800a906:	f000 fe89 	bl	800b61c <__multadd>
 800a90a:	9b02      	ldr	r3, [sp, #8]
 800a90c:	2b00      	cmp	r3, #0
 800a90e:	4607      	mov	r7, r0
 800a910:	f300 808e 	bgt.w	800aa30 <_dtoa_r+0x990>
 800a914:	9b06      	ldr	r3, [sp, #24]
 800a916:	2b02      	cmp	r3, #2
 800a918:	dc51      	bgt.n	800a9be <_dtoa_r+0x91e>
 800a91a:	e089      	b.n	800aa30 <_dtoa_r+0x990>
 800a91c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800a91e:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800a922:	e74b      	b.n	800a7bc <_dtoa_r+0x71c>
 800a924:	9b03      	ldr	r3, [sp, #12]
 800a926:	1e5e      	subs	r6, r3, #1
 800a928:	9b07      	ldr	r3, [sp, #28]
 800a92a:	42b3      	cmp	r3, r6
 800a92c:	bfbf      	itttt	lt
 800a92e:	9b07      	ldrlt	r3, [sp, #28]
 800a930:	9607      	strlt	r6, [sp, #28]
 800a932:	1af2      	sublt	r2, r6, r3
 800a934:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 800a936:	bfb6      	itet	lt
 800a938:	189b      	addlt	r3, r3, r2
 800a93a:	1b9e      	subge	r6, r3, r6
 800a93c:	930a      	strlt	r3, [sp, #40]	; 0x28
 800a93e:	9b03      	ldr	r3, [sp, #12]
 800a940:	bfb8      	it	lt
 800a942:	2600      	movlt	r6, #0
 800a944:	2b00      	cmp	r3, #0
 800a946:	bfb7      	itett	lt
 800a948:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 800a94c:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 800a950:	1a9d      	sublt	r5, r3, r2
 800a952:	2300      	movlt	r3, #0
 800a954:	e734      	b.n	800a7c0 <_dtoa_r+0x720>
 800a956:	9e07      	ldr	r6, [sp, #28]
 800a958:	9d04      	ldr	r5, [sp, #16]
 800a95a:	9f08      	ldr	r7, [sp, #32]
 800a95c:	e73b      	b.n	800a7d6 <_dtoa_r+0x736>
 800a95e:	9a07      	ldr	r2, [sp, #28]
 800a960:	e767      	b.n	800a832 <_dtoa_r+0x792>
 800a962:	9b06      	ldr	r3, [sp, #24]
 800a964:	2b01      	cmp	r3, #1
 800a966:	dc18      	bgt.n	800a99a <_dtoa_r+0x8fa>
 800a968:	f1ba 0f00 	cmp.w	sl, #0
 800a96c:	d115      	bne.n	800a99a <_dtoa_r+0x8fa>
 800a96e:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800a972:	b993      	cbnz	r3, 800a99a <_dtoa_r+0x8fa>
 800a974:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800a978:	0d1b      	lsrs	r3, r3, #20
 800a97a:	051b      	lsls	r3, r3, #20
 800a97c:	b183      	cbz	r3, 800a9a0 <_dtoa_r+0x900>
 800a97e:	9b04      	ldr	r3, [sp, #16]
 800a980:	3301      	adds	r3, #1
 800a982:	9304      	str	r3, [sp, #16]
 800a984:	9b05      	ldr	r3, [sp, #20]
 800a986:	3301      	adds	r3, #1
 800a988:	9305      	str	r3, [sp, #20]
 800a98a:	f04f 0801 	mov.w	r8, #1
 800a98e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a990:	2b00      	cmp	r3, #0
 800a992:	f47f af6a 	bne.w	800a86a <_dtoa_r+0x7ca>
 800a996:	2001      	movs	r0, #1
 800a998:	e76f      	b.n	800a87a <_dtoa_r+0x7da>
 800a99a:	f04f 0800 	mov.w	r8, #0
 800a99e:	e7f6      	b.n	800a98e <_dtoa_r+0x8ee>
 800a9a0:	4698      	mov	r8, r3
 800a9a2:	e7f4      	b.n	800a98e <_dtoa_r+0x8ee>
 800a9a4:	f43f af7d 	beq.w	800a8a2 <_dtoa_r+0x802>
 800a9a8:	4618      	mov	r0, r3
 800a9aa:	301c      	adds	r0, #28
 800a9ac:	e772      	b.n	800a894 <_dtoa_r+0x7f4>
 800a9ae:	9b03      	ldr	r3, [sp, #12]
 800a9b0:	2b00      	cmp	r3, #0
 800a9b2:	dc37      	bgt.n	800aa24 <_dtoa_r+0x984>
 800a9b4:	9b06      	ldr	r3, [sp, #24]
 800a9b6:	2b02      	cmp	r3, #2
 800a9b8:	dd34      	ble.n	800aa24 <_dtoa_r+0x984>
 800a9ba:	9b03      	ldr	r3, [sp, #12]
 800a9bc:	9302      	str	r3, [sp, #8]
 800a9be:	9b02      	ldr	r3, [sp, #8]
 800a9c0:	b96b      	cbnz	r3, 800a9de <_dtoa_r+0x93e>
 800a9c2:	4631      	mov	r1, r6
 800a9c4:	2205      	movs	r2, #5
 800a9c6:	4620      	mov	r0, r4
 800a9c8:	f000 fe28 	bl	800b61c <__multadd>
 800a9cc:	4601      	mov	r1, r0
 800a9ce:	4606      	mov	r6, r0
 800a9d0:	ee18 0a10 	vmov	r0, s16
 800a9d4:	f001 f88c 	bl	800baf0 <__mcmp>
 800a9d8:	2800      	cmp	r0, #0
 800a9da:	f73f adbb 	bgt.w	800a554 <_dtoa_r+0x4b4>
 800a9de:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a9e0:	9d01      	ldr	r5, [sp, #4]
 800a9e2:	43db      	mvns	r3, r3
 800a9e4:	9300      	str	r3, [sp, #0]
 800a9e6:	f04f 0800 	mov.w	r8, #0
 800a9ea:	4631      	mov	r1, r6
 800a9ec:	4620      	mov	r0, r4
 800a9ee:	f000 fdf3 	bl	800b5d8 <_Bfree>
 800a9f2:	2f00      	cmp	r7, #0
 800a9f4:	f43f aea4 	beq.w	800a740 <_dtoa_r+0x6a0>
 800a9f8:	f1b8 0f00 	cmp.w	r8, #0
 800a9fc:	d005      	beq.n	800aa0a <_dtoa_r+0x96a>
 800a9fe:	45b8      	cmp	r8, r7
 800aa00:	d003      	beq.n	800aa0a <_dtoa_r+0x96a>
 800aa02:	4641      	mov	r1, r8
 800aa04:	4620      	mov	r0, r4
 800aa06:	f000 fde7 	bl	800b5d8 <_Bfree>
 800aa0a:	4639      	mov	r1, r7
 800aa0c:	4620      	mov	r0, r4
 800aa0e:	f000 fde3 	bl	800b5d8 <_Bfree>
 800aa12:	e695      	b.n	800a740 <_dtoa_r+0x6a0>
 800aa14:	2600      	movs	r6, #0
 800aa16:	4637      	mov	r7, r6
 800aa18:	e7e1      	b.n	800a9de <_dtoa_r+0x93e>
 800aa1a:	9700      	str	r7, [sp, #0]
 800aa1c:	4637      	mov	r7, r6
 800aa1e:	e599      	b.n	800a554 <_dtoa_r+0x4b4>
 800aa20:	40240000 	.word	0x40240000
 800aa24:	9b08      	ldr	r3, [sp, #32]
 800aa26:	2b00      	cmp	r3, #0
 800aa28:	f000 80ca 	beq.w	800abc0 <_dtoa_r+0xb20>
 800aa2c:	9b03      	ldr	r3, [sp, #12]
 800aa2e:	9302      	str	r3, [sp, #8]
 800aa30:	2d00      	cmp	r5, #0
 800aa32:	dd05      	ble.n	800aa40 <_dtoa_r+0x9a0>
 800aa34:	4639      	mov	r1, r7
 800aa36:	462a      	mov	r2, r5
 800aa38:	4620      	mov	r0, r4
 800aa3a:	f000 ffe9 	bl	800ba10 <__lshift>
 800aa3e:	4607      	mov	r7, r0
 800aa40:	f1b8 0f00 	cmp.w	r8, #0
 800aa44:	d05b      	beq.n	800aafe <_dtoa_r+0xa5e>
 800aa46:	6879      	ldr	r1, [r7, #4]
 800aa48:	4620      	mov	r0, r4
 800aa4a:	f000 fd85 	bl	800b558 <_Balloc>
 800aa4e:	4605      	mov	r5, r0
 800aa50:	b928      	cbnz	r0, 800aa5e <_dtoa_r+0x9be>
 800aa52:	4b87      	ldr	r3, [pc, #540]	; (800ac70 <_dtoa_r+0xbd0>)
 800aa54:	4602      	mov	r2, r0
 800aa56:	f240 21ea 	movw	r1, #746	; 0x2ea
 800aa5a:	f7ff bb3b 	b.w	800a0d4 <_dtoa_r+0x34>
 800aa5e:	693a      	ldr	r2, [r7, #16]
 800aa60:	3202      	adds	r2, #2
 800aa62:	0092      	lsls	r2, r2, #2
 800aa64:	f107 010c 	add.w	r1, r7, #12
 800aa68:	300c      	adds	r0, #12
 800aa6a:	f7fd fbb2 	bl	80081d2 <memcpy>
 800aa6e:	2201      	movs	r2, #1
 800aa70:	4629      	mov	r1, r5
 800aa72:	4620      	mov	r0, r4
 800aa74:	f000 ffcc 	bl	800ba10 <__lshift>
 800aa78:	9b01      	ldr	r3, [sp, #4]
 800aa7a:	f103 0901 	add.w	r9, r3, #1
 800aa7e:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 800aa82:	4413      	add	r3, r2
 800aa84:	9305      	str	r3, [sp, #20]
 800aa86:	f00a 0301 	and.w	r3, sl, #1
 800aa8a:	46b8      	mov	r8, r7
 800aa8c:	9304      	str	r3, [sp, #16]
 800aa8e:	4607      	mov	r7, r0
 800aa90:	4631      	mov	r1, r6
 800aa92:	ee18 0a10 	vmov	r0, s16
 800aa96:	f7ff fa75 	bl	8009f84 <quorem>
 800aa9a:	4641      	mov	r1, r8
 800aa9c:	9002      	str	r0, [sp, #8]
 800aa9e:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800aaa2:	ee18 0a10 	vmov	r0, s16
 800aaa6:	f001 f823 	bl	800baf0 <__mcmp>
 800aaaa:	463a      	mov	r2, r7
 800aaac:	9003      	str	r0, [sp, #12]
 800aaae:	4631      	mov	r1, r6
 800aab0:	4620      	mov	r0, r4
 800aab2:	f001 f839 	bl	800bb28 <__mdiff>
 800aab6:	68c2      	ldr	r2, [r0, #12]
 800aab8:	f109 3bff 	add.w	fp, r9, #4294967295
 800aabc:	4605      	mov	r5, r0
 800aabe:	bb02      	cbnz	r2, 800ab02 <_dtoa_r+0xa62>
 800aac0:	4601      	mov	r1, r0
 800aac2:	ee18 0a10 	vmov	r0, s16
 800aac6:	f001 f813 	bl	800baf0 <__mcmp>
 800aaca:	4602      	mov	r2, r0
 800aacc:	4629      	mov	r1, r5
 800aace:	4620      	mov	r0, r4
 800aad0:	9207      	str	r2, [sp, #28]
 800aad2:	f000 fd81 	bl	800b5d8 <_Bfree>
 800aad6:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 800aada:	ea43 0102 	orr.w	r1, r3, r2
 800aade:	9b04      	ldr	r3, [sp, #16]
 800aae0:	430b      	orrs	r3, r1
 800aae2:	464d      	mov	r5, r9
 800aae4:	d10f      	bne.n	800ab06 <_dtoa_r+0xa66>
 800aae6:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800aaea:	d02a      	beq.n	800ab42 <_dtoa_r+0xaa2>
 800aaec:	9b03      	ldr	r3, [sp, #12]
 800aaee:	2b00      	cmp	r3, #0
 800aaf0:	dd02      	ble.n	800aaf8 <_dtoa_r+0xa58>
 800aaf2:	9b02      	ldr	r3, [sp, #8]
 800aaf4:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 800aaf8:	f88b a000 	strb.w	sl, [fp]
 800aafc:	e775      	b.n	800a9ea <_dtoa_r+0x94a>
 800aafe:	4638      	mov	r0, r7
 800ab00:	e7ba      	b.n	800aa78 <_dtoa_r+0x9d8>
 800ab02:	2201      	movs	r2, #1
 800ab04:	e7e2      	b.n	800aacc <_dtoa_r+0xa2c>
 800ab06:	9b03      	ldr	r3, [sp, #12]
 800ab08:	2b00      	cmp	r3, #0
 800ab0a:	db04      	blt.n	800ab16 <_dtoa_r+0xa76>
 800ab0c:	9906      	ldr	r1, [sp, #24]
 800ab0e:	430b      	orrs	r3, r1
 800ab10:	9904      	ldr	r1, [sp, #16]
 800ab12:	430b      	orrs	r3, r1
 800ab14:	d122      	bne.n	800ab5c <_dtoa_r+0xabc>
 800ab16:	2a00      	cmp	r2, #0
 800ab18:	ddee      	ble.n	800aaf8 <_dtoa_r+0xa58>
 800ab1a:	ee18 1a10 	vmov	r1, s16
 800ab1e:	2201      	movs	r2, #1
 800ab20:	4620      	mov	r0, r4
 800ab22:	f000 ff75 	bl	800ba10 <__lshift>
 800ab26:	4631      	mov	r1, r6
 800ab28:	ee08 0a10 	vmov	s16, r0
 800ab2c:	f000 ffe0 	bl	800baf0 <__mcmp>
 800ab30:	2800      	cmp	r0, #0
 800ab32:	dc03      	bgt.n	800ab3c <_dtoa_r+0xa9c>
 800ab34:	d1e0      	bne.n	800aaf8 <_dtoa_r+0xa58>
 800ab36:	f01a 0f01 	tst.w	sl, #1
 800ab3a:	d0dd      	beq.n	800aaf8 <_dtoa_r+0xa58>
 800ab3c:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800ab40:	d1d7      	bne.n	800aaf2 <_dtoa_r+0xa52>
 800ab42:	2339      	movs	r3, #57	; 0x39
 800ab44:	f88b 3000 	strb.w	r3, [fp]
 800ab48:	462b      	mov	r3, r5
 800ab4a:	461d      	mov	r5, r3
 800ab4c:	3b01      	subs	r3, #1
 800ab4e:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800ab52:	2a39      	cmp	r2, #57	; 0x39
 800ab54:	d071      	beq.n	800ac3a <_dtoa_r+0xb9a>
 800ab56:	3201      	adds	r2, #1
 800ab58:	701a      	strb	r2, [r3, #0]
 800ab5a:	e746      	b.n	800a9ea <_dtoa_r+0x94a>
 800ab5c:	2a00      	cmp	r2, #0
 800ab5e:	dd07      	ble.n	800ab70 <_dtoa_r+0xad0>
 800ab60:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800ab64:	d0ed      	beq.n	800ab42 <_dtoa_r+0xaa2>
 800ab66:	f10a 0301 	add.w	r3, sl, #1
 800ab6a:	f88b 3000 	strb.w	r3, [fp]
 800ab6e:	e73c      	b.n	800a9ea <_dtoa_r+0x94a>
 800ab70:	9b05      	ldr	r3, [sp, #20]
 800ab72:	f809 ac01 	strb.w	sl, [r9, #-1]
 800ab76:	4599      	cmp	r9, r3
 800ab78:	d047      	beq.n	800ac0a <_dtoa_r+0xb6a>
 800ab7a:	ee18 1a10 	vmov	r1, s16
 800ab7e:	2300      	movs	r3, #0
 800ab80:	220a      	movs	r2, #10
 800ab82:	4620      	mov	r0, r4
 800ab84:	f000 fd4a 	bl	800b61c <__multadd>
 800ab88:	45b8      	cmp	r8, r7
 800ab8a:	ee08 0a10 	vmov	s16, r0
 800ab8e:	f04f 0300 	mov.w	r3, #0
 800ab92:	f04f 020a 	mov.w	r2, #10
 800ab96:	4641      	mov	r1, r8
 800ab98:	4620      	mov	r0, r4
 800ab9a:	d106      	bne.n	800abaa <_dtoa_r+0xb0a>
 800ab9c:	f000 fd3e 	bl	800b61c <__multadd>
 800aba0:	4680      	mov	r8, r0
 800aba2:	4607      	mov	r7, r0
 800aba4:	f109 0901 	add.w	r9, r9, #1
 800aba8:	e772      	b.n	800aa90 <_dtoa_r+0x9f0>
 800abaa:	f000 fd37 	bl	800b61c <__multadd>
 800abae:	4639      	mov	r1, r7
 800abb0:	4680      	mov	r8, r0
 800abb2:	2300      	movs	r3, #0
 800abb4:	220a      	movs	r2, #10
 800abb6:	4620      	mov	r0, r4
 800abb8:	f000 fd30 	bl	800b61c <__multadd>
 800abbc:	4607      	mov	r7, r0
 800abbe:	e7f1      	b.n	800aba4 <_dtoa_r+0xb04>
 800abc0:	9b03      	ldr	r3, [sp, #12]
 800abc2:	9302      	str	r3, [sp, #8]
 800abc4:	9d01      	ldr	r5, [sp, #4]
 800abc6:	ee18 0a10 	vmov	r0, s16
 800abca:	4631      	mov	r1, r6
 800abcc:	f7ff f9da 	bl	8009f84 <quorem>
 800abd0:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800abd4:	9b01      	ldr	r3, [sp, #4]
 800abd6:	f805 ab01 	strb.w	sl, [r5], #1
 800abda:	1aea      	subs	r2, r5, r3
 800abdc:	9b02      	ldr	r3, [sp, #8]
 800abde:	4293      	cmp	r3, r2
 800abe0:	dd09      	ble.n	800abf6 <_dtoa_r+0xb56>
 800abe2:	ee18 1a10 	vmov	r1, s16
 800abe6:	2300      	movs	r3, #0
 800abe8:	220a      	movs	r2, #10
 800abea:	4620      	mov	r0, r4
 800abec:	f000 fd16 	bl	800b61c <__multadd>
 800abf0:	ee08 0a10 	vmov	s16, r0
 800abf4:	e7e7      	b.n	800abc6 <_dtoa_r+0xb26>
 800abf6:	9b02      	ldr	r3, [sp, #8]
 800abf8:	2b00      	cmp	r3, #0
 800abfa:	bfc8      	it	gt
 800abfc:	461d      	movgt	r5, r3
 800abfe:	9b01      	ldr	r3, [sp, #4]
 800ac00:	bfd8      	it	le
 800ac02:	2501      	movle	r5, #1
 800ac04:	441d      	add	r5, r3
 800ac06:	f04f 0800 	mov.w	r8, #0
 800ac0a:	ee18 1a10 	vmov	r1, s16
 800ac0e:	2201      	movs	r2, #1
 800ac10:	4620      	mov	r0, r4
 800ac12:	f000 fefd 	bl	800ba10 <__lshift>
 800ac16:	4631      	mov	r1, r6
 800ac18:	ee08 0a10 	vmov	s16, r0
 800ac1c:	f000 ff68 	bl	800baf0 <__mcmp>
 800ac20:	2800      	cmp	r0, #0
 800ac22:	dc91      	bgt.n	800ab48 <_dtoa_r+0xaa8>
 800ac24:	d102      	bne.n	800ac2c <_dtoa_r+0xb8c>
 800ac26:	f01a 0f01 	tst.w	sl, #1
 800ac2a:	d18d      	bne.n	800ab48 <_dtoa_r+0xaa8>
 800ac2c:	462b      	mov	r3, r5
 800ac2e:	461d      	mov	r5, r3
 800ac30:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800ac34:	2a30      	cmp	r2, #48	; 0x30
 800ac36:	d0fa      	beq.n	800ac2e <_dtoa_r+0xb8e>
 800ac38:	e6d7      	b.n	800a9ea <_dtoa_r+0x94a>
 800ac3a:	9a01      	ldr	r2, [sp, #4]
 800ac3c:	429a      	cmp	r2, r3
 800ac3e:	d184      	bne.n	800ab4a <_dtoa_r+0xaaa>
 800ac40:	9b00      	ldr	r3, [sp, #0]
 800ac42:	3301      	adds	r3, #1
 800ac44:	9300      	str	r3, [sp, #0]
 800ac46:	2331      	movs	r3, #49	; 0x31
 800ac48:	7013      	strb	r3, [r2, #0]
 800ac4a:	e6ce      	b.n	800a9ea <_dtoa_r+0x94a>
 800ac4c:	4b09      	ldr	r3, [pc, #36]	; (800ac74 <_dtoa_r+0xbd4>)
 800ac4e:	f7ff ba95 	b.w	800a17c <_dtoa_r+0xdc>
 800ac52:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800ac54:	2b00      	cmp	r3, #0
 800ac56:	f47f aa6e 	bne.w	800a136 <_dtoa_r+0x96>
 800ac5a:	4b07      	ldr	r3, [pc, #28]	; (800ac78 <_dtoa_r+0xbd8>)
 800ac5c:	f7ff ba8e 	b.w	800a17c <_dtoa_r+0xdc>
 800ac60:	9b02      	ldr	r3, [sp, #8]
 800ac62:	2b00      	cmp	r3, #0
 800ac64:	dcae      	bgt.n	800abc4 <_dtoa_r+0xb24>
 800ac66:	9b06      	ldr	r3, [sp, #24]
 800ac68:	2b02      	cmp	r3, #2
 800ac6a:	f73f aea8 	bgt.w	800a9be <_dtoa_r+0x91e>
 800ac6e:	e7a9      	b.n	800abc4 <_dtoa_r+0xb24>
 800ac70:	0800cd50 	.word	0x0800cd50
 800ac74:	0800cb50 	.word	0x0800cb50
 800ac78:	0800ccd1 	.word	0x0800ccd1

0800ac7c <__sflush_r>:
 800ac7c:	898a      	ldrh	r2, [r1, #12]
 800ac7e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ac82:	4605      	mov	r5, r0
 800ac84:	0710      	lsls	r0, r2, #28
 800ac86:	460c      	mov	r4, r1
 800ac88:	d458      	bmi.n	800ad3c <__sflush_r+0xc0>
 800ac8a:	684b      	ldr	r3, [r1, #4]
 800ac8c:	2b00      	cmp	r3, #0
 800ac8e:	dc05      	bgt.n	800ac9c <__sflush_r+0x20>
 800ac90:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800ac92:	2b00      	cmp	r3, #0
 800ac94:	dc02      	bgt.n	800ac9c <__sflush_r+0x20>
 800ac96:	2000      	movs	r0, #0
 800ac98:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ac9c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800ac9e:	2e00      	cmp	r6, #0
 800aca0:	d0f9      	beq.n	800ac96 <__sflush_r+0x1a>
 800aca2:	2300      	movs	r3, #0
 800aca4:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800aca8:	682f      	ldr	r7, [r5, #0]
 800acaa:	602b      	str	r3, [r5, #0]
 800acac:	d032      	beq.n	800ad14 <__sflush_r+0x98>
 800acae:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800acb0:	89a3      	ldrh	r3, [r4, #12]
 800acb2:	075a      	lsls	r2, r3, #29
 800acb4:	d505      	bpl.n	800acc2 <__sflush_r+0x46>
 800acb6:	6863      	ldr	r3, [r4, #4]
 800acb8:	1ac0      	subs	r0, r0, r3
 800acba:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800acbc:	b10b      	cbz	r3, 800acc2 <__sflush_r+0x46>
 800acbe:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800acc0:	1ac0      	subs	r0, r0, r3
 800acc2:	2300      	movs	r3, #0
 800acc4:	4602      	mov	r2, r0
 800acc6:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800acc8:	6a21      	ldr	r1, [r4, #32]
 800acca:	4628      	mov	r0, r5
 800accc:	47b0      	blx	r6
 800acce:	1c43      	adds	r3, r0, #1
 800acd0:	89a3      	ldrh	r3, [r4, #12]
 800acd2:	d106      	bne.n	800ace2 <__sflush_r+0x66>
 800acd4:	6829      	ldr	r1, [r5, #0]
 800acd6:	291d      	cmp	r1, #29
 800acd8:	d82c      	bhi.n	800ad34 <__sflush_r+0xb8>
 800acda:	4a2a      	ldr	r2, [pc, #168]	; (800ad84 <__sflush_r+0x108>)
 800acdc:	40ca      	lsrs	r2, r1
 800acde:	07d6      	lsls	r6, r2, #31
 800ace0:	d528      	bpl.n	800ad34 <__sflush_r+0xb8>
 800ace2:	2200      	movs	r2, #0
 800ace4:	6062      	str	r2, [r4, #4]
 800ace6:	04d9      	lsls	r1, r3, #19
 800ace8:	6922      	ldr	r2, [r4, #16]
 800acea:	6022      	str	r2, [r4, #0]
 800acec:	d504      	bpl.n	800acf8 <__sflush_r+0x7c>
 800acee:	1c42      	adds	r2, r0, #1
 800acf0:	d101      	bne.n	800acf6 <__sflush_r+0x7a>
 800acf2:	682b      	ldr	r3, [r5, #0]
 800acf4:	b903      	cbnz	r3, 800acf8 <__sflush_r+0x7c>
 800acf6:	6560      	str	r0, [r4, #84]	; 0x54
 800acf8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800acfa:	602f      	str	r7, [r5, #0]
 800acfc:	2900      	cmp	r1, #0
 800acfe:	d0ca      	beq.n	800ac96 <__sflush_r+0x1a>
 800ad00:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800ad04:	4299      	cmp	r1, r3
 800ad06:	d002      	beq.n	800ad0e <__sflush_r+0x92>
 800ad08:	4628      	mov	r0, r5
 800ad0a:	f001 f8fd 	bl	800bf08 <_free_r>
 800ad0e:	2000      	movs	r0, #0
 800ad10:	6360      	str	r0, [r4, #52]	; 0x34
 800ad12:	e7c1      	b.n	800ac98 <__sflush_r+0x1c>
 800ad14:	6a21      	ldr	r1, [r4, #32]
 800ad16:	2301      	movs	r3, #1
 800ad18:	4628      	mov	r0, r5
 800ad1a:	47b0      	blx	r6
 800ad1c:	1c41      	adds	r1, r0, #1
 800ad1e:	d1c7      	bne.n	800acb0 <__sflush_r+0x34>
 800ad20:	682b      	ldr	r3, [r5, #0]
 800ad22:	2b00      	cmp	r3, #0
 800ad24:	d0c4      	beq.n	800acb0 <__sflush_r+0x34>
 800ad26:	2b1d      	cmp	r3, #29
 800ad28:	d001      	beq.n	800ad2e <__sflush_r+0xb2>
 800ad2a:	2b16      	cmp	r3, #22
 800ad2c:	d101      	bne.n	800ad32 <__sflush_r+0xb6>
 800ad2e:	602f      	str	r7, [r5, #0]
 800ad30:	e7b1      	b.n	800ac96 <__sflush_r+0x1a>
 800ad32:	89a3      	ldrh	r3, [r4, #12]
 800ad34:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ad38:	81a3      	strh	r3, [r4, #12]
 800ad3a:	e7ad      	b.n	800ac98 <__sflush_r+0x1c>
 800ad3c:	690f      	ldr	r7, [r1, #16]
 800ad3e:	2f00      	cmp	r7, #0
 800ad40:	d0a9      	beq.n	800ac96 <__sflush_r+0x1a>
 800ad42:	0793      	lsls	r3, r2, #30
 800ad44:	680e      	ldr	r6, [r1, #0]
 800ad46:	bf08      	it	eq
 800ad48:	694b      	ldreq	r3, [r1, #20]
 800ad4a:	600f      	str	r7, [r1, #0]
 800ad4c:	bf18      	it	ne
 800ad4e:	2300      	movne	r3, #0
 800ad50:	eba6 0807 	sub.w	r8, r6, r7
 800ad54:	608b      	str	r3, [r1, #8]
 800ad56:	f1b8 0f00 	cmp.w	r8, #0
 800ad5a:	dd9c      	ble.n	800ac96 <__sflush_r+0x1a>
 800ad5c:	6a21      	ldr	r1, [r4, #32]
 800ad5e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800ad60:	4643      	mov	r3, r8
 800ad62:	463a      	mov	r2, r7
 800ad64:	4628      	mov	r0, r5
 800ad66:	47b0      	blx	r6
 800ad68:	2800      	cmp	r0, #0
 800ad6a:	dc06      	bgt.n	800ad7a <__sflush_r+0xfe>
 800ad6c:	89a3      	ldrh	r3, [r4, #12]
 800ad6e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ad72:	81a3      	strh	r3, [r4, #12]
 800ad74:	f04f 30ff 	mov.w	r0, #4294967295
 800ad78:	e78e      	b.n	800ac98 <__sflush_r+0x1c>
 800ad7a:	4407      	add	r7, r0
 800ad7c:	eba8 0800 	sub.w	r8, r8, r0
 800ad80:	e7e9      	b.n	800ad56 <__sflush_r+0xda>
 800ad82:	bf00      	nop
 800ad84:	20400001 	.word	0x20400001

0800ad88 <_fflush_r>:
 800ad88:	b538      	push	{r3, r4, r5, lr}
 800ad8a:	690b      	ldr	r3, [r1, #16]
 800ad8c:	4605      	mov	r5, r0
 800ad8e:	460c      	mov	r4, r1
 800ad90:	b913      	cbnz	r3, 800ad98 <_fflush_r+0x10>
 800ad92:	2500      	movs	r5, #0
 800ad94:	4628      	mov	r0, r5
 800ad96:	bd38      	pop	{r3, r4, r5, pc}
 800ad98:	b118      	cbz	r0, 800ada2 <_fflush_r+0x1a>
 800ad9a:	6983      	ldr	r3, [r0, #24]
 800ad9c:	b90b      	cbnz	r3, 800ada2 <_fflush_r+0x1a>
 800ad9e:	f7fd f953 	bl	8008048 <__sinit>
 800ada2:	4b14      	ldr	r3, [pc, #80]	; (800adf4 <_fflush_r+0x6c>)
 800ada4:	429c      	cmp	r4, r3
 800ada6:	d11b      	bne.n	800ade0 <_fflush_r+0x58>
 800ada8:	686c      	ldr	r4, [r5, #4]
 800adaa:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800adae:	2b00      	cmp	r3, #0
 800adb0:	d0ef      	beq.n	800ad92 <_fflush_r+0xa>
 800adb2:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800adb4:	07d0      	lsls	r0, r2, #31
 800adb6:	d404      	bmi.n	800adc2 <_fflush_r+0x3a>
 800adb8:	0599      	lsls	r1, r3, #22
 800adba:	d402      	bmi.n	800adc2 <_fflush_r+0x3a>
 800adbc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800adbe:	f7fd fa06 	bl	80081ce <__retarget_lock_acquire_recursive>
 800adc2:	4628      	mov	r0, r5
 800adc4:	4621      	mov	r1, r4
 800adc6:	f7ff ff59 	bl	800ac7c <__sflush_r>
 800adca:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800adcc:	07da      	lsls	r2, r3, #31
 800adce:	4605      	mov	r5, r0
 800add0:	d4e0      	bmi.n	800ad94 <_fflush_r+0xc>
 800add2:	89a3      	ldrh	r3, [r4, #12]
 800add4:	059b      	lsls	r3, r3, #22
 800add6:	d4dd      	bmi.n	800ad94 <_fflush_r+0xc>
 800add8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800adda:	f7fd f9f9 	bl	80081d0 <__retarget_lock_release_recursive>
 800adde:	e7d9      	b.n	800ad94 <_fflush_r+0xc>
 800ade0:	4b05      	ldr	r3, [pc, #20]	; (800adf8 <_fflush_r+0x70>)
 800ade2:	429c      	cmp	r4, r3
 800ade4:	d101      	bne.n	800adea <_fflush_r+0x62>
 800ade6:	68ac      	ldr	r4, [r5, #8]
 800ade8:	e7df      	b.n	800adaa <_fflush_r+0x22>
 800adea:	4b04      	ldr	r3, [pc, #16]	; (800adfc <_fflush_r+0x74>)
 800adec:	429c      	cmp	r4, r3
 800adee:	bf08      	it	eq
 800adf0:	68ec      	ldreq	r4, [r5, #12]
 800adf2:	e7da      	b.n	800adaa <_fflush_r+0x22>
 800adf4:	0800cafc 	.word	0x0800cafc
 800adf8:	0800cb1c 	.word	0x0800cb1c
 800adfc:	0800cadc 	.word	0x0800cadc

0800ae00 <rshift>:
 800ae00:	6903      	ldr	r3, [r0, #16]
 800ae02:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800ae06:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800ae0a:	ea4f 1261 	mov.w	r2, r1, asr #5
 800ae0e:	f100 0414 	add.w	r4, r0, #20
 800ae12:	dd45      	ble.n	800aea0 <rshift+0xa0>
 800ae14:	f011 011f 	ands.w	r1, r1, #31
 800ae18:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800ae1c:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800ae20:	d10c      	bne.n	800ae3c <rshift+0x3c>
 800ae22:	f100 0710 	add.w	r7, r0, #16
 800ae26:	4629      	mov	r1, r5
 800ae28:	42b1      	cmp	r1, r6
 800ae2a:	d334      	bcc.n	800ae96 <rshift+0x96>
 800ae2c:	1a9b      	subs	r3, r3, r2
 800ae2e:	009b      	lsls	r3, r3, #2
 800ae30:	1eea      	subs	r2, r5, #3
 800ae32:	4296      	cmp	r6, r2
 800ae34:	bf38      	it	cc
 800ae36:	2300      	movcc	r3, #0
 800ae38:	4423      	add	r3, r4
 800ae3a:	e015      	b.n	800ae68 <rshift+0x68>
 800ae3c:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800ae40:	f1c1 0820 	rsb	r8, r1, #32
 800ae44:	40cf      	lsrs	r7, r1
 800ae46:	f105 0e04 	add.w	lr, r5, #4
 800ae4a:	46a1      	mov	r9, r4
 800ae4c:	4576      	cmp	r6, lr
 800ae4e:	46f4      	mov	ip, lr
 800ae50:	d815      	bhi.n	800ae7e <rshift+0x7e>
 800ae52:	1a9a      	subs	r2, r3, r2
 800ae54:	0092      	lsls	r2, r2, #2
 800ae56:	3a04      	subs	r2, #4
 800ae58:	3501      	adds	r5, #1
 800ae5a:	42ae      	cmp	r6, r5
 800ae5c:	bf38      	it	cc
 800ae5e:	2200      	movcc	r2, #0
 800ae60:	18a3      	adds	r3, r4, r2
 800ae62:	50a7      	str	r7, [r4, r2]
 800ae64:	b107      	cbz	r7, 800ae68 <rshift+0x68>
 800ae66:	3304      	adds	r3, #4
 800ae68:	1b1a      	subs	r2, r3, r4
 800ae6a:	42a3      	cmp	r3, r4
 800ae6c:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800ae70:	bf08      	it	eq
 800ae72:	2300      	moveq	r3, #0
 800ae74:	6102      	str	r2, [r0, #16]
 800ae76:	bf08      	it	eq
 800ae78:	6143      	streq	r3, [r0, #20]
 800ae7a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800ae7e:	f8dc c000 	ldr.w	ip, [ip]
 800ae82:	fa0c fc08 	lsl.w	ip, ip, r8
 800ae86:	ea4c 0707 	orr.w	r7, ip, r7
 800ae8a:	f849 7b04 	str.w	r7, [r9], #4
 800ae8e:	f85e 7b04 	ldr.w	r7, [lr], #4
 800ae92:	40cf      	lsrs	r7, r1
 800ae94:	e7da      	b.n	800ae4c <rshift+0x4c>
 800ae96:	f851 cb04 	ldr.w	ip, [r1], #4
 800ae9a:	f847 cf04 	str.w	ip, [r7, #4]!
 800ae9e:	e7c3      	b.n	800ae28 <rshift+0x28>
 800aea0:	4623      	mov	r3, r4
 800aea2:	e7e1      	b.n	800ae68 <rshift+0x68>

0800aea4 <__hexdig_fun>:
 800aea4:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 800aea8:	2b09      	cmp	r3, #9
 800aeaa:	d802      	bhi.n	800aeb2 <__hexdig_fun+0xe>
 800aeac:	3820      	subs	r0, #32
 800aeae:	b2c0      	uxtb	r0, r0
 800aeb0:	4770      	bx	lr
 800aeb2:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 800aeb6:	2b05      	cmp	r3, #5
 800aeb8:	d801      	bhi.n	800aebe <__hexdig_fun+0x1a>
 800aeba:	3847      	subs	r0, #71	; 0x47
 800aebc:	e7f7      	b.n	800aeae <__hexdig_fun+0xa>
 800aebe:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 800aec2:	2b05      	cmp	r3, #5
 800aec4:	d801      	bhi.n	800aeca <__hexdig_fun+0x26>
 800aec6:	3827      	subs	r0, #39	; 0x27
 800aec8:	e7f1      	b.n	800aeae <__hexdig_fun+0xa>
 800aeca:	2000      	movs	r0, #0
 800aecc:	4770      	bx	lr
	...

0800aed0 <__gethex>:
 800aed0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800aed4:	ed2d 8b02 	vpush	{d8}
 800aed8:	b089      	sub	sp, #36	; 0x24
 800aeda:	ee08 0a10 	vmov	s16, r0
 800aede:	9304      	str	r3, [sp, #16]
 800aee0:	4bb4      	ldr	r3, [pc, #720]	; (800b1b4 <__gethex+0x2e4>)
 800aee2:	681b      	ldr	r3, [r3, #0]
 800aee4:	9301      	str	r3, [sp, #4]
 800aee6:	4618      	mov	r0, r3
 800aee8:	468b      	mov	fp, r1
 800aeea:	4690      	mov	r8, r2
 800aeec:	f7f5 f970 	bl	80001d0 <strlen>
 800aef0:	9b01      	ldr	r3, [sp, #4]
 800aef2:	f8db 2000 	ldr.w	r2, [fp]
 800aef6:	4403      	add	r3, r0
 800aef8:	4682      	mov	sl, r0
 800aefa:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 800aefe:	9305      	str	r3, [sp, #20]
 800af00:	1c93      	adds	r3, r2, #2
 800af02:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 800af06:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 800af0a:	32fe      	adds	r2, #254	; 0xfe
 800af0c:	18d1      	adds	r1, r2, r3
 800af0e:	461f      	mov	r7, r3
 800af10:	f813 0b01 	ldrb.w	r0, [r3], #1
 800af14:	9100      	str	r1, [sp, #0]
 800af16:	2830      	cmp	r0, #48	; 0x30
 800af18:	d0f8      	beq.n	800af0c <__gethex+0x3c>
 800af1a:	f7ff ffc3 	bl	800aea4 <__hexdig_fun>
 800af1e:	4604      	mov	r4, r0
 800af20:	2800      	cmp	r0, #0
 800af22:	d13a      	bne.n	800af9a <__gethex+0xca>
 800af24:	9901      	ldr	r1, [sp, #4]
 800af26:	4652      	mov	r2, sl
 800af28:	4638      	mov	r0, r7
 800af2a:	f001 f9b1 	bl	800c290 <strncmp>
 800af2e:	4605      	mov	r5, r0
 800af30:	2800      	cmp	r0, #0
 800af32:	d168      	bne.n	800b006 <__gethex+0x136>
 800af34:	f817 000a 	ldrb.w	r0, [r7, sl]
 800af38:	eb07 060a 	add.w	r6, r7, sl
 800af3c:	f7ff ffb2 	bl	800aea4 <__hexdig_fun>
 800af40:	2800      	cmp	r0, #0
 800af42:	d062      	beq.n	800b00a <__gethex+0x13a>
 800af44:	4633      	mov	r3, r6
 800af46:	7818      	ldrb	r0, [r3, #0]
 800af48:	2830      	cmp	r0, #48	; 0x30
 800af4a:	461f      	mov	r7, r3
 800af4c:	f103 0301 	add.w	r3, r3, #1
 800af50:	d0f9      	beq.n	800af46 <__gethex+0x76>
 800af52:	f7ff ffa7 	bl	800aea4 <__hexdig_fun>
 800af56:	2301      	movs	r3, #1
 800af58:	fab0 f480 	clz	r4, r0
 800af5c:	0964      	lsrs	r4, r4, #5
 800af5e:	4635      	mov	r5, r6
 800af60:	9300      	str	r3, [sp, #0]
 800af62:	463a      	mov	r2, r7
 800af64:	4616      	mov	r6, r2
 800af66:	3201      	adds	r2, #1
 800af68:	7830      	ldrb	r0, [r6, #0]
 800af6a:	f7ff ff9b 	bl	800aea4 <__hexdig_fun>
 800af6e:	2800      	cmp	r0, #0
 800af70:	d1f8      	bne.n	800af64 <__gethex+0x94>
 800af72:	9901      	ldr	r1, [sp, #4]
 800af74:	4652      	mov	r2, sl
 800af76:	4630      	mov	r0, r6
 800af78:	f001 f98a 	bl	800c290 <strncmp>
 800af7c:	b980      	cbnz	r0, 800afa0 <__gethex+0xd0>
 800af7e:	b94d      	cbnz	r5, 800af94 <__gethex+0xc4>
 800af80:	eb06 050a 	add.w	r5, r6, sl
 800af84:	462a      	mov	r2, r5
 800af86:	4616      	mov	r6, r2
 800af88:	3201      	adds	r2, #1
 800af8a:	7830      	ldrb	r0, [r6, #0]
 800af8c:	f7ff ff8a 	bl	800aea4 <__hexdig_fun>
 800af90:	2800      	cmp	r0, #0
 800af92:	d1f8      	bne.n	800af86 <__gethex+0xb6>
 800af94:	1bad      	subs	r5, r5, r6
 800af96:	00ad      	lsls	r5, r5, #2
 800af98:	e004      	b.n	800afa4 <__gethex+0xd4>
 800af9a:	2400      	movs	r4, #0
 800af9c:	4625      	mov	r5, r4
 800af9e:	e7e0      	b.n	800af62 <__gethex+0x92>
 800afa0:	2d00      	cmp	r5, #0
 800afa2:	d1f7      	bne.n	800af94 <__gethex+0xc4>
 800afa4:	7833      	ldrb	r3, [r6, #0]
 800afa6:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800afaa:	2b50      	cmp	r3, #80	; 0x50
 800afac:	d13b      	bne.n	800b026 <__gethex+0x156>
 800afae:	7873      	ldrb	r3, [r6, #1]
 800afb0:	2b2b      	cmp	r3, #43	; 0x2b
 800afb2:	d02c      	beq.n	800b00e <__gethex+0x13e>
 800afb4:	2b2d      	cmp	r3, #45	; 0x2d
 800afb6:	d02e      	beq.n	800b016 <__gethex+0x146>
 800afb8:	1c71      	adds	r1, r6, #1
 800afba:	f04f 0900 	mov.w	r9, #0
 800afbe:	7808      	ldrb	r0, [r1, #0]
 800afc0:	f7ff ff70 	bl	800aea4 <__hexdig_fun>
 800afc4:	1e43      	subs	r3, r0, #1
 800afc6:	b2db      	uxtb	r3, r3
 800afc8:	2b18      	cmp	r3, #24
 800afca:	d82c      	bhi.n	800b026 <__gethex+0x156>
 800afcc:	f1a0 0210 	sub.w	r2, r0, #16
 800afd0:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800afd4:	f7ff ff66 	bl	800aea4 <__hexdig_fun>
 800afd8:	1e43      	subs	r3, r0, #1
 800afda:	b2db      	uxtb	r3, r3
 800afdc:	2b18      	cmp	r3, #24
 800afde:	d91d      	bls.n	800b01c <__gethex+0x14c>
 800afe0:	f1b9 0f00 	cmp.w	r9, #0
 800afe4:	d000      	beq.n	800afe8 <__gethex+0x118>
 800afe6:	4252      	negs	r2, r2
 800afe8:	4415      	add	r5, r2
 800afea:	f8cb 1000 	str.w	r1, [fp]
 800afee:	b1e4      	cbz	r4, 800b02a <__gethex+0x15a>
 800aff0:	9b00      	ldr	r3, [sp, #0]
 800aff2:	2b00      	cmp	r3, #0
 800aff4:	bf14      	ite	ne
 800aff6:	2700      	movne	r7, #0
 800aff8:	2706      	moveq	r7, #6
 800affa:	4638      	mov	r0, r7
 800affc:	b009      	add	sp, #36	; 0x24
 800affe:	ecbd 8b02 	vpop	{d8}
 800b002:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b006:	463e      	mov	r6, r7
 800b008:	4625      	mov	r5, r4
 800b00a:	2401      	movs	r4, #1
 800b00c:	e7ca      	b.n	800afa4 <__gethex+0xd4>
 800b00e:	f04f 0900 	mov.w	r9, #0
 800b012:	1cb1      	adds	r1, r6, #2
 800b014:	e7d3      	b.n	800afbe <__gethex+0xee>
 800b016:	f04f 0901 	mov.w	r9, #1
 800b01a:	e7fa      	b.n	800b012 <__gethex+0x142>
 800b01c:	230a      	movs	r3, #10
 800b01e:	fb03 0202 	mla	r2, r3, r2, r0
 800b022:	3a10      	subs	r2, #16
 800b024:	e7d4      	b.n	800afd0 <__gethex+0x100>
 800b026:	4631      	mov	r1, r6
 800b028:	e7df      	b.n	800afea <__gethex+0x11a>
 800b02a:	1bf3      	subs	r3, r6, r7
 800b02c:	3b01      	subs	r3, #1
 800b02e:	4621      	mov	r1, r4
 800b030:	2b07      	cmp	r3, #7
 800b032:	dc0b      	bgt.n	800b04c <__gethex+0x17c>
 800b034:	ee18 0a10 	vmov	r0, s16
 800b038:	f000 fa8e 	bl	800b558 <_Balloc>
 800b03c:	4604      	mov	r4, r0
 800b03e:	b940      	cbnz	r0, 800b052 <__gethex+0x182>
 800b040:	4b5d      	ldr	r3, [pc, #372]	; (800b1b8 <__gethex+0x2e8>)
 800b042:	4602      	mov	r2, r0
 800b044:	21de      	movs	r1, #222	; 0xde
 800b046:	485d      	ldr	r0, [pc, #372]	; (800b1bc <__gethex+0x2ec>)
 800b048:	f001 f944 	bl	800c2d4 <__assert_func>
 800b04c:	3101      	adds	r1, #1
 800b04e:	105b      	asrs	r3, r3, #1
 800b050:	e7ee      	b.n	800b030 <__gethex+0x160>
 800b052:	f100 0914 	add.w	r9, r0, #20
 800b056:	f04f 0b00 	mov.w	fp, #0
 800b05a:	f1ca 0301 	rsb	r3, sl, #1
 800b05e:	f8cd 9008 	str.w	r9, [sp, #8]
 800b062:	f8cd b000 	str.w	fp, [sp]
 800b066:	9306      	str	r3, [sp, #24]
 800b068:	42b7      	cmp	r7, r6
 800b06a:	d340      	bcc.n	800b0ee <__gethex+0x21e>
 800b06c:	9802      	ldr	r0, [sp, #8]
 800b06e:	9b00      	ldr	r3, [sp, #0]
 800b070:	f840 3b04 	str.w	r3, [r0], #4
 800b074:	eba0 0009 	sub.w	r0, r0, r9
 800b078:	1080      	asrs	r0, r0, #2
 800b07a:	0146      	lsls	r6, r0, #5
 800b07c:	6120      	str	r0, [r4, #16]
 800b07e:	4618      	mov	r0, r3
 800b080:	f000 fb5c 	bl	800b73c <__hi0bits>
 800b084:	1a30      	subs	r0, r6, r0
 800b086:	f8d8 6000 	ldr.w	r6, [r8]
 800b08a:	42b0      	cmp	r0, r6
 800b08c:	dd63      	ble.n	800b156 <__gethex+0x286>
 800b08e:	1b87      	subs	r7, r0, r6
 800b090:	4639      	mov	r1, r7
 800b092:	4620      	mov	r0, r4
 800b094:	f000 ff00 	bl	800be98 <__any_on>
 800b098:	4682      	mov	sl, r0
 800b09a:	b1a8      	cbz	r0, 800b0c8 <__gethex+0x1f8>
 800b09c:	1e7b      	subs	r3, r7, #1
 800b09e:	1159      	asrs	r1, r3, #5
 800b0a0:	f003 021f 	and.w	r2, r3, #31
 800b0a4:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 800b0a8:	f04f 0a01 	mov.w	sl, #1
 800b0ac:	fa0a f202 	lsl.w	r2, sl, r2
 800b0b0:	420a      	tst	r2, r1
 800b0b2:	d009      	beq.n	800b0c8 <__gethex+0x1f8>
 800b0b4:	4553      	cmp	r3, sl
 800b0b6:	dd05      	ble.n	800b0c4 <__gethex+0x1f4>
 800b0b8:	1eb9      	subs	r1, r7, #2
 800b0ba:	4620      	mov	r0, r4
 800b0bc:	f000 feec 	bl	800be98 <__any_on>
 800b0c0:	2800      	cmp	r0, #0
 800b0c2:	d145      	bne.n	800b150 <__gethex+0x280>
 800b0c4:	f04f 0a02 	mov.w	sl, #2
 800b0c8:	4639      	mov	r1, r7
 800b0ca:	4620      	mov	r0, r4
 800b0cc:	f7ff fe98 	bl	800ae00 <rshift>
 800b0d0:	443d      	add	r5, r7
 800b0d2:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800b0d6:	42ab      	cmp	r3, r5
 800b0d8:	da4c      	bge.n	800b174 <__gethex+0x2a4>
 800b0da:	ee18 0a10 	vmov	r0, s16
 800b0de:	4621      	mov	r1, r4
 800b0e0:	f000 fa7a 	bl	800b5d8 <_Bfree>
 800b0e4:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800b0e6:	2300      	movs	r3, #0
 800b0e8:	6013      	str	r3, [r2, #0]
 800b0ea:	27a3      	movs	r7, #163	; 0xa3
 800b0ec:	e785      	b.n	800affa <__gethex+0x12a>
 800b0ee:	1e73      	subs	r3, r6, #1
 800b0f0:	9a05      	ldr	r2, [sp, #20]
 800b0f2:	9303      	str	r3, [sp, #12]
 800b0f4:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800b0f8:	4293      	cmp	r3, r2
 800b0fa:	d019      	beq.n	800b130 <__gethex+0x260>
 800b0fc:	f1bb 0f20 	cmp.w	fp, #32
 800b100:	d107      	bne.n	800b112 <__gethex+0x242>
 800b102:	9b02      	ldr	r3, [sp, #8]
 800b104:	9a00      	ldr	r2, [sp, #0]
 800b106:	f843 2b04 	str.w	r2, [r3], #4
 800b10a:	9302      	str	r3, [sp, #8]
 800b10c:	2300      	movs	r3, #0
 800b10e:	9300      	str	r3, [sp, #0]
 800b110:	469b      	mov	fp, r3
 800b112:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 800b116:	f7ff fec5 	bl	800aea4 <__hexdig_fun>
 800b11a:	9b00      	ldr	r3, [sp, #0]
 800b11c:	f000 000f 	and.w	r0, r0, #15
 800b120:	fa00 f00b 	lsl.w	r0, r0, fp
 800b124:	4303      	orrs	r3, r0
 800b126:	9300      	str	r3, [sp, #0]
 800b128:	f10b 0b04 	add.w	fp, fp, #4
 800b12c:	9b03      	ldr	r3, [sp, #12]
 800b12e:	e00d      	b.n	800b14c <__gethex+0x27c>
 800b130:	9b03      	ldr	r3, [sp, #12]
 800b132:	9a06      	ldr	r2, [sp, #24]
 800b134:	4413      	add	r3, r2
 800b136:	42bb      	cmp	r3, r7
 800b138:	d3e0      	bcc.n	800b0fc <__gethex+0x22c>
 800b13a:	4618      	mov	r0, r3
 800b13c:	9901      	ldr	r1, [sp, #4]
 800b13e:	9307      	str	r3, [sp, #28]
 800b140:	4652      	mov	r2, sl
 800b142:	f001 f8a5 	bl	800c290 <strncmp>
 800b146:	9b07      	ldr	r3, [sp, #28]
 800b148:	2800      	cmp	r0, #0
 800b14a:	d1d7      	bne.n	800b0fc <__gethex+0x22c>
 800b14c:	461e      	mov	r6, r3
 800b14e:	e78b      	b.n	800b068 <__gethex+0x198>
 800b150:	f04f 0a03 	mov.w	sl, #3
 800b154:	e7b8      	b.n	800b0c8 <__gethex+0x1f8>
 800b156:	da0a      	bge.n	800b16e <__gethex+0x29e>
 800b158:	1a37      	subs	r7, r6, r0
 800b15a:	4621      	mov	r1, r4
 800b15c:	ee18 0a10 	vmov	r0, s16
 800b160:	463a      	mov	r2, r7
 800b162:	f000 fc55 	bl	800ba10 <__lshift>
 800b166:	1bed      	subs	r5, r5, r7
 800b168:	4604      	mov	r4, r0
 800b16a:	f100 0914 	add.w	r9, r0, #20
 800b16e:	f04f 0a00 	mov.w	sl, #0
 800b172:	e7ae      	b.n	800b0d2 <__gethex+0x202>
 800b174:	f8d8 0004 	ldr.w	r0, [r8, #4]
 800b178:	42a8      	cmp	r0, r5
 800b17a:	dd72      	ble.n	800b262 <__gethex+0x392>
 800b17c:	1b45      	subs	r5, r0, r5
 800b17e:	42ae      	cmp	r6, r5
 800b180:	dc36      	bgt.n	800b1f0 <__gethex+0x320>
 800b182:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800b186:	2b02      	cmp	r3, #2
 800b188:	d02a      	beq.n	800b1e0 <__gethex+0x310>
 800b18a:	2b03      	cmp	r3, #3
 800b18c:	d02c      	beq.n	800b1e8 <__gethex+0x318>
 800b18e:	2b01      	cmp	r3, #1
 800b190:	d11c      	bne.n	800b1cc <__gethex+0x2fc>
 800b192:	42ae      	cmp	r6, r5
 800b194:	d11a      	bne.n	800b1cc <__gethex+0x2fc>
 800b196:	2e01      	cmp	r6, #1
 800b198:	d112      	bne.n	800b1c0 <__gethex+0x2f0>
 800b19a:	9a04      	ldr	r2, [sp, #16]
 800b19c:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800b1a0:	6013      	str	r3, [r2, #0]
 800b1a2:	2301      	movs	r3, #1
 800b1a4:	6123      	str	r3, [r4, #16]
 800b1a6:	f8c9 3000 	str.w	r3, [r9]
 800b1aa:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800b1ac:	2762      	movs	r7, #98	; 0x62
 800b1ae:	601c      	str	r4, [r3, #0]
 800b1b0:	e723      	b.n	800affa <__gethex+0x12a>
 800b1b2:	bf00      	nop
 800b1b4:	0800cdc8 	.word	0x0800cdc8
 800b1b8:	0800cd50 	.word	0x0800cd50
 800b1bc:	0800cd61 	.word	0x0800cd61
 800b1c0:	1e71      	subs	r1, r6, #1
 800b1c2:	4620      	mov	r0, r4
 800b1c4:	f000 fe68 	bl	800be98 <__any_on>
 800b1c8:	2800      	cmp	r0, #0
 800b1ca:	d1e6      	bne.n	800b19a <__gethex+0x2ca>
 800b1cc:	ee18 0a10 	vmov	r0, s16
 800b1d0:	4621      	mov	r1, r4
 800b1d2:	f000 fa01 	bl	800b5d8 <_Bfree>
 800b1d6:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800b1d8:	2300      	movs	r3, #0
 800b1da:	6013      	str	r3, [r2, #0]
 800b1dc:	2750      	movs	r7, #80	; 0x50
 800b1de:	e70c      	b.n	800affa <__gethex+0x12a>
 800b1e0:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800b1e2:	2b00      	cmp	r3, #0
 800b1e4:	d1f2      	bne.n	800b1cc <__gethex+0x2fc>
 800b1e6:	e7d8      	b.n	800b19a <__gethex+0x2ca>
 800b1e8:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800b1ea:	2b00      	cmp	r3, #0
 800b1ec:	d1d5      	bne.n	800b19a <__gethex+0x2ca>
 800b1ee:	e7ed      	b.n	800b1cc <__gethex+0x2fc>
 800b1f0:	1e6f      	subs	r7, r5, #1
 800b1f2:	f1ba 0f00 	cmp.w	sl, #0
 800b1f6:	d131      	bne.n	800b25c <__gethex+0x38c>
 800b1f8:	b127      	cbz	r7, 800b204 <__gethex+0x334>
 800b1fa:	4639      	mov	r1, r7
 800b1fc:	4620      	mov	r0, r4
 800b1fe:	f000 fe4b 	bl	800be98 <__any_on>
 800b202:	4682      	mov	sl, r0
 800b204:	117b      	asrs	r3, r7, #5
 800b206:	2101      	movs	r1, #1
 800b208:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 800b20c:	f007 071f 	and.w	r7, r7, #31
 800b210:	fa01 f707 	lsl.w	r7, r1, r7
 800b214:	421f      	tst	r7, r3
 800b216:	4629      	mov	r1, r5
 800b218:	4620      	mov	r0, r4
 800b21a:	bf18      	it	ne
 800b21c:	f04a 0a02 	orrne.w	sl, sl, #2
 800b220:	1b76      	subs	r6, r6, r5
 800b222:	f7ff fded 	bl	800ae00 <rshift>
 800b226:	f8d8 5004 	ldr.w	r5, [r8, #4]
 800b22a:	2702      	movs	r7, #2
 800b22c:	f1ba 0f00 	cmp.w	sl, #0
 800b230:	d048      	beq.n	800b2c4 <__gethex+0x3f4>
 800b232:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800b236:	2b02      	cmp	r3, #2
 800b238:	d015      	beq.n	800b266 <__gethex+0x396>
 800b23a:	2b03      	cmp	r3, #3
 800b23c:	d017      	beq.n	800b26e <__gethex+0x39e>
 800b23e:	2b01      	cmp	r3, #1
 800b240:	d109      	bne.n	800b256 <__gethex+0x386>
 800b242:	f01a 0f02 	tst.w	sl, #2
 800b246:	d006      	beq.n	800b256 <__gethex+0x386>
 800b248:	f8d9 0000 	ldr.w	r0, [r9]
 800b24c:	ea4a 0a00 	orr.w	sl, sl, r0
 800b250:	f01a 0f01 	tst.w	sl, #1
 800b254:	d10e      	bne.n	800b274 <__gethex+0x3a4>
 800b256:	f047 0710 	orr.w	r7, r7, #16
 800b25a:	e033      	b.n	800b2c4 <__gethex+0x3f4>
 800b25c:	f04f 0a01 	mov.w	sl, #1
 800b260:	e7d0      	b.n	800b204 <__gethex+0x334>
 800b262:	2701      	movs	r7, #1
 800b264:	e7e2      	b.n	800b22c <__gethex+0x35c>
 800b266:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800b268:	f1c3 0301 	rsb	r3, r3, #1
 800b26c:	9315      	str	r3, [sp, #84]	; 0x54
 800b26e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800b270:	2b00      	cmp	r3, #0
 800b272:	d0f0      	beq.n	800b256 <__gethex+0x386>
 800b274:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800b278:	f104 0314 	add.w	r3, r4, #20
 800b27c:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 800b280:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 800b284:	f04f 0c00 	mov.w	ip, #0
 800b288:	4618      	mov	r0, r3
 800b28a:	f853 2b04 	ldr.w	r2, [r3], #4
 800b28e:	f1b2 3fff 	cmp.w	r2, #4294967295
 800b292:	d01c      	beq.n	800b2ce <__gethex+0x3fe>
 800b294:	3201      	adds	r2, #1
 800b296:	6002      	str	r2, [r0, #0]
 800b298:	2f02      	cmp	r7, #2
 800b29a:	f104 0314 	add.w	r3, r4, #20
 800b29e:	d13f      	bne.n	800b320 <__gethex+0x450>
 800b2a0:	f8d8 2000 	ldr.w	r2, [r8]
 800b2a4:	3a01      	subs	r2, #1
 800b2a6:	42b2      	cmp	r2, r6
 800b2a8:	d10a      	bne.n	800b2c0 <__gethex+0x3f0>
 800b2aa:	1171      	asrs	r1, r6, #5
 800b2ac:	2201      	movs	r2, #1
 800b2ae:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800b2b2:	f006 061f 	and.w	r6, r6, #31
 800b2b6:	fa02 f606 	lsl.w	r6, r2, r6
 800b2ba:	421e      	tst	r6, r3
 800b2bc:	bf18      	it	ne
 800b2be:	4617      	movne	r7, r2
 800b2c0:	f047 0720 	orr.w	r7, r7, #32
 800b2c4:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800b2c6:	601c      	str	r4, [r3, #0]
 800b2c8:	9b04      	ldr	r3, [sp, #16]
 800b2ca:	601d      	str	r5, [r3, #0]
 800b2cc:	e695      	b.n	800affa <__gethex+0x12a>
 800b2ce:	4299      	cmp	r1, r3
 800b2d0:	f843 cc04 	str.w	ip, [r3, #-4]
 800b2d4:	d8d8      	bhi.n	800b288 <__gethex+0x3b8>
 800b2d6:	68a3      	ldr	r3, [r4, #8]
 800b2d8:	459b      	cmp	fp, r3
 800b2da:	db19      	blt.n	800b310 <__gethex+0x440>
 800b2dc:	6861      	ldr	r1, [r4, #4]
 800b2de:	ee18 0a10 	vmov	r0, s16
 800b2e2:	3101      	adds	r1, #1
 800b2e4:	f000 f938 	bl	800b558 <_Balloc>
 800b2e8:	4681      	mov	r9, r0
 800b2ea:	b918      	cbnz	r0, 800b2f4 <__gethex+0x424>
 800b2ec:	4b1a      	ldr	r3, [pc, #104]	; (800b358 <__gethex+0x488>)
 800b2ee:	4602      	mov	r2, r0
 800b2f0:	2184      	movs	r1, #132	; 0x84
 800b2f2:	e6a8      	b.n	800b046 <__gethex+0x176>
 800b2f4:	6922      	ldr	r2, [r4, #16]
 800b2f6:	3202      	adds	r2, #2
 800b2f8:	f104 010c 	add.w	r1, r4, #12
 800b2fc:	0092      	lsls	r2, r2, #2
 800b2fe:	300c      	adds	r0, #12
 800b300:	f7fc ff67 	bl	80081d2 <memcpy>
 800b304:	4621      	mov	r1, r4
 800b306:	ee18 0a10 	vmov	r0, s16
 800b30a:	f000 f965 	bl	800b5d8 <_Bfree>
 800b30e:	464c      	mov	r4, r9
 800b310:	6923      	ldr	r3, [r4, #16]
 800b312:	1c5a      	adds	r2, r3, #1
 800b314:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800b318:	6122      	str	r2, [r4, #16]
 800b31a:	2201      	movs	r2, #1
 800b31c:	615a      	str	r2, [r3, #20]
 800b31e:	e7bb      	b.n	800b298 <__gethex+0x3c8>
 800b320:	6922      	ldr	r2, [r4, #16]
 800b322:	455a      	cmp	r2, fp
 800b324:	dd0b      	ble.n	800b33e <__gethex+0x46e>
 800b326:	2101      	movs	r1, #1
 800b328:	4620      	mov	r0, r4
 800b32a:	f7ff fd69 	bl	800ae00 <rshift>
 800b32e:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800b332:	3501      	adds	r5, #1
 800b334:	42ab      	cmp	r3, r5
 800b336:	f6ff aed0 	blt.w	800b0da <__gethex+0x20a>
 800b33a:	2701      	movs	r7, #1
 800b33c:	e7c0      	b.n	800b2c0 <__gethex+0x3f0>
 800b33e:	f016 061f 	ands.w	r6, r6, #31
 800b342:	d0fa      	beq.n	800b33a <__gethex+0x46a>
 800b344:	4453      	add	r3, sl
 800b346:	f1c6 0620 	rsb	r6, r6, #32
 800b34a:	f853 0c04 	ldr.w	r0, [r3, #-4]
 800b34e:	f000 f9f5 	bl	800b73c <__hi0bits>
 800b352:	42b0      	cmp	r0, r6
 800b354:	dbe7      	blt.n	800b326 <__gethex+0x456>
 800b356:	e7f0      	b.n	800b33a <__gethex+0x46a>
 800b358:	0800cd50 	.word	0x0800cd50

0800b35c <L_shift>:
 800b35c:	f1c2 0208 	rsb	r2, r2, #8
 800b360:	0092      	lsls	r2, r2, #2
 800b362:	b570      	push	{r4, r5, r6, lr}
 800b364:	f1c2 0620 	rsb	r6, r2, #32
 800b368:	6843      	ldr	r3, [r0, #4]
 800b36a:	6804      	ldr	r4, [r0, #0]
 800b36c:	fa03 f506 	lsl.w	r5, r3, r6
 800b370:	432c      	orrs	r4, r5
 800b372:	40d3      	lsrs	r3, r2
 800b374:	6004      	str	r4, [r0, #0]
 800b376:	f840 3f04 	str.w	r3, [r0, #4]!
 800b37a:	4288      	cmp	r0, r1
 800b37c:	d3f4      	bcc.n	800b368 <L_shift+0xc>
 800b37e:	bd70      	pop	{r4, r5, r6, pc}

0800b380 <__match>:
 800b380:	b530      	push	{r4, r5, lr}
 800b382:	6803      	ldr	r3, [r0, #0]
 800b384:	3301      	adds	r3, #1
 800b386:	f811 4b01 	ldrb.w	r4, [r1], #1
 800b38a:	b914      	cbnz	r4, 800b392 <__match+0x12>
 800b38c:	6003      	str	r3, [r0, #0]
 800b38e:	2001      	movs	r0, #1
 800b390:	bd30      	pop	{r4, r5, pc}
 800b392:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b396:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 800b39a:	2d19      	cmp	r5, #25
 800b39c:	bf98      	it	ls
 800b39e:	3220      	addls	r2, #32
 800b3a0:	42a2      	cmp	r2, r4
 800b3a2:	d0f0      	beq.n	800b386 <__match+0x6>
 800b3a4:	2000      	movs	r0, #0
 800b3a6:	e7f3      	b.n	800b390 <__match+0x10>

0800b3a8 <__hexnan>:
 800b3a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b3ac:	680b      	ldr	r3, [r1, #0]
 800b3ae:	115e      	asrs	r6, r3, #5
 800b3b0:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800b3b4:	f013 031f 	ands.w	r3, r3, #31
 800b3b8:	b087      	sub	sp, #28
 800b3ba:	bf18      	it	ne
 800b3bc:	3604      	addne	r6, #4
 800b3be:	2500      	movs	r5, #0
 800b3c0:	1f37      	subs	r7, r6, #4
 800b3c2:	4690      	mov	r8, r2
 800b3c4:	6802      	ldr	r2, [r0, #0]
 800b3c6:	9301      	str	r3, [sp, #4]
 800b3c8:	4682      	mov	sl, r0
 800b3ca:	f846 5c04 	str.w	r5, [r6, #-4]
 800b3ce:	46b9      	mov	r9, r7
 800b3d0:	463c      	mov	r4, r7
 800b3d2:	9502      	str	r5, [sp, #8]
 800b3d4:	46ab      	mov	fp, r5
 800b3d6:	7851      	ldrb	r1, [r2, #1]
 800b3d8:	1c53      	adds	r3, r2, #1
 800b3da:	9303      	str	r3, [sp, #12]
 800b3dc:	b341      	cbz	r1, 800b430 <__hexnan+0x88>
 800b3de:	4608      	mov	r0, r1
 800b3e0:	9205      	str	r2, [sp, #20]
 800b3e2:	9104      	str	r1, [sp, #16]
 800b3e4:	f7ff fd5e 	bl	800aea4 <__hexdig_fun>
 800b3e8:	2800      	cmp	r0, #0
 800b3ea:	d14f      	bne.n	800b48c <__hexnan+0xe4>
 800b3ec:	9904      	ldr	r1, [sp, #16]
 800b3ee:	9a05      	ldr	r2, [sp, #20]
 800b3f0:	2920      	cmp	r1, #32
 800b3f2:	d818      	bhi.n	800b426 <__hexnan+0x7e>
 800b3f4:	9b02      	ldr	r3, [sp, #8]
 800b3f6:	459b      	cmp	fp, r3
 800b3f8:	dd13      	ble.n	800b422 <__hexnan+0x7a>
 800b3fa:	454c      	cmp	r4, r9
 800b3fc:	d206      	bcs.n	800b40c <__hexnan+0x64>
 800b3fe:	2d07      	cmp	r5, #7
 800b400:	dc04      	bgt.n	800b40c <__hexnan+0x64>
 800b402:	462a      	mov	r2, r5
 800b404:	4649      	mov	r1, r9
 800b406:	4620      	mov	r0, r4
 800b408:	f7ff ffa8 	bl	800b35c <L_shift>
 800b40c:	4544      	cmp	r4, r8
 800b40e:	d950      	bls.n	800b4b2 <__hexnan+0x10a>
 800b410:	2300      	movs	r3, #0
 800b412:	f1a4 0904 	sub.w	r9, r4, #4
 800b416:	f844 3c04 	str.w	r3, [r4, #-4]
 800b41a:	f8cd b008 	str.w	fp, [sp, #8]
 800b41e:	464c      	mov	r4, r9
 800b420:	461d      	mov	r5, r3
 800b422:	9a03      	ldr	r2, [sp, #12]
 800b424:	e7d7      	b.n	800b3d6 <__hexnan+0x2e>
 800b426:	2929      	cmp	r1, #41	; 0x29
 800b428:	d156      	bne.n	800b4d8 <__hexnan+0x130>
 800b42a:	3202      	adds	r2, #2
 800b42c:	f8ca 2000 	str.w	r2, [sl]
 800b430:	f1bb 0f00 	cmp.w	fp, #0
 800b434:	d050      	beq.n	800b4d8 <__hexnan+0x130>
 800b436:	454c      	cmp	r4, r9
 800b438:	d206      	bcs.n	800b448 <__hexnan+0xa0>
 800b43a:	2d07      	cmp	r5, #7
 800b43c:	dc04      	bgt.n	800b448 <__hexnan+0xa0>
 800b43e:	462a      	mov	r2, r5
 800b440:	4649      	mov	r1, r9
 800b442:	4620      	mov	r0, r4
 800b444:	f7ff ff8a 	bl	800b35c <L_shift>
 800b448:	4544      	cmp	r4, r8
 800b44a:	d934      	bls.n	800b4b6 <__hexnan+0x10e>
 800b44c:	f1a8 0204 	sub.w	r2, r8, #4
 800b450:	4623      	mov	r3, r4
 800b452:	f853 1b04 	ldr.w	r1, [r3], #4
 800b456:	f842 1f04 	str.w	r1, [r2, #4]!
 800b45a:	429f      	cmp	r7, r3
 800b45c:	d2f9      	bcs.n	800b452 <__hexnan+0xaa>
 800b45e:	1b3b      	subs	r3, r7, r4
 800b460:	f023 0303 	bic.w	r3, r3, #3
 800b464:	3304      	adds	r3, #4
 800b466:	3401      	adds	r4, #1
 800b468:	3e03      	subs	r6, #3
 800b46a:	42b4      	cmp	r4, r6
 800b46c:	bf88      	it	hi
 800b46e:	2304      	movhi	r3, #4
 800b470:	4443      	add	r3, r8
 800b472:	2200      	movs	r2, #0
 800b474:	f843 2b04 	str.w	r2, [r3], #4
 800b478:	429f      	cmp	r7, r3
 800b47a:	d2fb      	bcs.n	800b474 <__hexnan+0xcc>
 800b47c:	683b      	ldr	r3, [r7, #0]
 800b47e:	b91b      	cbnz	r3, 800b488 <__hexnan+0xe0>
 800b480:	4547      	cmp	r7, r8
 800b482:	d127      	bne.n	800b4d4 <__hexnan+0x12c>
 800b484:	2301      	movs	r3, #1
 800b486:	603b      	str	r3, [r7, #0]
 800b488:	2005      	movs	r0, #5
 800b48a:	e026      	b.n	800b4da <__hexnan+0x132>
 800b48c:	3501      	adds	r5, #1
 800b48e:	2d08      	cmp	r5, #8
 800b490:	f10b 0b01 	add.w	fp, fp, #1
 800b494:	dd06      	ble.n	800b4a4 <__hexnan+0xfc>
 800b496:	4544      	cmp	r4, r8
 800b498:	d9c3      	bls.n	800b422 <__hexnan+0x7a>
 800b49a:	2300      	movs	r3, #0
 800b49c:	f844 3c04 	str.w	r3, [r4, #-4]
 800b4a0:	2501      	movs	r5, #1
 800b4a2:	3c04      	subs	r4, #4
 800b4a4:	6822      	ldr	r2, [r4, #0]
 800b4a6:	f000 000f 	and.w	r0, r0, #15
 800b4aa:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 800b4ae:	6022      	str	r2, [r4, #0]
 800b4b0:	e7b7      	b.n	800b422 <__hexnan+0x7a>
 800b4b2:	2508      	movs	r5, #8
 800b4b4:	e7b5      	b.n	800b422 <__hexnan+0x7a>
 800b4b6:	9b01      	ldr	r3, [sp, #4]
 800b4b8:	2b00      	cmp	r3, #0
 800b4ba:	d0df      	beq.n	800b47c <__hexnan+0xd4>
 800b4bc:	f04f 32ff 	mov.w	r2, #4294967295
 800b4c0:	f1c3 0320 	rsb	r3, r3, #32
 800b4c4:	fa22 f303 	lsr.w	r3, r2, r3
 800b4c8:	f856 2c04 	ldr.w	r2, [r6, #-4]
 800b4cc:	401a      	ands	r2, r3
 800b4ce:	f846 2c04 	str.w	r2, [r6, #-4]
 800b4d2:	e7d3      	b.n	800b47c <__hexnan+0xd4>
 800b4d4:	3f04      	subs	r7, #4
 800b4d6:	e7d1      	b.n	800b47c <__hexnan+0xd4>
 800b4d8:	2004      	movs	r0, #4
 800b4da:	b007      	add	sp, #28
 800b4dc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800b4e0 <_localeconv_r>:
 800b4e0:	4800      	ldr	r0, [pc, #0]	; (800b4e4 <_localeconv_r+0x4>)
 800b4e2:	4770      	bx	lr
 800b4e4:	20000168 	.word	0x20000168

0800b4e8 <_lseek_r>:
 800b4e8:	b538      	push	{r3, r4, r5, lr}
 800b4ea:	4d07      	ldr	r5, [pc, #28]	; (800b508 <_lseek_r+0x20>)
 800b4ec:	4604      	mov	r4, r0
 800b4ee:	4608      	mov	r0, r1
 800b4f0:	4611      	mov	r1, r2
 800b4f2:	2200      	movs	r2, #0
 800b4f4:	602a      	str	r2, [r5, #0]
 800b4f6:	461a      	mov	r2, r3
 800b4f8:	f7f6 fa76 	bl	80019e8 <_lseek>
 800b4fc:	1c43      	adds	r3, r0, #1
 800b4fe:	d102      	bne.n	800b506 <_lseek_r+0x1e>
 800b500:	682b      	ldr	r3, [r5, #0]
 800b502:	b103      	cbz	r3, 800b506 <_lseek_r+0x1e>
 800b504:	6023      	str	r3, [r4, #0]
 800b506:	bd38      	pop	{r3, r4, r5, pc}
 800b508:	20001dc0 	.word	0x20001dc0

0800b50c <malloc>:
 800b50c:	4b02      	ldr	r3, [pc, #8]	; (800b518 <malloc+0xc>)
 800b50e:	4601      	mov	r1, r0
 800b510:	6818      	ldr	r0, [r3, #0]
 800b512:	f7fc be95 	b.w	8008240 <_malloc_r>
 800b516:	bf00      	nop
 800b518:	20000010 	.word	0x20000010

0800b51c <__ascii_mbtowc>:
 800b51c:	b082      	sub	sp, #8
 800b51e:	b901      	cbnz	r1, 800b522 <__ascii_mbtowc+0x6>
 800b520:	a901      	add	r1, sp, #4
 800b522:	b142      	cbz	r2, 800b536 <__ascii_mbtowc+0x1a>
 800b524:	b14b      	cbz	r3, 800b53a <__ascii_mbtowc+0x1e>
 800b526:	7813      	ldrb	r3, [r2, #0]
 800b528:	600b      	str	r3, [r1, #0]
 800b52a:	7812      	ldrb	r2, [r2, #0]
 800b52c:	1e10      	subs	r0, r2, #0
 800b52e:	bf18      	it	ne
 800b530:	2001      	movne	r0, #1
 800b532:	b002      	add	sp, #8
 800b534:	4770      	bx	lr
 800b536:	4610      	mov	r0, r2
 800b538:	e7fb      	b.n	800b532 <__ascii_mbtowc+0x16>
 800b53a:	f06f 0001 	mvn.w	r0, #1
 800b53e:	e7f8      	b.n	800b532 <__ascii_mbtowc+0x16>

0800b540 <__malloc_lock>:
 800b540:	4801      	ldr	r0, [pc, #4]	; (800b548 <__malloc_lock+0x8>)
 800b542:	f7fc be44 	b.w	80081ce <__retarget_lock_acquire_recursive>
 800b546:	bf00      	nop
 800b548:	20001db4 	.word	0x20001db4

0800b54c <__malloc_unlock>:
 800b54c:	4801      	ldr	r0, [pc, #4]	; (800b554 <__malloc_unlock+0x8>)
 800b54e:	f7fc be3f 	b.w	80081d0 <__retarget_lock_release_recursive>
 800b552:	bf00      	nop
 800b554:	20001db4 	.word	0x20001db4

0800b558 <_Balloc>:
 800b558:	b570      	push	{r4, r5, r6, lr}
 800b55a:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800b55c:	4604      	mov	r4, r0
 800b55e:	460d      	mov	r5, r1
 800b560:	b976      	cbnz	r6, 800b580 <_Balloc+0x28>
 800b562:	2010      	movs	r0, #16
 800b564:	f7ff ffd2 	bl	800b50c <malloc>
 800b568:	4602      	mov	r2, r0
 800b56a:	6260      	str	r0, [r4, #36]	; 0x24
 800b56c:	b920      	cbnz	r0, 800b578 <_Balloc+0x20>
 800b56e:	4b18      	ldr	r3, [pc, #96]	; (800b5d0 <_Balloc+0x78>)
 800b570:	4818      	ldr	r0, [pc, #96]	; (800b5d4 <_Balloc+0x7c>)
 800b572:	2166      	movs	r1, #102	; 0x66
 800b574:	f000 feae 	bl	800c2d4 <__assert_func>
 800b578:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800b57c:	6006      	str	r6, [r0, #0]
 800b57e:	60c6      	str	r6, [r0, #12]
 800b580:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800b582:	68f3      	ldr	r3, [r6, #12]
 800b584:	b183      	cbz	r3, 800b5a8 <_Balloc+0x50>
 800b586:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800b588:	68db      	ldr	r3, [r3, #12]
 800b58a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800b58e:	b9b8      	cbnz	r0, 800b5c0 <_Balloc+0x68>
 800b590:	2101      	movs	r1, #1
 800b592:	fa01 f605 	lsl.w	r6, r1, r5
 800b596:	1d72      	adds	r2, r6, #5
 800b598:	0092      	lsls	r2, r2, #2
 800b59a:	4620      	mov	r0, r4
 800b59c:	f000 fc9d 	bl	800beda <_calloc_r>
 800b5a0:	b160      	cbz	r0, 800b5bc <_Balloc+0x64>
 800b5a2:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800b5a6:	e00e      	b.n	800b5c6 <_Balloc+0x6e>
 800b5a8:	2221      	movs	r2, #33	; 0x21
 800b5aa:	2104      	movs	r1, #4
 800b5ac:	4620      	mov	r0, r4
 800b5ae:	f000 fc94 	bl	800beda <_calloc_r>
 800b5b2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800b5b4:	60f0      	str	r0, [r6, #12]
 800b5b6:	68db      	ldr	r3, [r3, #12]
 800b5b8:	2b00      	cmp	r3, #0
 800b5ba:	d1e4      	bne.n	800b586 <_Balloc+0x2e>
 800b5bc:	2000      	movs	r0, #0
 800b5be:	bd70      	pop	{r4, r5, r6, pc}
 800b5c0:	6802      	ldr	r2, [r0, #0]
 800b5c2:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800b5c6:	2300      	movs	r3, #0
 800b5c8:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800b5cc:	e7f7      	b.n	800b5be <_Balloc+0x66>
 800b5ce:	bf00      	nop
 800b5d0:	0800ccde 	.word	0x0800ccde
 800b5d4:	0800cddc 	.word	0x0800cddc

0800b5d8 <_Bfree>:
 800b5d8:	b570      	push	{r4, r5, r6, lr}
 800b5da:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800b5dc:	4605      	mov	r5, r0
 800b5de:	460c      	mov	r4, r1
 800b5e0:	b976      	cbnz	r6, 800b600 <_Bfree+0x28>
 800b5e2:	2010      	movs	r0, #16
 800b5e4:	f7ff ff92 	bl	800b50c <malloc>
 800b5e8:	4602      	mov	r2, r0
 800b5ea:	6268      	str	r0, [r5, #36]	; 0x24
 800b5ec:	b920      	cbnz	r0, 800b5f8 <_Bfree+0x20>
 800b5ee:	4b09      	ldr	r3, [pc, #36]	; (800b614 <_Bfree+0x3c>)
 800b5f0:	4809      	ldr	r0, [pc, #36]	; (800b618 <_Bfree+0x40>)
 800b5f2:	218a      	movs	r1, #138	; 0x8a
 800b5f4:	f000 fe6e 	bl	800c2d4 <__assert_func>
 800b5f8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800b5fc:	6006      	str	r6, [r0, #0]
 800b5fe:	60c6      	str	r6, [r0, #12]
 800b600:	b13c      	cbz	r4, 800b612 <_Bfree+0x3a>
 800b602:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800b604:	6862      	ldr	r2, [r4, #4]
 800b606:	68db      	ldr	r3, [r3, #12]
 800b608:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800b60c:	6021      	str	r1, [r4, #0]
 800b60e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800b612:	bd70      	pop	{r4, r5, r6, pc}
 800b614:	0800ccde 	.word	0x0800ccde
 800b618:	0800cddc 	.word	0x0800cddc

0800b61c <__multadd>:
 800b61c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b620:	690d      	ldr	r5, [r1, #16]
 800b622:	4607      	mov	r7, r0
 800b624:	460c      	mov	r4, r1
 800b626:	461e      	mov	r6, r3
 800b628:	f101 0c14 	add.w	ip, r1, #20
 800b62c:	2000      	movs	r0, #0
 800b62e:	f8dc 3000 	ldr.w	r3, [ip]
 800b632:	b299      	uxth	r1, r3
 800b634:	fb02 6101 	mla	r1, r2, r1, r6
 800b638:	0c1e      	lsrs	r6, r3, #16
 800b63a:	0c0b      	lsrs	r3, r1, #16
 800b63c:	fb02 3306 	mla	r3, r2, r6, r3
 800b640:	b289      	uxth	r1, r1
 800b642:	3001      	adds	r0, #1
 800b644:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800b648:	4285      	cmp	r5, r0
 800b64a:	f84c 1b04 	str.w	r1, [ip], #4
 800b64e:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800b652:	dcec      	bgt.n	800b62e <__multadd+0x12>
 800b654:	b30e      	cbz	r6, 800b69a <__multadd+0x7e>
 800b656:	68a3      	ldr	r3, [r4, #8]
 800b658:	42ab      	cmp	r3, r5
 800b65a:	dc19      	bgt.n	800b690 <__multadd+0x74>
 800b65c:	6861      	ldr	r1, [r4, #4]
 800b65e:	4638      	mov	r0, r7
 800b660:	3101      	adds	r1, #1
 800b662:	f7ff ff79 	bl	800b558 <_Balloc>
 800b666:	4680      	mov	r8, r0
 800b668:	b928      	cbnz	r0, 800b676 <__multadd+0x5a>
 800b66a:	4602      	mov	r2, r0
 800b66c:	4b0c      	ldr	r3, [pc, #48]	; (800b6a0 <__multadd+0x84>)
 800b66e:	480d      	ldr	r0, [pc, #52]	; (800b6a4 <__multadd+0x88>)
 800b670:	21b5      	movs	r1, #181	; 0xb5
 800b672:	f000 fe2f 	bl	800c2d4 <__assert_func>
 800b676:	6922      	ldr	r2, [r4, #16]
 800b678:	3202      	adds	r2, #2
 800b67a:	f104 010c 	add.w	r1, r4, #12
 800b67e:	0092      	lsls	r2, r2, #2
 800b680:	300c      	adds	r0, #12
 800b682:	f7fc fda6 	bl	80081d2 <memcpy>
 800b686:	4621      	mov	r1, r4
 800b688:	4638      	mov	r0, r7
 800b68a:	f7ff ffa5 	bl	800b5d8 <_Bfree>
 800b68e:	4644      	mov	r4, r8
 800b690:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800b694:	3501      	adds	r5, #1
 800b696:	615e      	str	r6, [r3, #20]
 800b698:	6125      	str	r5, [r4, #16]
 800b69a:	4620      	mov	r0, r4
 800b69c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b6a0:	0800cd50 	.word	0x0800cd50
 800b6a4:	0800cddc 	.word	0x0800cddc

0800b6a8 <__s2b>:
 800b6a8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b6ac:	460c      	mov	r4, r1
 800b6ae:	4615      	mov	r5, r2
 800b6b0:	461f      	mov	r7, r3
 800b6b2:	2209      	movs	r2, #9
 800b6b4:	3308      	adds	r3, #8
 800b6b6:	4606      	mov	r6, r0
 800b6b8:	fb93 f3f2 	sdiv	r3, r3, r2
 800b6bc:	2100      	movs	r1, #0
 800b6be:	2201      	movs	r2, #1
 800b6c0:	429a      	cmp	r2, r3
 800b6c2:	db09      	blt.n	800b6d8 <__s2b+0x30>
 800b6c4:	4630      	mov	r0, r6
 800b6c6:	f7ff ff47 	bl	800b558 <_Balloc>
 800b6ca:	b940      	cbnz	r0, 800b6de <__s2b+0x36>
 800b6cc:	4602      	mov	r2, r0
 800b6ce:	4b19      	ldr	r3, [pc, #100]	; (800b734 <__s2b+0x8c>)
 800b6d0:	4819      	ldr	r0, [pc, #100]	; (800b738 <__s2b+0x90>)
 800b6d2:	21ce      	movs	r1, #206	; 0xce
 800b6d4:	f000 fdfe 	bl	800c2d4 <__assert_func>
 800b6d8:	0052      	lsls	r2, r2, #1
 800b6da:	3101      	adds	r1, #1
 800b6dc:	e7f0      	b.n	800b6c0 <__s2b+0x18>
 800b6de:	9b08      	ldr	r3, [sp, #32]
 800b6e0:	6143      	str	r3, [r0, #20]
 800b6e2:	2d09      	cmp	r5, #9
 800b6e4:	f04f 0301 	mov.w	r3, #1
 800b6e8:	6103      	str	r3, [r0, #16]
 800b6ea:	dd16      	ble.n	800b71a <__s2b+0x72>
 800b6ec:	f104 0909 	add.w	r9, r4, #9
 800b6f0:	46c8      	mov	r8, r9
 800b6f2:	442c      	add	r4, r5
 800b6f4:	f818 3b01 	ldrb.w	r3, [r8], #1
 800b6f8:	4601      	mov	r1, r0
 800b6fa:	3b30      	subs	r3, #48	; 0x30
 800b6fc:	220a      	movs	r2, #10
 800b6fe:	4630      	mov	r0, r6
 800b700:	f7ff ff8c 	bl	800b61c <__multadd>
 800b704:	45a0      	cmp	r8, r4
 800b706:	d1f5      	bne.n	800b6f4 <__s2b+0x4c>
 800b708:	f1a5 0408 	sub.w	r4, r5, #8
 800b70c:	444c      	add	r4, r9
 800b70e:	1b2d      	subs	r5, r5, r4
 800b710:	1963      	adds	r3, r4, r5
 800b712:	42bb      	cmp	r3, r7
 800b714:	db04      	blt.n	800b720 <__s2b+0x78>
 800b716:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b71a:	340a      	adds	r4, #10
 800b71c:	2509      	movs	r5, #9
 800b71e:	e7f6      	b.n	800b70e <__s2b+0x66>
 800b720:	f814 3b01 	ldrb.w	r3, [r4], #1
 800b724:	4601      	mov	r1, r0
 800b726:	3b30      	subs	r3, #48	; 0x30
 800b728:	220a      	movs	r2, #10
 800b72a:	4630      	mov	r0, r6
 800b72c:	f7ff ff76 	bl	800b61c <__multadd>
 800b730:	e7ee      	b.n	800b710 <__s2b+0x68>
 800b732:	bf00      	nop
 800b734:	0800cd50 	.word	0x0800cd50
 800b738:	0800cddc 	.word	0x0800cddc

0800b73c <__hi0bits>:
 800b73c:	0c03      	lsrs	r3, r0, #16
 800b73e:	041b      	lsls	r3, r3, #16
 800b740:	b9d3      	cbnz	r3, 800b778 <__hi0bits+0x3c>
 800b742:	0400      	lsls	r0, r0, #16
 800b744:	2310      	movs	r3, #16
 800b746:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800b74a:	bf04      	itt	eq
 800b74c:	0200      	lsleq	r0, r0, #8
 800b74e:	3308      	addeq	r3, #8
 800b750:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800b754:	bf04      	itt	eq
 800b756:	0100      	lsleq	r0, r0, #4
 800b758:	3304      	addeq	r3, #4
 800b75a:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800b75e:	bf04      	itt	eq
 800b760:	0080      	lsleq	r0, r0, #2
 800b762:	3302      	addeq	r3, #2
 800b764:	2800      	cmp	r0, #0
 800b766:	db05      	blt.n	800b774 <__hi0bits+0x38>
 800b768:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800b76c:	f103 0301 	add.w	r3, r3, #1
 800b770:	bf08      	it	eq
 800b772:	2320      	moveq	r3, #32
 800b774:	4618      	mov	r0, r3
 800b776:	4770      	bx	lr
 800b778:	2300      	movs	r3, #0
 800b77a:	e7e4      	b.n	800b746 <__hi0bits+0xa>

0800b77c <__lo0bits>:
 800b77c:	6803      	ldr	r3, [r0, #0]
 800b77e:	f013 0207 	ands.w	r2, r3, #7
 800b782:	4601      	mov	r1, r0
 800b784:	d00b      	beq.n	800b79e <__lo0bits+0x22>
 800b786:	07da      	lsls	r2, r3, #31
 800b788:	d423      	bmi.n	800b7d2 <__lo0bits+0x56>
 800b78a:	0798      	lsls	r0, r3, #30
 800b78c:	bf49      	itett	mi
 800b78e:	085b      	lsrmi	r3, r3, #1
 800b790:	089b      	lsrpl	r3, r3, #2
 800b792:	2001      	movmi	r0, #1
 800b794:	600b      	strmi	r3, [r1, #0]
 800b796:	bf5c      	itt	pl
 800b798:	600b      	strpl	r3, [r1, #0]
 800b79a:	2002      	movpl	r0, #2
 800b79c:	4770      	bx	lr
 800b79e:	b298      	uxth	r0, r3
 800b7a0:	b9a8      	cbnz	r0, 800b7ce <__lo0bits+0x52>
 800b7a2:	0c1b      	lsrs	r3, r3, #16
 800b7a4:	2010      	movs	r0, #16
 800b7a6:	b2da      	uxtb	r2, r3
 800b7a8:	b90a      	cbnz	r2, 800b7ae <__lo0bits+0x32>
 800b7aa:	3008      	adds	r0, #8
 800b7ac:	0a1b      	lsrs	r3, r3, #8
 800b7ae:	071a      	lsls	r2, r3, #28
 800b7b0:	bf04      	itt	eq
 800b7b2:	091b      	lsreq	r3, r3, #4
 800b7b4:	3004      	addeq	r0, #4
 800b7b6:	079a      	lsls	r2, r3, #30
 800b7b8:	bf04      	itt	eq
 800b7ba:	089b      	lsreq	r3, r3, #2
 800b7bc:	3002      	addeq	r0, #2
 800b7be:	07da      	lsls	r2, r3, #31
 800b7c0:	d403      	bmi.n	800b7ca <__lo0bits+0x4e>
 800b7c2:	085b      	lsrs	r3, r3, #1
 800b7c4:	f100 0001 	add.w	r0, r0, #1
 800b7c8:	d005      	beq.n	800b7d6 <__lo0bits+0x5a>
 800b7ca:	600b      	str	r3, [r1, #0]
 800b7cc:	4770      	bx	lr
 800b7ce:	4610      	mov	r0, r2
 800b7d0:	e7e9      	b.n	800b7a6 <__lo0bits+0x2a>
 800b7d2:	2000      	movs	r0, #0
 800b7d4:	4770      	bx	lr
 800b7d6:	2020      	movs	r0, #32
 800b7d8:	4770      	bx	lr
	...

0800b7dc <__i2b>:
 800b7dc:	b510      	push	{r4, lr}
 800b7de:	460c      	mov	r4, r1
 800b7e0:	2101      	movs	r1, #1
 800b7e2:	f7ff feb9 	bl	800b558 <_Balloc>
 800b7e6:	4602      	mov	r2, r0
 800b7e8:	b928      	cbnz	r0, 800b7f6 <__i2b+0x1a>
 800b7ea:	4b05      	ldr	r3, [pc, #20]	; (800b800 <__i2b+0x24>)
 800b7ec:	4805      	ldr	r0, [pc, #20]	; (800b804 <__i2b+0x28>)
 800b7ee:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800b7f2:	f000 fd6f 	bl	800c2d4 <__assert_func>
 800b7f6:	2301      	movs	r3, #1
 800b7f8:	6144      	str	r4, [r0, #20]
 800b7fa:	6103      	str	r3, [r0, #16]
 800b7fc:	bd10      	pop	{r4, pc}
 800b7fe:	bf00      	nop
 800b800:	0800cd50 	.word	0x0800cd50
 800b804:	0800cddc 	.word	0x0800cddc

0800b808 <__multiply>:
 800b808:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b80c:	4691      	mov	r9, r2
 800b80e:	690a      	ldr	r2, [r1, #16]
 800b810:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800b814:	429a      	cmp	r2, r3
 800b816:	bfb8      	it	lt
 800b818:	460b      	movlt	r3, r1
 800b81a:	460c      	mov	r4, r1
 800b81c:	bfbc      	itt	lt
 800b81e:	464c      	movlt	r4, r9
 800b820:	4699      	movlt	r9, r3
 800b822:	6927      	ldr	r7, [r4, #16]
 800b824:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800b828:	68a3      	ldr	r3, [r4, #8]
 800b82a:	6861      	ldr	r1, [r4, #4]
 800b82c:	eb07 060a 	add.w	r6, r7, sl
 800b830:	42b3      	cmp	r3, r6
 800b832:	b085      	sub	sp, #20
 800b834:	bfb8      	it	lt
 800b836:	3101      	addlt	r1, #1
 800b838:	f7ff fe8e 	bl	800b558 <_Balloc>
 800b83c:	b930      	cbnz	r0, 800b84c <__multiply+0x44>
 800b83e:	4602      	mov	r2, r0
 800b840:	4b44      	ldr	r3, [pc, #272]	; (800b954 <__multiply+0x14c>)
 800b842:	4845      	ldr	r0, [pc, #276]	; (800b958 <__multiply+0x150>)
 800b844:	f240 115d 	movw	r1, #349	; 0x15d
 800b848:	f000 fd44 	bl	800c2d4 <__assert_func>
 800b84c:	f100 0514 	add.w	r5, r0, #20
 800b850:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800b854:	462b      	mov	r3, r5
 800b856:	2200      	movs	r2, #0
 800b858:	4543      	cmp	r3, r8
 800b85a:	d321      	bcc.n	800b8a0 <__multiply+0x98>
 800b85c:	f104 0314 	add.w	r3, r4, #20
 800b860:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800b864:	f109 0314 	add.w	r3, r9, #20
 800b868:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800b86c:	9202      	str	r2, [sp, #8]
 800b86e:	1b3a      	subs	r2, r7, r4
 800b870:	3a15      	subs	r2, #21
 800b872:	f022 0203 	bic.w	r2, r2, #3
 800b876:	3204      	adds	r2, #4
 800b878:	f104 0115 	add.w	r1, r4, #21
 800b87c:	428f      	cmp	r7, r1
 800b87e:	bf38      	it	cc
 800b880:	2204      	movcc	r2, #4
 800b882:	9201      	str	r2, [sp, #4]
 800b884:	9a02      	ldr	r2, [sp, #8]
 800b886:	9303      	str	r3, [sp, #12]
 800b888:	429a      	cmp	r2, r3
 800b88a:	d80c      	bhi.n	800b8a6 <__multiply+0x9e>
 800b88c:	2e00      	cmp	r6, #0
 800b88e:	dd03      	ble.n	800b898 <__multiply+0x90>
 800b890:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800b894:	2b00      	cmp	r3, #0
 800b896:	d05a      	beq.n	800b94e <__multiply+0x146>
 800b898:	6106      	str	r6, [r0, #16]
 800b89a:	b005      	add	sp, #20
 800b89c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b8a0:	f843 2b04 	str.w	r2, [r3], #4
 800b8a4:	e7d8      	b.n	800b858 <__multiply+0x50>
 800b8a6:	f8b3 a000 	ldrh.w	sl, [r3]
 800b8aa:	f1ba 0f00 	cmp.w	sl, #0
 800b8ae:	d024      	beq.n	800b8fa <__multiply+0xf2>
 800b8b0:	f104 0e14 	add.w	lr, r4, #20
 800b8b4:	46a9      	mov	r9, r5
 800b8b6:	f04f 0c00 	mov.w	ip, #0
 800b8ba:	f85e 2b04 	ldr.w	r2, [lr], #4
 800b8be:	f8d9 1000 	ldr.w	r1, [r9]
 800b8c2:	fa1f fb82 	uxth.w	fp, r2
 800b8c6:	b289      	uxth	r1, r1
 800b8c8:	fb0a 110b 	mla	r1, sl, fp, r1
 800b8cc:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 800b8d0:	f8d9 2000 	ldr.w	r2, [r9]
 800b8d4:	4461      	add	r1, ip
 800b8d6:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800b8da:	fb0a c20b 	mla	r2, sl, fp, ip
 800b8de:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800b8e2:	b289      	uxth	r1, r1
 800b8e4:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800b8e8:	4577      	cmp	r7, lr
 800b8ea:	f849 1b04 	str.w	r1, [r9], #4
 800b8ee:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800b8f2:	d8e2      	bhi.n	800b8ba <__multiply+0xb2>
 800b8f4:	9a01      	ldr	r2, [sp, #4]
 800b8f6:	f845 c002 	str.w	ip, [r5, r2]
 800b8fa:	9a03      	ldr	r2, [sp, #12]
 800b8fc:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800b900:	3304      	adds	r3, #4
 800b902:	f1b9 0f00 	cmp.w	r9, #0
 800b906:	d020      	beq.n	800b94a <__multiply+0x142>
 800b908:	6829      	ldr	r1, [r5, #0]
 800b90a:	f104 0c14 	add.w	ip, r4, #20
 800b90e:	46ae      	mov	lr, r5
 800b910:	f04f 0a00 	mov.w	sl, #0
 800b914:	f8bc b000 	ldrh.w	fp, [ip]
 800b918:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800b91c:	fb09 220b 	mla	r2, r9, fp, r2
 800b920:	4492      	add	sl, r2
 800b922:	b289      	uxth	r1, r1
 800b924:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 800b928:	f84e 1b04 	str.w	r1, [lr], #4
 800b92c:	f85c 2b04 	ldr.w	r2, [ip], #4
 800b930:	f8be 1000 	ldrh.w	r1, [lr]
 800b934:	0c12      	lsrs	r2, r2, #16
 800b936:	fb09 1102 	mla	r1, r9, r2, r1
 800b93a:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 800b93e:	4567      	cmp	r7, ip
 800b940:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800b944:	d8e6      	bhi.n	800b914 <__multiply+0x10c>
 800b946:	9a01      	ldr	r2, [sp, #4]
 800b948:	50a9      	str	r1, [r5, r2]
 800b94a:	3504      	adds	r5, #4
 800b94c:	e79a      	b.n	800b884 <__multiply+0x7c>
 800b94e:	3e01      	subs	r6, #1
 800b950:	e79c      	b.n	800b88c <__multiply+0x84>
 800b952:	bf00      	nop
 800b954:	0800cd50 	.word	0x0800cd50
 800b958:	0800cddc 	.word	0x0800cddc

0800b95c <__pow5mult>:
 800b95c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b960:	4615      	mov	r5, r2
 800b962:	f012 0203 	ands.w	r2, r2, #3
 800b966:	4606      	mov	r6, r0
 800b968:	460f      	mov	r7, r1
 800b96a:	d007      	beq.n	800b97c <__pow5mult+0x20>
 800b96c:	4c25      	ldr	r4, [pc, #148]	; (800ba04 <__pow5mult+0xa8>)
 800b96e:	3a01      	subs	r2, #1
 800b970:	2300      	movs	r3, #0
 800b972:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800b976:	f7ff fe51 	bl	800b61c <__multadd>
 800b97a:	4607      	mov	r7, r0
 800b97c:	10ad      	asrs	r5, r5, #2
 800b97e:	d03d      	beq.n	800b9fc <__pow5mult+0xa0>
 800b980:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800b982:	b97c      	cbnz	r4, 800b9a4 <__pow5mult+0x48>
 800b984:	2010      	movs	r0, #16
 800b986:	f7ff fdc1 	bl	800b50c <malloc>
 800b98a:	4602      	mov	r2, r0
 800b98c:	6270      	str	r0, [r6, #36]	; 0x24
 800b98e:	b928      	cbnz	r0, 800b99c <__pow5mult+0x40>
 800b990:	4b1d      	ldr	r3, [pc, #116]	; (800ba08 <__pow5mult+0xac>)
 800b992:	481e      	ldr	r0, [pc, #120]	; (800ba0c <__pow5mult+0xb0>)
 800b994:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800b998:	f000 fc9c 	bl	800c2d4 <__assert_func>
 800b99c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800b9a0:	6004      	str	r4, [r0, #0]
 800b9a2:	60c4      	str	r4, [r0, #12]
 800b9a4:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800b9a8:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800b9ac:	b94c      	cbnz	r4, 800b9c2 <__pow5mult+0x66>
 800b9ae:	f240 2171 	movw	r1, #625	; 0x271
 800b9b2:	4630      	mov	r0, r6
 800b9b4:	f7ff ff12 	bl	800b7dc <__i2b>
 800b9b8:	2300      	movs	r3, #0
 800b9ba:	f8c8 0008 	str.w	r0, [r8, #8]
 800b9be:	4604      	mov	r4, r0
 800b9c0:	6003      	str	r3, [r0, #0]
 800b9c2:	f04f 0900 	mov.w	r9, #0
 800b9c6:	07eb      	lsls	r3, r5, #31
 800b9c8:	d50a      	bpl.n	800b9e0 <__pow5mult+0x84>
 800b9ca:	4639      	mov	r1, r7
 800b9cc:	4622      	mov	r2, r4
 800b9ce:	4630      	mov	r0, r6
 800b9d0:	f7ff ff1a 	bl	800b808 <__multiply>
 800b9d4:	4639      	mov	r1, r7
 800b9d6:	4680      	mov	r8, r0
 800b9d8:	4630      	mov	r0, r6
 800b9da:	f7ff fdfd 	bl	800b5d8 <_Bfree>
 800b9de:	4647      	mov	r7, r8
 800b9e0:	106d      	asrs	r5, r5, #1
 800b9e2:	d00b      	beq.n	800b9fc <__pow5mult+0xa0>
 800b9e4:	6820      	ldr	r0, [r4, #0]
 800b9e6:	b938      	cbnz	r0, 800b9f8 <__pow5mult+0x9c>
 800b9e8:	4622      	mov	r2, r4
 800b9ea:	4621      	mov	r1, r4
 800b9ec:	4630      	mov	r0, r6
 800b9ee:	f7ff ff0b 	bl	800b808 <__multiply>
 800b9f2:	6020      	str	r0, [r4, #0]
 800b9f4:	f8c0 9000 	str.w	r9, [r0]
 800b9f8:	4604      	mov	r4, r0
 800b9fa:	e7e4      	b.n	800b9c6 <__pow5mult+0x6a>
 800b9fc:	4638      	mov	r0, r7
 800b9fe:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ba02:	bf00      	nop
 800ba04:	0800cf28 	.word	0x0800cf28
 800ba08:	0800ccde 	.word	0x0800ccde
 800ba0c:	0800cddc 	.word	0x0800cddc

0800ba10 <__lshift>:
 800ba10:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ba14:	460c      	mov	r4, r1
 800ba16:	6849      	ldr	r1, [r1, #4]
 800ba18:	6923      	ldr	r3, [r4, #16]
 800ba1a:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800ba1e:	68a3      	ldr	r3, [r4, #8]
 800ba20:	4607      	mov	r7, r0
 800ba22:	4691      	mov	r9, r2
 800ba24:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800ba28:	f108 0601 	add.w	r6, r8, #1
 800ba2c:	42b3      	cmp	r3, r6
 800ba2e:	db0b      	blt.n	800ba48 <__lshift+0x38>
 800ba30:	4638      	mov	r0, r7
 800ba32:	f7ff fd91 	bl	800b558 <_Balloc>
 800ba36:	4605      	mov	r5, r0
 800ba38:	b948      	cbnz	r0, 800ba4e <__lshift+0x3e>
 800ba3a:	4602      	mov	r2, r0
 800ba3c:	4b2a      	ldr	r3, [pc, #168]	; (800bae8 <__lshift+0xd8>)
 800ba3e:	482b      	ldr	r0, [pc, #172]	; (800baec <__lshift+0xdc>)
 800ba40:	f240 11d9 	movw	r1, #473	; 0x1d9
 800ba44:	f000 fc46 	bl	800c2d4 <__assert_func>
 800ba48:	3101      	adds	r1, #1
 800ba4a:	005b      	lsls	r3, r3, #1
 800ba4c:	e7ee      	b.n	800ba2c <__lshift+0x1c>
 800ba4e:	2300      	movs	r3, #0
 800ba50:	f100 0114 	add.w	r1, r0, #20
 800ba54:	f100 0210 	add.w	r2, r0, #16
 800ba58:	4618      	mov	r0, r3
 800ba5a:	4553      	cmp	r3, sl
 800ba5c:	db37      	blt.n	800bace <__lshift+0xbe>
 800ba5e:	6920      	ldr	r0, [r4, #16]
 800ba60:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800ba64:	f104 0314 	add.w	r3, r4, #20
 800ba68:	f019 091f 	ands.w	r9, r9, #31
 800ba6c:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800ba70:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800ba74:	d02f      	beq.n	800bad6 <__lshift+0xc6>
 800ba76:	f1c9 0e20 	rsb	lr, r9, #32
 800ba7a:	468a      	mov	sl, r1
 800ba7c:	f04f 0c00 	mov.w	ip, #0
 800ba80:	681a      	ldr	r2, [r3, #0]
 800ba82:	fa02 f209 	lsl.w	r2, r2, r9
 800ba86:	ea42 020c 	orr.w	r2, r2, ip
 800ba8a:	f84a 2b04 	str.w	r2, [sl], #4
 800ba8e:	f853 2b04 	ldr.w	r2, [r3], #4
 800ba92:	4298      	cmp	r0, r3
 800ba94:	fa22 fc0e 	lsr.w	ip, r2, lr
 800ba98:	d8f2      	bhi.n	800ba80 <__lshift+0x70>
 800ba9a:	1b03      	subs	r3, r0, r4
 800ba9c:	3b15      	subs	r3, #21
 800ba9e:	f023 0303 	bic.w	r3, r3, #3
 800baa2:	3304      	adds	r3, #4
 800baa4:	f104 0215 	add.w	r2, r4, #21
 800baa8:	4290      	cmp	r0, r2
 800baaa:	bf38      	it	cc
 800baac:	2304      	movcc	r3, #4
 800baae:	f841 c003 	str.w	ip, [r1, r3]
 800bab2:	f1bc 0f00 	cmp.w	ip, #0
 800bab6:	d001      	beq.n	800babc <__lshift+0xac>
 800bab8:	f108 0602 	add.w	r6, r8, #2
 800babc:	3e01      	subs	r6, #1
 800babe:	4638      	mov	r0, r7
 800bac0:	612e      	str	r6, [r5, #16]
 800bac2:	4621      	mov	r1, r4
 800bac4:	f7ff fd88 	bl	800b5d8 <_Bfree>
 800bac8:	4628      	mov	r0, r5
 800baca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800bace:	f842 0f04 	str.w	r0, [r2, #4]!
 800bad2:	3301      	adds	r3, #1
 800bad4:	e7c1      	b.n	800ba5a <__lshift+0x4a>
 800bad6:	3904      	subs	r1, #4
 800bad8:	f853 2b04 	ldr.w	r2, [r3], #4
 800badc:	f841 2f04 	str.w	r2, [r1, #4]!
 800bae0:	4298      	cmp	r0, r3
 800bae2:	d8f9      	bhi.n	800bad8 <__lshift+0xc8>
 800bae4:	e7ea      	b.n	800babc <__lshift+0xac>
 800bae6:	bf00      	nop
 800bae8:	0800cd50 	.word	0x0800cd50
 800baec:	0800cddc 	.word	0x0800cddc

0800baf0 <__mcmp>:
 800baf0:	b530      	push	{r4, r5, lr}
 800baf2:	6902      	ldr	r2, [r0, #16]
 800baf4:	690c      	ldr	r4, [r1, #16]
 800baf6:	1b12      	subs	r2, r2, r4
 800baf8:	d10e      	bne.n	800bb18 <__mcmp+0x28>
 800bafa:	f100 0314 	add.w	r3, r0, #20
 800bafe:	3114      	adds	r1, #20
 800bb00:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800bb04:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800bb08:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800bb0c:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800bb10:	42a5      	cmp	r5, r4
 800bb12:	d003      	beq.n	800bb1c <__mcmp+0x2c>
 800bb14:	d305      	bcc.n	800bb22 <__mcmp+0x32>
 800bb16:	2201      	movs	r2, #1
 800bb18:	4610      	mov	r0, r2
 800bb1a:	bd30      	pop	{r4, r5, pc}
 800bb1c:	4283      	cmp	r3, r0
 800bb1e:	d3f3      	bcc.n	800bb08 <__mcmp+0x18>
 800bb20:	e7fa      	b.n	800bb18 <__mcmp+0x28>
 800bb22:	f04f 32ff 	mov.w	r2, #4294967295
 800bb26:	e7f7      	b.n	800bb18 <__mcmp+0x28>

0800bb28 <__mdiff>:
 800bb28:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bb2c:	460c      	mov	r4, r1
 800bb2e:	4606      	mov	r6, r0
 800bb30:	4611      	mov	r1, r2
 800bb32:	4620      	mov	r0, r4
 800bb34:	4690      	mov	r8, r2
 800bb36:	f7ff ffdb 	bl	800baf0 <__mcmp>
 800bb3a:	1e05      	subs	r5, r0, #0
 800bb3c:	d110      	bne.n	800bb60 <__mdiff+0x38>
 800bb3e:	4629      	mov	r1, r5
 800bb40:	4630      	mov	r0, r6
 800bb42:	f7ff fd09 	bl	800b558 <_Balloc>
 800bb46:	b930      	cbnz	r0, 800bb56 <__mdiff+0x2e>
 800bb48:	4b3a      	ldr	r3, [pc, #232]	; (800bc34 <__mdiff+0x10c>)
 800bb4a:	4602      	mov	r2, r0
 800bb4c:	f240 2132 	movw	r1, #562	; 0x232
 800bb50:	4839      	ldr	r0, [pc, #228]	; (800bc38 <__mdiff+0x110>)
 800bb52:	f000 fbbf 	bl	800c2d4 <__assert_func>
 800bb56:	2301      	movs	r3, #1
 800bb58:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800bb5c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bb60:	bfa4      	itt	ge
 800bb62:	4643      	movge	r3, r8
 800bb64:	46a0      	movge	r8, r4
 800bb66:	4630      	mov	r0, r6
 800bb68:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800bb6c:	bfa6      	itte	ge
 800bb6e:	461c      	movge	r4, r3
 800bb70:	2500      	movge	r5, #0
 800bb72:	2501      	movlt	r5, #1
 800bb74:	f7ff fcf0 	bl	800b558 <_Balloc>
 800bb78:	b920      	cbnz	r0, 800bb84 <__mdiff+0x5c>
 800bb7a:	4b2e      	ldr	r3, [pc, #184]	; (800bc34 <__mdiff+0x10c>)
 800bb7c:	4602      	mov	r2, r0
 800bb7e:	f44f 7110 	mov.w	r1, #576	; 0x240
 800bb82:	e7e5      	b.n	800bb50 <__mdiff+0x28>
 800bb84:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800bb88:	6926      	ldr	r6, [r4, #16]
 800bb8a:	60c5      	str	r5, [r0, #12]
 800bb8c:	f104 0914 	add.w	r9, r4, #20
 800bb90:	f108 0514 	add.w	r5, r8, #20
 800bb94:	f100 0e14 	add.w	lr, r0, #20
 800bb98:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 800bb9c:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800bba0:	f108 0210 	add.w	r2, r8, #16
 800bba4:	46f2      	mov	sl, lr
 800bba6:	2100      	movs	r1, #0
 800bba8:	f859 3b04 	ldr.w	r3, [r9], #4
 800bbac:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800bbb0:	fa1f f883 	uxth.w	r8, r3
 800bbb4:	fa11 f18b 	uxtah	r1, r1, fp
 800bbb8:	0c1b      	lsrs	r3, r3, #16
 800bbba:	eba1 0808 	sub.w	r8, r1, r8
 800bbbe:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800bbc2:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800bbc6:	fa1f f888 	uxth.w	r8, r8
 800bbca:	1419      	asrs	r1, r3, #16
 800bbcc:	454e      	cmp	r6, r9
 800bbce:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800bbd2:	f84a 3b04 	str.w	r3, [sl], #4
 800bbd6:	d8e7      	bhi.n	800bba8 <__mdiff+0x80>
 800bbd8:	1b33      	subs	r3, r6, r4
 800bbda:	3b15      	subs	r3, #21
 800bbdc:	f023 0303 	bic.w	r3, r3, #3
 800bbe0:	3304      	adds	r3, #4
 800bbe2:	3415      	adds	r4, #21
 800bbe4:	42a6      	cmp	r6, r4
 800bbe6:	bf38      	it	cc
 800bbe8:	2304      	movcc	r3, #4
 800bbea:	441d      	add	r5, r3
 800bbec:	4473      	add	r3, lr
 800bbee:	469e      	mov	lr, r3
 800bbf0:	462e      	mov	r6, r5
 800bbf2:	4566      	cmp	r6, ip
 800bbf4:	d30e      	bcc.n	800bc14 <__mdiff+0xec>
 800bbf6:	f10c 0203 	add.w	r2, ip, #3
 800bbfa:	1b52      	subs	r2, r2, r5
 800bbfc:	f022 0203 	bic.w	r2, r2, #3
 800bc00:	3d03      	subs	r5, #3
 800bc02:	45ac      	cmp	ip, r5
 800bc04:	bf38      	it	cc
 800bc06:	2200      	movcc	r2, #0
 800bc08:	441a      	add	r2, r3
 800bc0a:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 800bc0e:	b17b      	cbz	r3, 800bc30 <__mdiff+0x108>
 800bc10:	6107      	str	r7, [r0, #16]
 800bc12:	e7a3      	b.n	800bb5c <__mdiff+0x34>
 800bc14:	f856 8b04 	ldr.w	r8, [r6], #4
 800bc18:	fa11 f288 	uxtah	r2, r1, r8
 800bc1c:	1414      	asrs	r4, r2, #16
 800bc1e:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800bc22:	b292      	uxth	r2, r2
 800bc24:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800bc28:	f84e 2b04 	str.w	r2, [lr], #4
 800bc2c:	1421      	asrs	r1, r4, #16
 800bc2e:	e7e0      	b.n	800bbf2 <__mdiff+0xca>
 800bc30:	3f01      	subs	r7, #1
 800bc32:	e7ea      	b.n	800bc0a <__mdiff+0xe2>
 800bc34:	0800cd50 	.word	0x0800cd50
 800bc38:	0800cddc 	.word	0x0800cddc

0800bc3c <__ulp>:
 800bc3c:	b082      	sub	sp, #8
 800bc3e:	ed8d 0b00 	vstr	d0, [sp]
 800bc42:	9b01      	ldr	r3, [sp, #4]
 800bc44:	4912      	ldr	r1, [pc, #72]	; (800bc90 <__ulp+0x54>)
 800bc46:	4019      	ands	r1, r3
 800bc48:	f1a1 7150 	sub.w	r1, r1, #54525952	; 0x3400000
 800bc4c:	2900      	cmp	r1, #0
 800bc4e:	dd05      	ble.n	800bc5c <__ulp+0x20>
 800bc50:	2200      	movs	r2, #0
 800bc52:	460b      	mov	r3, r1
 800bc54:	ec43 2b10 	vmov	d0, r2, r3
 800bc58:	b002      	add	sp, #8
 800bc5a:	4770      	bx	lr
 800bc5c:	4249      	negs	r1, r1
 800bc5e:	f1b1 7fa0 	cmp.w	r1, #20971520	; 0x1400000
 800bc62:	ea4f 5021 	mov.w	r0, r1, asr #20
 800bc66:	f04f 0200 	mov.w	r2, #0
 800bc6a:	f04f 0300 	mov.w	r3, #0
 800bc6e:	da04      	bge.n	800bc7a <__ulp+0x3e>
 800bc70:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 800bc74:	fa41 f300 	asr.w	r3, r1, r0
 800bc78:	e7ec      	b.n	800bc54 <__ulp+0x18>
 800bc7a:	f1a0 0114 	sub.w	r1, r0, #20
 800bc7e:	291e      	cmp	r1, #30
 800bc80:	bfda      	itte	le
 800bc82:	f04f 4000 	movle.w	r0, #2147483648	; 0x80000000
 800bc86:	fa20 f101 	lsrle.w	r1, r0, r1
 800bc8a:	2101      	movgt	r1, #1
 800bc8c:	460a      	mov	r2, r1
 800bc8e:	e7e1      	b.n	800bc54 <__ulp+0x18>
 800bc90:	7ff00000 	.word	0x7ff00000

0800bc94 <__b2d>:
 800bc94:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bc96:	6905      	ldr	r5, [r0, #16]
 800bc98:	f100 0714 	add.w	r7, r0, #20
 800bc9c:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 800bca0:	1f2e      	subs	r6, r5, #4
 800bca2:	f855 4c04 	ldr.w	r4, [r5, #-4]
 800bca6:	4620      	mov	r0, r4
 800bca8:	f7ff fd48 	bl	800b73c <__hi0bits>
 800bcac:	f1c0 0320 	rsb	r3, r0, #32
 800bcb0:	280a      	cmp	r0, #10
 800bcb2:	f8df c07c 	ldr.w	ip, [pc, #124]	; 800bd30 <__b2d+0x9c>
 800bcb6:	600b      	str	r3, [r1, #0]
 800bcb8:	dc14      	bgt.n	800bce4 <__b2d+0x50>
 800bcba:	f1c0 0e0b 	rsb	lr, r0, #11
 800bcbe:	fa24 f10e 	lsr.w	r1, r4, lr
 800bcc2:	42b7      	cmp	r7, r6
 800bcc4:	ea41 030c 	orr.w	r3, r1, ip
 800bcc8:	bf34      	ite	cc
 800bcca:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 800bcce:	2100      	movcs	r1, #0
 800bcd0:	3015      	adds	r0, #21
 800bcd2:	fa04 f000 	lsl.w	r0, r4, r0
 800bcd6:	fa21 f10e 	lsr.w	r1, r1, lr
 800bcda:	ea40 0201 	orr.w	r2, r0, r1
 800bcde:	ec43 2b10 	vmov	d0, r2, r3
 800bce2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800bce4:	42b7      	cmp	r7, r6
 800bce6:	bf3a      	itte	cc
 800bce8:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 800bcec:	f1a5 0608 	subcc.w	r6, r5, #8
 800bcf0:	2100      	movcs	r1, #0
 800bcf2:	380b      	subs	r0, #11
 800bcf4:	d017      	beq.n	800bd26 <__b2d+0x92>
 800bcf6:	f1c0 0c20 	rsb	ip, r0, #32
 800bcfa:	fa04 f500 	lsl.w	r5, r4, r0
 800bcfe:	42be      	cmp	r6, r7
 800bd00:	fa21 f40c 	lsr.w	r4, r1, ip
 800bd04:	ea45 0504 	orr.w	r5, r5, r4
 800bd08:	bf8c      	ite	hi
 800bd0a:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 800bd0e:	2400      	movls	r4, #0
 800bd10:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
 800bd14:	fa01 f000 	lsl.w	r0, r1, r0
 800bd18:	fa24 f40c 	lsr.w	r4, r4, ip
 800bd1c:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 800bd20:	ea40 0204 	orr.w	r2, r0, r4
 800bd24:	e7db      	b.n	800bcde <__b2d+0x4a>
 800bd26:	ea44 030c 	orr.w	r3, r4, ip
 800bd2a:	460a      	mov	r2, r1
 800bd2c:	e7d7      	b.n	800bcde <__b2d+0x4a>
 800bd2e:	bf00      	nop
 800bd30:	3ff00000 	.word	0x3ff00000

0800bd34 <__d2b>:
 800bd34:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800bd38:	4689      	mov	r9, r1
 800bd3a:	2101      	movs	r1, #1
 800bd3c:	ec57 6b10 	vmov	r6, r7, d0
 800bd40:	4690      	mov	r8, r2
 800bd42:	f7ff fc09 	bl	800b558 <_Balloc>
 800bd46:	4604      	mov	r4, r0
 800bd48:	b930      	cbnz	r0, 800bd58 <__d2b+0x24>
 800bd4a:	4602      	mov	r2, r0
 800bd4c:	4b25      	ldr	r3, [pc, #148]	; (800bde4 <__d2b+0xb0>)
 800bd4e:	4826      	ldr	r0, [pc, #152]	; (800bde8 <__d2b+0xb4>)
 800bd50:	f240 310a 	movw	r1, #778	; 0x30a
 800bd54:	f000 fabe 	bl	800c2d4 <__assert_func>
 800bd58:	f3c7 550a 	ubfx	r5, r7, #20, #11
 800bd5c:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800bd60:	bb35      	cbnz	r5, 800bdb0 <__d2b+0x7c>
 800bd62:	2e00      	cmp	r6, #0
 800bd64:	9301      	str	r3, [sp, #4]
 800bd66:	d028      	beq.n	800bdba <__d2b+0x86>
 800bd68:	4668      	mov	r0, sp
 800bd6a:	9600      	str	r6, [sp, #0]
 800bd6c:	f7ff fd06 	bl	800b77c <__lo0bits>
 800bd70:	9900      	ldr	r1, [sp, #0]
 800bd72:	b300      	cbz	r0, 800bdb6 <__d2b+0x82>
 800bd74:	9a01      	ldr	r2, [sp, #4]
 800bd76:	f1c0 0320 	rsb	r3, r0, #32
 800bd7a:	fa02 f303 	lsl.w	r3, r2, r3
 800bd7e:	430b      	orrs	r3, r1
 800bd80:	40c2      	lsrs	r2, r0
 800bd82:	6163      	str	r3, [r4, #20]
 800bd84:	9201      	str	r2, [sp, #4]
 800bd86:	9b01      	ldr	r3, [sp, #4]
 800bd88:	61a3      	str	r3, [r4, #24]
 800bd8a:	2b00      	cmp	r3, #0
 800bd8c:	bf14      	ite	ne
 800bd8e:	2202      	movne	r2, #2
 800bd90:	2201      	moveq	r2, #1
 800bd92:	6122      	str	r2, [r4, #16]
 800bd94:	b1d5      	cbz	r5, 800bdcc <__d2b+0x98>
 800bd96:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800bd9a:	4405      	add	r5, r0
 800bd9c:	f8c9 5000 	str.w	r5, [r9]
 800bda0:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800bda4:	f8c8 0000 	str.w	r0, [r8]
 800bda8:	4620      	mov	r0, r4
 800bdaa:	b003      	add	sp, #12
 800bdac:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800bdb0:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800bdb4:	e7d5      	b.n	800bd62 <__d2b+0x2e>
 800bdb6:	6161      	str	r1, [r4, #20]
 800bdb8:	e7e5      	b.n	800bd86 <__d2b+0x52>
 800bdba:	a801      	add	r0, sp, #4
 800bdbc:	f7ff fcde 	bl	800b77c <__lo0bits>
 800bdc0:	9b01      	ldr	r3, [sp, #4]
 800bdc2:	6163      	str	r3, [r4, #20]
 800bdc4:	2201      	movs	r2, #1
 800bdc6:	6122      	str	r2, [r4, #16]
 800bdc8:	3020      	adds	r0, #32
 800bdca:	e7e3      	b.n	800bd94 <__d2b+0x60>
 800bdcc:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800bdd0:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800bdd4:	f8c9 0000 	str.w	r0, [r9]
 800bdd8:	6918      	ldr	r0, [r3, #16]
 800bdda:	f7ff fcaf 	bl	800b73c <__hi0bits>
 800bdde:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800bde2:	e7df      	b.n	800bda4 <__d2b+0x70>
 800bde4:	0800cd50 	.word	0x0800cd50
 800bde8:	0800cddc 	.word	0x0800cddc

0800bdec <__ratio>:
 800bdec:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bdf0:	4688      	mov	r8, r1
 800bdf2:	4669      	mov	r1, sp
 800bdf4:	4681      	mov	r9, r0
 800bdf6:	f7ff ff4d 	bl	800bc94 <__b2d>
 800bdfa:	a901      	add	r1, sp, #4
 800bdfc:	4640      	mov	r0, r8
 800bdfe:	ec55 4b10 	vmov	r4, r5, d0
 800be02:	f7ff ff47 	bl	800bc94 <__b2d>
 800be06:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800be0a:	f8d8 2010 	ldr.w	r2, [r8, #16]
 800be0e:	eba3 0c02 	sub.w	ip, r3, r2
 800be12:	e9dd 3200 	ldrd	r3, r2, [sp]
 800be16:	1a9b      	subs	r3, r3, r2
 800be18:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 800be1c:	ec51 0b10 	vmov	r0, r1, d0
 800be20:	2b00      	cmp	r3, #0
 800be22:	bfd6      	itet	le
 800be24:	460a      	movle	r2, r1
 800be26:	462a      	movgt	r2, r5
 800be28:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800be2c:	468b      	mov	fp, r1
 800be2e:	462f      	mov	r7, r5
 800be30:	bfd4      	ite	le
 800be32:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 800be36:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 800be3a:	4620      	mov	r0, r4
 800be3c:	ee10 2a10 	vmov	r2, s0
 800be40:	465b      	mov	r3, fp
 800be42:	4639      	mov	r1, r7
 800be44:	f7f4 fd02 	bl	800084c <__aeabi_ddiv>
 800be48:	ec41 0b10 	vmov	d0, r0, r1
 800be4c:	b003      	add	sp, #12
 800be4e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800be52 <__copybits>:
 800be52:	3901      	subs	r1, #1
 800be54:	b570      	push	{r4, r5, r6, lr}
 800be56:	1149      	asrs	r1, r1, #5
 800be58:	6914      	ldr	r4, [r2, #16]
 800be5a:	3101      	adds	r1, #1
 800be5c:	f102 0314 	add.w	r3, r2, #20
 800be60:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800be64:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800be68:	1f05      	subs	r5, r0, #4
 800be6a:	42a3      	cmp	r3, r4
 800be6c:	d30c      	bcc.n	800be88 <__copybits+0x36>
 800be6e:	1aa3      	subs	r3, r4, r2
 800be70:	3b11      	subs	r3, #17
 800be72:	f023 0303 	bic.w	r3, r3, #3
 800be76:	3211      	adds	r2, #17
 800be78:	42a2      	cmp	r2, r4
 800be7a:	bf88      	it	hi
 800be7c:	2300      	movhi	r3, #0
 800be7e:	4418      	add	r0, r3
 800be80:	2300      	movs	r3, #0
 800be82:	4288      	cmp	r0, r1
 800be84:	d305      	bcc.n	800be92 <__copybits+0x40>
 800be86:	bd70      	pop	{r4, r5, r6, pc}
 800be88:	f853 6b04 	ldr.w	r6, [r3], #4
 800be8c:	f845 6f04 	str.w	r6, [r5, #4]!
 800be90:	e7eb      	b.n	800be6a <__copybits+0x18>
 800be92:	f840 3b04 	str.w	r3, [r0], #4
 800be96:	e7f4      	b.n	800be82 <__copybits+0x30>

0800be98 <__any_on>:
 800be98:	f100 0214 	add.w	r2, r0, #20
 800be9c:	6900      	ldr	r0, [r0, #16]
 800be9e:	114b      	asrs	r3, r1, #5
 800bea0:	4298      	cmp	r0, r3
 800bea2:	b510      	push	{r4, lr}
 800bea4:	db11      	blt.n	800beca <__any_on+0x32>
 800bea6:	dd0a      	ble.n	800bebe <__any_on+0x26>
 800bea8:	f011 011f 	ands.w	r1, r1, #31
 800beac:	d007      	beq.n	800bebe <__any_on+0x26>
 800beae:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800beb2:	fa24 f001 	lsr.w	r0, r4, r1
 800beb6:	fa00 f101 	lsl.w	r1, r0, r1
 800beba:	428c      	cmp	r4, r1
 800bebc:	d10b      	bne.n	800bed6 <__any_on+0x3e>
 800bebe:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800bec2:	4293      	cmp	r3, r2
 800bec4:	d803      	bhi.n	800bece <__any_on+0x36>
 800bec6:	2000      	movs	r0, #0
 800bec8:	bd10      	pop	{r4, pc}
 800beca:	4603      	mov	r3, r0
 800becc:	e7f7      	b.n	800bebe <__any_on+0x26>
 800bece:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800bed2:	2900      	cmp	r1, #0
 800bed4:	d0f5      	beq.n	800bec2 <__any_on+0x2a>
 800bed6:	2001      	movs	r0, #1
 800bed8:	e7f6      	b.n	800bec8 <__any_on+0x30>

0800beda <_calloc_r>:
 800beda:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800bedc:	fba1 2402 	umull	r2, r4, r1, r2
 800bee0:	b94c      	cbnz	r4, 800bef6 <_calloc_r+0x1c>
 800bee2:	4611      	mov	r1, r2
 800bee4:	9201      	str	r2, [sp, #4]
 800bee6:	f7fc f9ab 	bl	8008240 <_malloc_r>
 800beea:	9a01      	ldr	r2, [sp, #4]
 800beec:	4605      	mov	r5, r0
 800beee:	b930      	cbnz	r0, 800befe <_calloc_r+0x24>
 800bef0:	4628      	mov	r0, r5
 800bef2:	b003      	add	sp, #12
 800bef4:	bd30      	pop	{r4, r5, pc}
 800bef6:	220c      	movs	r2, #12
 800bef8:	6002      	str	r2, [r0, #0]
 800befa:	2500      	movs	r5, #0
 800befc:	e7f8      	b.n	800bef0 <_calloc_r+0x16>
 800befe:	4621      	mov	r1, r4
 800bf00:	f7fc f975 	bl	80081ee <memset>
 800bf04:	e7f4      	b.n	800bef0 <_calloc_r+0x16>
	...

0800bf08 <_free_r>:
 800bf08:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800bf0a:	2900      	cmp	r1, #0
 800bf0c:	d044      	beq.n	800bf98 <_free_r+0x90>
 800bf0e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800bf12:	9001      	str	r0, [sp, #4]
 800bf14:	2b00      	cmp	r3, #0
 800bf16:	f1a1 0404 	sub.w	r4, r1, #4
 800bf1a:	bfb8      	it	lt
 800bf1c:	18e4      	addlt	r4, r4, r3
 800bf1e:	f7ff fb0f 	bl	800b540 <__malloc_lock>
 800bf22:	4a1e      	ldr	r2, [pc, #120]	; (800bf9c <_free_r+0x94>)
 800bf24:	9801      	ldr	r0, [sp, #4]
 800bf26:	6813      	ldr	r3, [r2, #0]
 800bf28:	b933      	cbnz	r3, 800bf38 <_free_r+0x30>
 800bf2a:	6063      	str	r3, [r4, #4]
 800bf2c:	6014      	str	r4, [r2, #0]
 800bf2e:	b003      	add	sp, #12
 800bf30:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800bf34:	f7ff bb0a 	b.w	800b54c <__malloc_unlock>
 800bf38:	42a3      	cmp	r3, r4
 800bf3a:	d908      	bls.n	800bf4e <_free_r+0x46>
 800bf3c:	6825      	ldr	r5, [r4, #0]
 800bf3e:	1961      	adds	r1, r4, r5
 800bf40:	428b      	cmp	r3, r1
 800bf42:	bf01      	itttt	eq
 800bf44:	6819      	ldreq	r1, [r3, #0]
 800bf46:	685b      	ldreq	r3, [r3, #4]
 800bf48:	1949      	addeq	r1, r1, r5
 800bf4a:	6021      	streq	r1, [r4, #0]
 800bf4c:	e7ed      	b.n	800bf2a <_free_r+0x22>
 800bf4e:	461a      	mov	r2, r3
 800bf50:	685b      	ldr	r3, [r3, #4]
 800bf52:	b10b      	cbz	r3, 800bf58 <_free_r+0x50>
 800bf54:	42a3      	cmp	r3, r4
 800bf56:	d9fa      	bls.n	800bf4e <_free_r+0x46>
 800bf58:	6811      	ldr	r1, [r2, #0]
 800bf5a:	1855      	adds	r5, r2, r1
 800bf5c:	42a5      	cmp	r5, r4
 800bf5e:	d10b      	bne.n	800bf78 <_free_r+0x70>
 800bf60:	6824      	ldr	r4, [r4, #0]
 800bf62:	4421      	add	r1, r4
 800bf64:	1854      	adds	r4, r2, r1
 800bf66:	42a3      	cmp	r3, r4
 800bf68:	6011      	str	r1, [r2, #0]
 800bf6a:	d1e0      	bne.n	800bf2e <_free_r+0x26>
 800bf6c:	681c      	ldr	r4, [r3, #0]
 800bf6e:	685b      	ldr	r3, [r3, #4]
 800bf70:	6053      	str	r3, [r2, #4]
 800bf72:	4421      	add	r1, r4
 800bf74:	6011      	str	r1, [r2, #0]
 800bf76:	e7da      	b.n	800bf2e <_free_r+0x26>
 800bf78:	d902      	bls.n	800bf80 <_free_r+0x78>
 800bf7a:	230c      	movs	r3, #12
 800bf7c:	6003      	str	r3, [r0, #0]
 800bf7e:	e7d6      	b.n	800bf2e <_free_r+0x26>
 800bf80:	6825      	ldr	r5, [r4, #0]
 800bf82:	1961      	adds	r1, r4, r5
 800bf84:	428b      	cmp	r3, r1
 800bf86:	bf04      	itt	eq
 800bf88:	6819      	ldreq	r1, [r3, #0]
 800bf8a:	685b      	ldreq	r3, [r3, #4]
 800bf8c:	6063      	str	r3, [r4, #4]
 800bf8e:	bf04      	itt	eq
 800bf90:	1949      	addeq	r1, r1, r5
 800bf92:	6021      	streq	r1, [r4, #0]
 800bf94:	6054      	str	r4, [r2, #4]
 800bf96:	e7ca      	b.n	800bf2e <_free_r+0x26>
 800bf98:	b003      	add	sp, #12
 800bf9a:	bd30      	pop	{r4, r5, pc}
 800bf9c:	20001db8 	.word	0x20001db8

0800bfa0 <__ssputs_r>:
 800bfa0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800bfa4:	688e      	ldr	r6, [r1, #8]
 800bfa6:	429e      	cmp	r6, r3
 800bfa8:	4682      	mov	sl, r0
 800bfaa:	460c      	mov	r4, r1
 800bfac:	4690      	mov	r8, r2
 800bfae:	461f      	mov	r7, r3
 800bfb0:	d838      	bhi.n	800c024 <__ssputs_r+0x84>
 800bfb2:	898a      	ldrh	r2, [r1, #12]
 800bfb4:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800bfb8:	d032      	beq.n	800c020 <__ssputs_r+0x80>
 800bfba:	6825      	ldr	r5, [r4, #0]
 800bfbc:	6909      	ldr	r1, [r1, #16]
 800bfbe:	eba5 0901 	sub.w	r9, r5, r1
 800bfc2:	6965      	ldr	r5, [r4, #20]
 800bfc4:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800bfc8:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800bfcc:	3301      	adds	r3, #1
 800bfce:	444b      	add	r3, r9
 800bfd0:	106d      	asrs	r5, r5, #1
 800bfd2:	429d      	cmp	r5, r3
 800bfd4:	bf38      	it	cc
 800bfd6:	461d      	movcc	r5, r3
 800bfd8:	0553      	lsls	r3, r2, #21
 800bfda:	d531      	bpl.n	800c040 <__ssputs_r+0xa0>
 800bfdc:	4629      	mov	r1, r5
 800bfde:	f7fc f92f 	bl	8008240 <_malloc_r>
 800bfe2:	4606      	mov	r6, r0
 800bfe4:	b950      	cbnz	r0, 800bffc <__ssputs_r+0x5c>
 800bfe6:	230c      	movs	r3, #12
 800bfe8:	f8ca 3000 	str.w	r3, [sl]
 800bfec:	89a3      	ldrh	r3, [r4, #12]
 800bfee:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800bff2:	81a3      	strh	r3, [r4, #12]
 800bff4:	f04f 30ff 	mov.w	r0, #4294967295
 800bff8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800bffc:	6921      	ldr	r1, [r4, #16]
 800bffe:	464a      	mov	r2, r9
 800c000:	f7fc f8e7 	bl	80081d2 <memcpy>
 800c004:	89a3      	ldrh	r3, [r4, #12]
 800c006:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800c00a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c00e:	81a3      	strh	r3, [r4, #12]
 800c010:	6126      	str	r6, [r4, #16]
 800c012:	6165      	str	r5, [r4, #20]
 800c014:	444e      	add	r6, r9
 800c016:	eba5 0509 	sub.w	r5, r5, r9
 800c01a:	6026      	str	r6, [r4, #0]
 800c01c:	60a5      	str	r5, [r4, #8]
 800c01e:	463e      	mov	r6, r7
 800c020:	42be      	cmp	r6, r7
 800c022:	d900      	bls.n	800c026 <__ssputs_r+0x86>
 800c024:	463e      	mov	r6, r7
 800c026:	6820      	ldr	r0, [r4, #0]
 800c028:	4632      	mov	r2, r6
 800c02a:	4641      	mov	r1, r8
 800c02c:	f000 f982 	bl	800c334 <memmove>
 800c030:	68a3      	ldr	r3, [r4, #8]
 800c032:	1b9b      	subs	r3, r3, r6
 800c034:	60a3      	str	r3, [r4, #8]
 800c036:	6823      	ldr	r3, [r4, #0]
 800c038:	4433      	add	r3, r6
 800c03a:	6023      	str	r3, [r4, #0]
 800c03c:	2000      	movs	r0, #0
 800c03e:	e7db      	b.n	800bff8 <__ssputs_r+0x58>
 800c040:	462a      	mov	r2, r5
 800c042:	f000 f991 	bl	800c368 <_realloc_r>
 800c046:	4606      	mov	r6, r0
 800c048:	2800      	cmp	r0, #0
 800c04a:	d1e1      	bne.n	800c010 <__ssputs_r+0x70>
 800c04c:	6921      	ldr	r1, [r4, #16]
 800c04e:	4650      	mov	r0, sl
 800c050:	f7ff ff5a 	bl	800bf08 <_free_r>
 800c054:	e7c7      	b.n	800bfe6 <__ssputs_r+0x46>
	...

0800c058 <_svfiprintf_r>:
 800c058:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c05c:	4698      	mov	r8, r3
 800c05e:	898b      	ldrh	r3, [r1, #12]
 800c060:	061b      	lsls	r3, r3, #24
 800c062:	b09d      	sub	sp, #116	; 0x74
 800c064:	4607      	mov	r7, r0
 800c066:	460d      	mov	r5, r1
 800c068:	4614      	mov	r4, r2
 800c06a:	d50e      	bpl.n	800c08a <_svfiprintf_r+0x32>
 800c06c:	690b      	ldr	r3, [r1, #16]
 800c06e:	b963      	cbnz	r3, 800c08a <_svfiprintf_r+0x32>
 800c070:	2140      	movs	r1, #64	; 0x40
 800c072:	f7fc f8e5 	bl	8008240 <_malloc_r>
 800c076:	6028      	str	r0, [r5, #0]
 800c078:	6128      	str	r0, [r5, #16]
 800c07a:	b920      	cbnz	r0, 800c086 <_svfiprintf_r+0x2e>
 800c07c:	230c      	movs	r3, #12
 800c07e:	603b      	str	r3, [r7, #0]
 800c080:	f04f 30ff 	mov.w	r0, #4294967295
 800c084:	e0d1      	b.n	800c22a <_svfiprintf_r+0x1d2>
 800c086:	2340      	movs	r3, #64	; 0x40
 800c088:	616b      	str	r3, [r5, #20]
 800c08a:	2300      	movs	r3, #0
 800c08c:	9309      	str	r3, [sp, #36]	; 0x24
 800c08e:	2320      	movs	r3, #32
 800c090:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800c094:	f8cd 800c 	str.w	r8, [sp, #12]
 800c098:	2330      	movs	r3, #48	; 0x30
 800c09a:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800c244 <_svfiprintf_r+0x1ec>
 800c09e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800c0a2:	f04f 0901 	mov.w	r9, #1
 800c0a6:	4623      	mov	r3, r4
 800c0a8:	469a      	mov	sl, r3
 800c0aa:	f813 2b01 	ldrb.w	r2, [r3], #1
 800c0ae:	b10a      	cbz	r2, 800c0b4 <_svfiprintf_r+0x5c>
 800c0b0:	2a25      	cmp	r2, #37	; 0x25
 800c0b2:	d1f9      	bne.n	800c0a8 <_svfiprintf_r+0x50>
 800c0b4:	ebba 0b04 	subs.w	fp, sl, r4
 800c0b8:	d00b      	beq.n	800c0d2 <_svfiprintf_r+0x7a>
 800c0ba:	465b      	mov	r3, fp
 800c0bc:	4622      	mov	r2, r4
 800c0be:	4629      	mov	r1, r5
 800c0c0:	4638      	mov	r0, r7
 800c0c2:	f7ff ff6d 	bl	800bfa0 <__ssputs_r>
 800c0c6:	3001      	adds	r0, #1
 800c0c8:	f000 80aa 	beq.w	800c220 <_svfiprintf_r+0x1c8>
 800c0cc:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800c0ce:	445a      	add	r2, fp
 800c0d0:	9209      	str	r2, [sp, #36]	; 0x24
 800c0d2:	f89a 3000 	ldrb.w	r3, [sl]
 800c0d6:	2b00      	cmp	r3, #0
 800c0d8:	f000 80a2 	beq.w	800c220 <_svfiprintf_r+0x1c8>
 800c0dc:	2300      	movs	r3, #0
 800c0de:	f04f 32ff 	mov.w	r2, #4294967295
 800c0e2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800c0e6:	f10a 0a01 	add.w	sl, sl, #1
 800c0ea:	9304      	str	r3, [sp, #16]
 800c0ec:	9307      	str	r3, [sp, #28]
 800c0ee:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800c0f2:	931a      	str	r3, [sp, #104]	; 0x68
 800c0f4:	4654      	mov	r4, sl
 800c0f6:	2205      	movs	r2, #5
 800c0f8:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c0fc:	4851      	ldr	r0, [pc, #324]	; (800c244 <_svfiprintf_r+0x1ec>)
 800c0fe:	f7f4 f86f 	bl	80001e0 <memchr>
 800c102:	9a04      	ldr	r2, [sp, #16]
 800c104:	b9d8      	cbnz	r0, 800c13e <_svfiprintf_r+0xe6>
 800c106:	06d0      	lsls	r0, r2, #27
 800c108:	bf44      	itt	mi
 800c10a:	2320      	movmi	r3, #32
 800c10c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800c110:	0711      	lsls	r1, r2, #28
 800c112:	bf44      	itt	mi
 800c114:	232b      	movmi	r3, #43	; 0x2b
 800c116:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800c11a:	f89a 3000 	ldrb.w	r3, [sl]
 800c11e:	2b2a      	cmp	r3, #42	; 0x2a
 800c120:	d015      	beq.n	800c14e <_svfiprintf_r+0xf6>
 800c122:	9a07      	ldr	r2, [sp, #28]
 800c124:	4654      	mov	r4, sl
 800c126:	2000      	movs	r0, #0
 800c128:	f04f 0c0a 	mov.w	ip, #10
 800c12c:	4621      	mov	r1, r4
 800c12e:	f811 3b01 	ldrb.w	r3, [r1], #1
 800c132:	3b30      	subs	r3, #48	; 0x30
 800c134:	2b09      	cmp	r3, #9
 800c136:	d94e      	bls.n	800c1d6 <_svfiprintf_r+0x17e>
 800c138:	b1b0      	cbz	r0, 800c168 <_svfiprintf_r+0x110>
 800c13a:	9207      	str	r2, [sp, #28]
 800c13c:	e014      	b.n	800c168 <_svfiprintf_r+0x110>
 800c13e:	eba0 0308 	sub.w	r3, r0, r8
 800c142:	fa09 f303 	lsl.w	r3, r9, r3
 800c146:	4313      	orrs	r3, r2
 800c148:	9304      	str	r3, [sp, #16]
 800c14a:	46a2      	mov	sl, r4
 800c14c:	e7d2      	b.n	800c0f4 <_svfiprintf_r+0x9c>
 800c14e:	9b03      	ldr	r3, [sp, #12]
 800c150:	1d19      	adds	r1, r3, #4
 800c152:	681b      	ldr	r3, [r3, #0]
 800c154:	9103      	str	r1, [sp, #12]
 800c156:	2b00      	cmp	r3, #0
 800c158:	bfbb      	ittet	lt
 800c15a:	425b      	neglt	r3, r3
 800c15c:	f042 0202 	orrlt.w	r2, r2, #2
 800c160:	9307      	strge	r3, [sp, #28]
 800c162:	9307      	strlt	r3, [sp, #28]
 800c164:	bfb8      	it	lt
 800c166:	9204      	strlt	r2, [sp, #16]
 800c168:	7823      	ldrb	r3, [r4, #0]
 800c16a:	2b2e      	cmp	r3, #46	; 0x2e
 800c16c:	d10c      	bne.n	800c188 <_svfiprintf_r+0x130>
 800c16e:	7863      	ldrb	r3, [r4, #1]
 800c170:	2b2a      	cmp	r3, #42	; 0x2a
 800c172:	d135      	bne.n	800c1e0 <_svfiprintf_r+0x188>
 800c174:	9b03      	ldr	r3, [sp, #12]
 800c176:	1d1a      	adds	r2, r3, #4
 800c178:	681b      	ldr	r3, [r3, #0]
 800c17a:	9203      	str	r2, [sp, #12]
 800c17c:	2b00      	cmp	r3, #0
 800c17e:	bfb8      	it	lt
 800c180:	f04f 33ff 	movlt.w	r3, #4294967295
 800c184:	3402      	adds	r4, #2
 800c186:	9305      	str	r3, [sp, #20]
 800c188:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800c254 <_svfiprintf_r+0x1fc>
 800c18c:	7821      	ldrb	r1, [r4, #0]
 800c18e:	2203      	movs	r2, #3
 800c190:	4650      	mov	r0, sl
 800c192:	f7f4 f825 	bl	80001e0 <memchr>
 800c196:	b140      	cbz	r0, 800c1aa <_svfiprintf_r+0x152>
 800c198:	2340      	movs	r3, #64	; 0x40
 800c19a:	eba0 000a 	sub.w	r0, r0, sl
 800c19e:	fa03 f000 	lsl.w	r0, r3, r0
 800c1a2:	9b04      	ldr	r3, [sp, #16]
 800c1a4:	4303      	orrs	r3, r0
 800c1a6:	3401      	adds	r4, #1
 800c1a8:	9304      	str	r3, [sp, #16]
 800c1aa:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c1ae:	4826      	ldr	r0, [pc, #152]	; (800c248 <_svfiprintf_r+0x1f0>)
 800c1b0:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800c1b4:	2206      	movs	r2, #6
 800c1b6:	f7f4 f813 	bl	80001e0 <memchr>
 800c1ba:	2800      	cmp	r0, #0
 800c1bc:	d038      	beq.n	800c230 <_svfiprintf_r+0x1d8>
 800c1be:	4b23      	ldr	r3, [pc, #140]	; (800c24c <_svfiprintf_r+0x1f4>)
 800c1c0:	bb1b      	cbnz	r3, 800c20a <_svfiprintf_r+0x1b2>
 800c1c2:	9b03      	ldr	r3, [sp, #12]
 800c1c4:	3307      	adds	r3, #7
 800c1c6:	f023 0307 	bic.w	r3, r3, #7
 800c1ca:	3308      	adds	r3, #8
 800c1cc:	9303      	str	r3, [sp, #12]
 800c1ce:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c1d0:	4433      	add	r3, r6
 800c1d2:	9309      	str	r3, [sp, #36]	; 0x24
 800c1d4:	e767      	b.n	800c0a6 <_svfiprintf_r+0x4e>
 800c1d6:	fb0c 3202 	mla	r2, ip, r2, r3
 800c1da:	460c      	mov	r4, r1
 800c1dc:	2001      	movs	r0, #1
 800c1de:	e7a5      	b.n	800c12c <_svfiprintf_r+0xd4>
 800c1e0:	2300      	movs	r3, #0
 800c1e2:	3401      	adds	r4, #1
 800c1e4:	9305      	str	r3, [sp, #20]
 800c1e6:	4619      	mov	r1, r3
 800c1e8:	f04f 0c0a 	mov.w	ip, #10
 800c1ec:	4620      	mov	r0, r4
 800c1ee:	f810 2b01 	ldrb.w	r2, [r0], #1
 800c1f2:	3a30      	subs	r2, #48	; 0x30
 800c1f4:	2a09      	cmp	r2, #9
 800c1f6:	d903      	bls.n	800c200 <_svfiprintf_r+0x1a8>
 800c1f8:	2b00      	cmp	r3, #0
 800c1fa:	d0c5      	beq.n	800c188 <_svfiprintf_r+0x130>
 800c1fc:	9105      	str	r1, [sp, #20]
 800c1fe:	e7c3      	b.n	800c188 <_svfiprintf_r+0x130>
 800c200:	fb0c 2101 	mla	r1, ip, r1, r2
 800c204:	4604      	mov	r4, r0
 800c206:	2301      	movs	r3, #1
 800c208:	e7f0      	b.n	800c1ec <_svfiprintf_r+0x194>
 800c20a:	ab03      	add	r3, sp, #12
 800c20c:	9300      	str	r3, [sp, #0]
 800c20e:	462a      	mov	r2, r5
 800c210:	4b0f      	ldr	r3, [pc, #60]	; (800c250 <_svfiprintf_r+0x1f8>)
 800c212:	a904      	add	r1, sp, #16
 800c214:	4638      	mov	r0, r7
 800c216:	f7fc f927 	bl	8008468 <_printf_float>
 800c21a:	1c42      	adds	r2, r0, #1
 800c21c:	4606      	mov	r6, r0
 800c21e:	d1d6      	bne.n	800c1ce <_svfiprintf_r+0x176>
 800c220:	89ab      	ldrh	r3, [r5, #12]
 800c222:	065b      	lsls	r3, r3, #25
 800c224:	f53f af2c 	bmi.w	800c080 <_svfiprintf_r+0x28>
 800c228:	9809      	ldr	r0, [sp, #36]	; 0x24
 800c22a:	b01d      	add	sp, #116	; 0x74
 800c22c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c230:	ab03      	add	r3, sp, #12
 800c232:	9300      	str	r3, [sp, #0]
 800c234:	462a      	mov	r2, r5
 800c236:	4b06      	ldr	r3, [pc, #24]	; (800c250 <_svfiprintf_r+0x1f8>)
 800c238:	a904      	add	r1, sp, #16
 800c23a:	4638      	mov	r0, r7
 800c23c:	f7fc fbb8 	bl	80089b0 <_printf_i>
 800c240:	e7eb      	b.n	800c21a <_svfiprintf_r+0x1c2>
 800c242:	bf00      	nop
 800c244:	0800cf34 	.word	0x0800cf34
 800c248:	0800cf3e 	.word	0x0800cf3e
 800c24c:	08008469 	.word	0x08008469
 800c250:	0800bfa1 	.word	0x0800bfa1
 800c254:	0800cf3a 	.word	0x0800cf3a

0800c258 <_read_r>:
 800c258:	b538      	push	{r3, r4, r5, lr}
 800c25a:	4d07      	ldr	r5, [pc, #28]	; (800c278 <_read_r+0x20>)
 800c25c:	4604      	mov	r4, r0
 800c25e:	4608      	mov	r0, r1
 800c260:	4611      	mov	r1, r2
 800c262:	2200      	movs	r2, #0
 800c264:	602a      	str	r2, [r5, #0]
 800c266:	461a      	mov	r2, r3
 800c268:	f7f5 fb5e 	bl	8001928 <_read>
 800c26c:	1c43      	adds	r3, r0, #1
 800c26e:	d102      	bne.n	800c276 <_read_r+0x1e>
 800c270:	682b      	ldr	r3, [r5, #0]
 800c272:	b103      	cbz	r3, 800c276 <_read_r+0x1e>
 800c274:	6023      	str	r3, [r4, #0]
 800c276:	bd38      	pop	{r3, r4, r5, pc}
 800c278:	20001dc0 	.word	0x20001dc0
 800c27c:	00000000 	.word	0x00000000

0800c280 <nan>:
 800c280:	ed9f 0b01 	vldr	d0, [pc, #4]	; 800c288 <nan+0x8>
 800c284:	4770      	bx	lr
 800c286:	bf00      	nop
 800c288:	00000000 	.word	0x00000000
 800c28c:	7ff80000 	.word	0x7ff80000

0800c290 <strncmp>:
 800c290:	b510      	push	{r4, lr}
 800c292:	b17a      	cbz	r2, 800c2b4 <strncmp+0x24>
 800c294:	4603      	mov	r3, r0
 800c296:	3901      	subs	r1, #1
 800c298:	1884      	adds	r4, r0, r2
 800c29a:	f813 0b01 	ldrb.w	r0, [r3], #1
 800c29e:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 800c2a2:	4290      	cmp	r0, r2
 800c2a4:	d101      	bne.n	800c2aa <strncmp+0x1a>
 800c2a6:	42a3      	cmp	r3, r4
 800c2a8:	d101      	bne.n	800c2ae <strncmp+0x1e>
 800c2aa:	1a80      	subs	r0, r0, r2
 800c2ac:	bd10      	pop	{r4, pc}
 800c2ae:	2800      	cmp	r0, #0
 800c2b0:	d1f3      	bne.n	800c29a <strncmp+0xa>
 800c2b2:	e7fa      	b.n	800c2aa <strncmp+0x1a>
 800c2b4:	4610      	mov	r0, r2
 800c2b6:	e7f9      	b.n	800c2ac <strncmp+0x1c>

0800c2b8 <__ascii_wctomb>:
 800c2b8:	b149      	cbz	r1, 800c2ce <__ascii_wctomb+0x16>
 800c2ba:	2aff      	cmp	r2, #255	; 0xff
 800c2bc:	bf85      	ittet	hi
 800c2be:	238a      	movhi	r3, #138	; 0x8a
 800c2c0:	6003      	strhi	r3, [r0, #0]
 800c2c2:	700a      	strbls	r2, [r1, #0]
 800c2c4:	f04f 30ff 	movhi.w	r0, #4294967295
 800c2c8:	bf98      	it	ls
 800c2ca:	2001      	movls	r0, #1
 800c2cc:	4770      	bx	lr
 800c2ce:	4608      	mov	r0, r1
 800c2d0:	4770      	bx	lr
	...

0800c2d4 <__assert_func>:
 800c2d4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800c2d6:	4614      	mov	r4, r2
 800c2d8:	461a      	mov	r2, r3
 800c2da:	4b09      	ldr	r3, [pc, #36]	; (800c300 <__assert_func+0x2c>)
 800c2dc:	681b      	ldr	r3, [r3, #0]
 800c2de:	4605      	mov	r5, r0
 800c2e0:	68d8      	ldr	r0, [r3, #12]
 800c2e2:	b14c      	cbz	r4, 800c2f8 <__assert_func+0x24>
 800c2e4:	4b07      	ldr	r3, [pc, #28]	; (800c304 <__assert_func+0x30>)
 800c2e6:	9100      	str	r1, [sp, #0]
 800c2e8:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800c2ec:	4906      	ldr	r1, [pc, #24]	; (800c308 <__assert_func+0x34>)
 800c2ee:	462b      	mov	r3, r5
 800c2f0:	f000 f80e 	bl	800c310 <fiprintf>
 800c2f4:	f000 fa80 	bl	800c7f8 <abort>
 800c2f8:	4b04      	ldr	r3, [pc, #16]	; (800c30c <__assert_func+0x38>)
 800c2fa:	461c      	mov	r4, r3
 800c2fc:	e7f3      	b.n	800c2e6 <__assert_func+0x12>
 800c2fe:	bf00      	nop
 800c300:	20000010 	.word	0x20000010
 800c304:	0800cf45 	.word	0x0800cf45
 800c308:	0800cf52 	.word	0x0800cf52
 800c30c:	0800cf80 	.word	0x0800cf80

0800c310 <fiprintf>:
 800c310:	b40e      	push	{r1, r2, r3}
 800c312:	b503      	push	{r0, r1, lr}
 800c314:	4601      	mov	r1, r0
 800c316:	ab03      	add	r3, sp, #12
 800c318:	4805      	ldr	r0, [pc, #20]	; (800c330 <fiprintf+0x20>)
 800c31a:	f853 2b04 	ldr.w	r2, [r3], #4
 800c31e:	6800      	ldr	r0, [r0, #0]
 800c320:	9301      	str	r3, [sp, #4]
 800c322:	f000 f879 	bl	800c418 <_vfiprintf_r>
 800c326:	b002      	add	sp, #8
 800c328:	f85d eb04 	ldr.w	lr, [sp], #4
 800c32c:	b003      	add	sp, #12
 800c32e:	4770      	bx	lr
 800c330:	20000010 	.word	0x20000010

0800c334 <memmove>:
 800c334:	4288      	cmp	r0, r1
 800c336:	b510      	push	{r4, lr}
 800c338:	eb01 0402 	add.w	r4, r1, r2
 800c33c:	d902      	bls.n	800c344 <memmove+0x10>
 800c33e:	4284      	cmp	r4, r0
 800c340:	4623      	mov	r3, r4
 800c342:	d807      	bhi.n	800c354 <memmove+0x20>
 800c344:	1e43      	subs	r3, r0, #1
 800c346:	42a1      	cmp	r1, r4
 800c348:	d008      	beq.n	800c35c <memmove+0x28>
 800c34a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800c34e:	f803 2f01 	strb.w	r2, [r3, #1]!
 800c352:	e7f8      	b.n	800c346 <memmove+0x12>
 800c354:	4402      	add	r2, r0
 800c356:	4601      	mov	r1, r0
 800c358:	428a      	cmp	r2, r1
 800c35a:	d100      	bne.n	800c35e <memmove+0x2a>
 800c35c:	bd10      	pop	{r4, pc}
 800c35e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800c362:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800c366:	e7f7      	b.n	800c358 <memmove+0x24>

0800c368 <_realloc_r>:
 800c368:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c36c:	4680      	mov	r8, r0
 800c36e:	4614      	mov	r4, r2
 800c370:	460e      	mov	r6, r1
 800c372:	b921      	cbnz	r1, 800c37e <_realloc_r+0x16>
 800c374:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800c378:	4611      	mov	r1, r2
 800c37a:	f7fb bf61 	b.w	8008240 <_malloc_r>
 800c37e:	b92a      	cbnz	r2, 800c38c <_realloc_r+0x24>
 800c380:	f7ff fdc2 	bl	800bf08 <_free_r>
 800c384:	4625      	mov	r5, r4
 800c386:	4628      	mov	r0, r5
 800c388:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c38c:	f000 faa0 	bl	800c8d0 <_malloc_usable_size_r>
 800c390:	4284      	cmp	r4, r0
 800c392:	4607      	mov	r7, r0
 800c394:	d802      	bhi.n	800c39c <_realloc_r+0x34>
 800c396:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800c39a:	d812      	bhi.n	800c3c2 <_realloc_r+0x5a>
 800c39c:	4621      	mov	r1, r4
 800c39e:	4640      	mov	r0, r8
 800c3a0:	f7fb ff4e 	bl	8008240 <_malloc_r>
 800c3a4:	4605      	mov	r5, r0
 800c3a6:	2800      	cmp	r0, #0
 800c3a8:	d0ed      	beq.n	800c386 <_realloc_r+0x1e>
 800c3aa:	42bc      	cmp	r4, r7
 800c3ac:	4622      	mov	r2, r4
 800c3ae:	4631      	mov	r1, r6
 800c3b0:	bf28      	it	cs
 800c3b2:	463a      	movcs	r2, r7
 800c3b4:	f7fb ff0d 	bl	80081d2 <memcpy>
 800c3b8:	4631      	mov	r1, r6
 800c3ba:	4640      	mov	r0, r8
 800c3bc:	f7ff fda4 	bl	800bf08 <_free_r>
 800c3c0:	e7e1      	b.n	800c386 <_realloc_r+0x1e>
 800c3c2:	4635      	mov	r5, r6
 800c3c4:	e7df      	b.n	800c386 <_realloc_r+0x1e>

0800c3c6 <__sfputc_r>:
 800c3c6:	6893      	ldr	r3, [r2, #8]
 800c3c8:	3b01      	subs	r3, #1
 800c3ca:	2b00      	cmp	r3, #0
 800c3cc:	b410      	push	{r4}
 800c3ce:	6093      	str	r3, [r2, #8]
 800c3d0:	da08      	bge.n	800c3e4 <__sfputc_r+0x1e>
 800c3d2:	6994      	ldr	r4, [r2, #24]
 800c3d4:	42a3      	cmp	r3, r4
 800c3d6:	db01      	blt.n	800c3dc <__sfputc_r+0x16>
 800c3d8:	290a      	cmp	r1, #10
 800c3da:	d103      	bne.n	800c3e4 <__sfputc_r+0x1e>
 800c3dc:	f85d 4b04 	ldr.w	r4, [sp], #4
 800c3e0:	f000 b94a 	b.w	800c678 <__swbuf_r>
 800c3e4:	6813      	ldr	r3, [r2, #0]
 800c3e6:	1c58      	adds	r0, r3, #1
 800c3e8:	6010      	str	r0, [r2, #0]
 800c3ea:	7019      	strb	r1, [r3, #0]
 800c3ec:	4608      	mov	r0, r1
 800c3ee:	f85d 4b04 	ldr.w	r4, [sp], #4
 800c3f2:	4770      	bx	lr

0800c3f4 <__sfputs_r>:
 800c3f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c3f6:	4606      	mov	r6, r0
 800c3f8:	460f      	mov	r7, r1
 800c3fa:	4614      	mov	r4, r2
 800c3fc:	18d5      	adds	r5, r2, r3
 800c3fe:	42ac      	cmp	r4, r5
 800c400:	d101      	bne.n	800c406 <__sfputs_r+0x12>
 800c402:	2000      	movs	r0, #0
 800c404:	e007      	b.n	800c416 <__sfputs_r+0x22>
 800c406:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c40a:	463a      	mov	r2, r7
 800c40c:	4630      	mov	r0, r6
 800c40e:	f7ff ffda 	bl	800c3c6 <__sfputc_r>
 800c412:	1c43      	adds	r3, r0, #1
 800c414:	d1f3      	bne.n	800c3fe <__sfputs_r+0xa>
 800c416:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800c418 <_vfiprintf_r>:
 800c418:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c41c:	460d      	mov	r5, r1
 800c41e:	b09d      	sub	sp, #116	; 0x74
 800c420:	4614      	mov	r4, r2
 800c422:	4698      	mov	r8, r3
 800c424:	4606      	mov	r6, r0
 800c426:	b118      	cbz	r0, 800c430 <_vfiprintf_r+0x18>
 800c428:	6983      	ldr	r3, [r0, #24]
 800c42a:	b90b      	cbnz	r3, 800c430 <_vfiprintf_r+0x18>
 800c42c:	f7fb fe0c 	bl	8008048 <__sinit>
 800c430:	4b89      	ldr	r3, [pc, #548]	; (800c658 <_vfiprintf_r+0x240>)
 800c432:	429d      	cmp	r5, r3
 800c434:	d11b      	bne.n	800c46e <_vfiprintf_r+0x56>
 800c436:	6875      	ldr	r5, [r6, #4]
 800c438:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800c43a:	07d9      	lsls	r1, r3, #31
 800c43c:	d405      	bmi.n	800c44a <_vfiprintf_r+0x32>
 800c43e:	89ab      	ldrh	r3, [r5, #12]
 800c440:	059a      	lsls	r2, r3, #22
 800c442:	d402      	bmi.n	800c44a <_vfiprintf_r+0x32>
 800c444:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800c446:	f7fb fec2 	bl	80081ce <__retarget_lock_acquire_recursive>
 800c44a:	89ab      	ldrh	r3, [r5, #12]
 800c44c:	071b      	lsls	r3, r3, #28
 800c44e:	d501      	bpl.n	800c454 <_vfiprintf_r+0x3c>
 800c450:	692b      	ldr	r3, [r5, #16]
 800c452:	b9eb      	cbnz	r3, 800c490 <_vfiprintf_r+0x78>
 800c454:	4629      	mov	r1, r5
 800c456:	4630      	mov	r0, r6
 800c458:	f000 f960 	bl	800c71c <__swsetup_r>
 800c45c:	b1c0      	cbz	r0, 800c490 <_vfiprintf_r+0x78>
 800c45e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800c460:	07dc      	lsls	r4, r3, #31
 800c462:	d50e      	bpl.n	800c482 <_vfiprintf_r+0x6a>
 800c464:	f04f 30ff 	mov.w	r0, #4294967295
 800c468:	b01d      	add	sp, #116	; 0x74
 800c46a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c46e:	4b7b      	ldr	r3, [pc, #492]	; (800c65c <_vfiprintf_r+0x244>)
 800c470:	429d      	cmp	r5, r3
 800c472:	d101      	bne.n	800c478 <_vfiprintf_r+0x60>
 800c474:	68b5      	ldr	r5, [r6, #8]
 800c476:	e7df      	b.n	800c438 <_vfiprintf_r+0x20>
 800c478:	4b79      	ldr	r3, [pc, #484]	; (800c660 <_vfiprintf_r+0x248>)
 800c47a:	429d      	cmp	r5, r3
 800c47c:	bf08      	it	eq
 800c47e:	68f5      	ldreq	r5, [r6, #12]
 800c480:	e7da      	b.n	800c438 <_vfiprintf_r+0x20>
 800c482:	89ab      	ldrh	r3, [r5, #12]
 800c484:	0598      	lsls	r0, r3, #22
 800c486:	d4ed      	bmi.n	800c464 <_vfiprintf_r+0x4c>
 800c488:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800c48a:	f7fb fea1 	bl	80081d0 <__retarget_lock_release_recursive>
 800c48e:	e7e9      	b.n	800c464 <_vfiprintf_r+0x4c>
 800c490:	2300      	movs	r3, #0
 800c492:	9309      	str	r3, [sp, #36]	; 0x24
 800c494:	2320      	movs	r3, #32
 800c496:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800c49a:	f8cd 800c 	str.w	r8, [sp, #12]
 800c49e:	2330      	movs	r3, #48	; 0x30
 800c4a0:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800c664 <_vfiprintf_r+0x24c>
 800c4a4:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800c4a8:	f04f 0901 	mov.w	r9, #1
 800c4ac:	4623      	mov	r3, r4
 800c4ae:	469a      	mov	sl, r3
 800c4b0:	f813 2b01 	ldrb.w	r2, [r3], #1
 800c4b4:	b10a      	cbz	r2, 800c4ba <_vfiprintf_r+0xa2>
 800c4b6:	2a25      	cmp	r2, #37	; 0x25
 800c4b8:	d1f9      	bne.n	800c4ae <_vfiprintf_r+0x96>
 800c4ba:	ebba 0b04 	subs.w	fp, sl, r4
 800c4be:	d00b      	beq.n	800c4d8 <_vfiprintf_r+0xc0>
 800c4c0:	465b      	mov	r3, fp
 800c4c2:	4622      	mov	r2, r4
 800c4c4:	4629      	mov	r1, r5
 800c4c6:	4630      	mov	r0, r6
 800c4c8:	f7ff ff94 	bl	800c3f4 <__sfputs_r>
 800c4cc:	3001      	adds	r0, #1
 800c4ce:	f000 80aa 	beq.w	800c626 <_vfiprintf_r+0x20e>
 800c4d2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800c4d4:	445a      	add	r2, fp
 800c4d6:	9209      	str	r2, [sp, #36]	; 0x24
 800c4d8:	f89a 3000 	ldrb.w	r3, [sl]
 800c4dc:	2b00      	cmp	r3, #0
 800c4de:	f000 80a2 	beq.w	800c626 <_vfiprintf_r+0x20e>
 800c4e2:	2300      	movs	r3, #0
 800c4e4:	f04f 32ff 	mov.w	r2, #4294967295
 800c4e8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800c4ec:	f10a 0a01 	add.w	sl, sl, #1
 800c4f0:	9304      	str	r3, [sp, #16]
 800c4f2:	9307      	str	r3, [sp, #28]
 800c4f4:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800c4f8:	931a      	str	r3, [sp, #104]	; 0x68
 800c4fa:	4654      	mov	r4, sl
 800c4fc:	2205      	movs	r2, #5
 800c4fe:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c502:	4858      	ldr	r0, [pc, #352]	; (800c664 <_vfiprintf_r+0x24c>)
 800c504:	f7f3 fe6c 	bl	80001e0 <memchr>
 800c508:	9a04      	ldr	r2, [sp, #16]
 800c50a:	b9d8      	cbnz	r0, 800c544 <_vfiprintf_r+0x12c>
 800c50c:	06d1      	lsls	r1, r2, #27
 800c50e:	bf44      	itt	mi
 800c510:	2320      	movmi	r3, #32
 800c512:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800c516:	0713      	lsls	r3, r2, #28
 800c518:	bf44      	itt	mi
 800c51a:	232b      	movmi	r3, #43	; 0x2b
 800c51c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800c520:	f89a 3000 	ldrb.w	r3, [sl]
 800c524:	2b2a      	cmp	r3, #42	; 0x2a
 800c526:	d015      	beq.n	800c554 <_vfiprintf_r+0x13c>
 800c528:	9a07      	ldr	r2, [sp, #28]
 800c52a:	4654      	mov	r4, sl
 800c52c:	2000      	movs	r0, #0
 800c52e:	f04f 0c0a 	mov.w	ip, #10
 800c532:	4621      	mov	r1, r4
 800c534:	f811 3b01 	ldrb.w	r3, [r1], #1
 800c538:	3b30      	subs	r3, #48	; 0x30
 800c53a:	2b09      	cmp	r3, #9
 800c53c:	d94e      	bls.n	800c5dc <_vfiprintf_r+0x1c4>
 800c53e:	b1b0      	cbz	r0, 800c56e <_vfiprintf_r+0x156>
 800c540:	9207      	str	r2, [sp, #28]
 800c542:	e014      	b.n	800c56e <_vfiprintf_r+0x156>
 800c544:	eba0 0308 	sub.w	r3, r0, r8
 800c548:	fa09 f303 	lsl.w	r3, r9, r3
 800c54c:	4313      	orrs	r3, r2
 800c54e:	9304      	str	r3, [sp, #16]
 800c550:	46a2      	mov	sl, r4
 800c552:	e7d2      	b.n	800c4fa <_vfiprintf_r+0xe2>
 800c554:	9b03      	ldr	r3, [sp, #12]
 800c556:	1d19      	adds	r1, r3, #4
 800c558:	681b      	ldr	r3, [r3, #0]
 800c55a:	9103      	str	r1, [sp, #12]
 800c55c:	2b00      	cmp	r3, #0
 800c55e:	bfbb      	ittet	lt
 800c560:	425b      	neglt	r3, r3
 800c562:	f042 0202 	orrlt.w	r2, r2, #2
 800c566:	9307      	strge	r3, [sp, #28]
 800c568:	9307      	strlt	r3, [sp, #28]
 800c56a:	bfb8      	it	lt
 800c56c:	9204      	strlt	r2, [sp, #16]
 800c56e:	7823      	ldrb	r3, [r4, #0]
 800c570:	2b2e      	cmp	r3, #46	; 0x2e
 800c572:	d10c      	bne.n	800c58e <_vfiprintf_r+0x176>
 800c574:	7863      	ldrb	r3, [r4, #1]
 800c576:	2b2a      	cmp	r3, #42	; 0x2a
 800c578:	d135      	bne.n	800c5e6 <_vfiprintf_r+0x1ce>
 800c57a:	9b03      	ldr	r3, [sp, #12]
 800c57c:	1d1a      	adds	r2, r3, #4
 800c57e:	681b      	ldr	r3, [r3, #0]
 800c580:	9203      	str	r2, [sp, #12]
 800c582:	2b00      	cmp	r3, #0
 800c584:	bfb8      	it	lt
 800c586:	f04f 33ff 	movlt.w	r3, #4294967295
 800c58a:	3402      	adds	r4, #2
 800c58c:	9305      	str	r3, [sp, #20]
 800c58e:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800c674 <_vfiprintf_r+0x25c>
 800c592:	7821      	ldrb	r1, [r4, #0]
 800c594:	2203      	movs	r2, #3
 800c596:	4650      	mov	r0, sl
 800c598:	f7f3 fe22 	bl	80001e0 <memchr>
 800c59c:	b140      	cbz	r0, 800c5b0 <_vfiprintf_r+0x198>
 800c59e:	2340      	movs	r3, #64	; 0x40
 800c5a0:	eba0 000a 	sub.w	r0, r0, sl
 800c5a4:	fa03 f000 	lsl.w	r0, r3, r0
 800c5a8:	9b04      	ldr	r3, [sp, #16]
 800c5aa:	4303      	orrs	r3, r0
 800c5ac:	3401      	adds	r4, #1
 800c5ae:	9304      	str	r3, [sp, #16]
 800c5b0:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c5b4:	482c      	ldr	r0, [pc, #176]	; (800c668 <_vfiprintf_r+0x250>)
 800c5b6:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800c5ba:	2206      	movs	r2, #6
 800c5bc:	f7f3 fe10 	bl	80001e0 <memchr>
 800c5c0:	2800      	cmp	r0, #0
 800c5c2:	d03f      	beq.n	800c644 <_vfiprintf_r+0x22c>
 800c5c4:	4b29      	ldr	r3, [pc, #164]	; (800c66c <_vfiprintf_r+0x254>)
 800c5c6:	bb1b      	cbnz	r3, 800c610 <_vfiprintf_r+0x1f8>
 800c5c8:	9b03      	ldr	r3, [sp, #12]
 800c5ca:	3307      	adds	r3, #7
 800c5cc:	f023 0307 	bic.w	r3, r3, #7
 800c5d0:	3308      	adds	r3, #8
 800c5d2:	9303      	str	r3, [sp, #12]
 800c5d4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c5d6:	443b      	add	r3, r7
 800c5d8:	9309      	str	r3, [sp, #36]	; 0x24
 800c5da:	e767      	b.n	800c4ac <_vfiprintf_r+0x94>
 800c5dc:	fb0c 3202 	mla	r2, ip, r2, r3
 800c5e0:	460c      	mov	r4, r1
 800c5e2:	2001      	movs	r0, #1
 800c5e4:	e7a5      	b.n	800c532 <_vfiprintf_r+0x11a>
 800c5e6:	2300      	movs	r3, #0
 800c5e8:	3401      	adds	r4, #1
 800c5ea:	9305      	str	r3, [sp, #20]
 800c5ec:	4619      	mov	r1, r3
 800c5ee:	f04f 0c0a 	mov.w	ip, #10
 800c5f2:	4620      	mov	r0, r4
 800c5f4:	f810 2b01 	ldrb.w	r2, [r0], #1
 800c5f8:	3a30      	subs	r2, #48	; 0x30
 800c5fa:	2a09      	cmp	r2, #9
 800c5fc:	d903      	bls.n	800c606 <_vfiprintf_r+0x1ee>
 800c5fe:	2b00      	cmp	r3, #0
 800c600:	d0c5      	beq.n	800c58e <_vfiprintf_r+0x176>
 800c602:	9105      	str	r1, [sp, #20]
 800c604:	e7c3      	b.n	800c58e <_vfiprintf_r+0x176>
 800c606:	fb0c 2101 	mla	r1, ip, r1, r2
 800c60a:	4604      	mov	r4, r0
 800c60c:	2301      	movs	r3, #1
 800c60e:	e7f0      	b.n	800c5f2 <_vfiprintf_r+0x1da>
 800c610:	ab03      	add	r3, sp, #12
 800c612:	9300      	str	r3, [sp, #0]
 800c614:	462a      	mov	r2, r5
 800c616:	4b16      	ldr	r3, [pc, #88]	; (800c670 <_vfiprintf_r+0x258>)
 800c618:	a904      	add	r1, sp, #16
 800c61a:	4630      	mov	r0, r6
 800c61c:	f7fb ff24 	bl	8008468 <_printf_float>
 800c620:	4607      	mov	r7, r0
 800c622:	1c78      	adds	r0, r7, #1
 800c624:	d1d6      	bne.n	800c5d4 <_vfiprintf_r+0x1bc>
 800c626:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800c628:	07d9      	lsls	r1, r3, #31
 800c62a:	d405      	bmi.n	800c638 <_vfiprintf_r+0x220>
 800c62c:	89ab      	ldrh	r3, [r5, #12]
 800c62e:	059a      	lsls	r2, r3, #22
 800c630:	d402      	bmi.n	800c638 <_vfiprintf_r+0x220>
 800c632:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800c634:	f7fb fdcc 	bl	80081d0 <__retarget_lock_release_recursive>
 800c638:	89ab      	ldrh	r3, [r5, #12]
 800c63a:	065b      	lsls	r3, r3, #25
 800c63c:	f53f af12 	bmi.w	800c464 <_vfiprintf_r+0x4c>
 800c640:	9809      	ldr	r0, [sp, #36]	; 0x24
 800c642:	e711      	b.n	800c468 <_vfiprintf_r+0x50>
 800c644:	ab03      	add	r3, sp, #12
 800c646:	9300      	str	r3, [sp, #0]
 800c648:	462a      	mov	r2, r5
 800c64a:	4b09      	ldr	r3, [pc, #36]	; (800c670 <_vfiprintf_r+0x258>)
 800c64c:	a904      	add	r1, sp, #16
 800c64e:	4630      	mov	r0, r6
 800c650:	f7fc f9ae 	bl	80089b0 <_printf_i>
 800c654:	e7e4      	b.n	800c620 <_vfiprintf_r+0x208>
 800c656:	bf00      	nop
 800c658:	0800cafc 	.word	0x0800cafc
 800c65c:	0800cb1c 	.word	0x0800cb1c
 800c660:	0800cadc 	.word	0x0800cadc
 800c664:	0800cf34 	.word	0x0800cf34
 800c668:	0800cf3e 	.word	0x0800cf3e
 800c66c:	08008469 	.word	0x08008469
 800c670:	0800c3f5 	.word	0x0800c3f5
 800c674:	0800cf3a 	.word	0x0800cf3a

0800c678 <__swbuf_r>:
 800c678:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c67a:	460e      	mov	r6, r1
 800c67c:	4614      	mov	r4, r2
 800c67e:	4605      	mov	r5, r0
 800c680:	b118      	cbz	r0, 800c68a <__swbuf_r+0x12>
 800c682:	6983      	ldr	r3, [r0, #24]
 800c684:	b90b      	cbnz	r3, 800c68a <__swbuf_r+0x12>
 800c686:	f7fb fcdf 	bl	8008048 <__sinit>
 800c68a:	4b21      	ldr	r3, [pc, #132]	; (800c710 <__swbuf_r+0x98>)
 800c68c:	429c      	cmp	r4, r3
 800c68e:	d12b      	bne.n	800c6e8 <__swbuf_r+0x70>
 800c690:	686c      	ldr	r4, [r5, #4]
 800c692:	69a3      	ldr	r3, [r4, #24]
 800c694:	60a3      	str	r3, [r4, #8]
 800c696:	89a3      	ldrh	r3, [r4, #12]
 800c698:	071a      	lsls	r2, r3, #28
 800c69a:	d52f      	bpl.n	800c6fc <__swbuf_r+0x84>
 800c69c:	6923      	ldr	r3, [r4, #16]
 800c69e:	b36b      	cbz	r3, 800c6fc <__swbuf_r+0x84>
 800c6a0:	6923      	ldr	r3, [r4, #16]
 800c6a2:	6820      	ldr	r0, [r4, #0]
 800c6a4:	1ac0      	subs	r0, r0, r3
 800c6a6:	6963      	ldr	r3, [r4, #20]
 800c6a8:	b2f6      	uxtb	r6, r6
 800c6aa:	4283      	cmp	r3, r0
 800c6ac:	4637      	mov	r7, r6
 800c6ae:	dc04      	bgt.n	800c6ba <__swbuf_r+0x42>
 800c6b0:	4621      	mov	r1, r4
 800c6b2:	4628      	mov	r0, r5
 800c6b4:	f7fe fb68 	bl	800ad88 <_fflush_r>
 800c6b8:	bb30      	cbnz	r0, 800c708 <__swbuf_r+0x90>
 800c6ba:	68a3      	ldr	r3, [r4, #8]
 800c6bc:	3b01      	subs	r3, #1
 800c6be:	60a3      	str	r3, [r4, #8]
 800c6c0:	6823      	ldr	r3, [r4, #0]
 800c6c2:	1c5a      	adds	r2, r3, #1
 800c6c4:	6022      	str	r2, [r4, #0]
 800c6c6:	701e      	strb	r6, [r3, #0]
 800c6c8:	6963      	ldr	r3, [r4, #20]
 800c6ca:	3001      	adds	r0, #1
 800c6cc:	4283      	cmp	r3, r0
 800c6ce:	d004      	beq.n	800c6da <__swbuf_r+0x62>
 800c6d0:	89a3      	ldrh	r3, [r4, #12]
 800c6d2:	07db      	lsls	r3, r3, #31
 800c6d4:	d506      	bpl.n	800c6e4 <__swbuf_r+0x6c>
 800c6d6:	2e0a      	cmp	r6, #10
 800c6d8:	d104      	bne.n	800c6e4 <__swbuf_r+0x6c>
 800c6da:	4621      	mov	r1, r4
 800c6dc:	4628      	mov	r0, r5
 800c6de:	f7fe fb53 	bl	800ad88 <_fflush_r>
 800c6e2:	b988      	cbnz	r0, 800c708 <__swbuf_r+0x90>
 800c6e4:	4638      	mov	r0, r7
 800c6e6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c6e8:	4b0a      	ldr	r3, [pc, #40]	; (800c714 <__swbuf_r+0x9c>)
 800c6ea:	429c      	cmp	r4, r3
 800c6ec:	d101      	bne.n	800c6f2 <__swbuf_r+0x7a>
 800c6ee:	68ac      	ldr	r4, [r5, #8]
 800c6f0:	e7cf      	b.n	800c692 <__swbuf_r+0x1a>
 800c6f2:	4b09      	ldr	r3, [pc, #36]	; (800c718 <__swbuf_r+0xa0>)
 800c6f4:	429c      	cmp	r4, r3
 800c6f6:	bf08      	it	eq
 800c6f8:	68ec      	ldreq	r4, [r5, #12]
 800c6fa:	e7ca      	b.n	800c692 <__swbuf_r+0x1a>
 800c6fc:	4621      	mov	r1, r4
 800c6fe:	4628      	mov	r0, r5
 800c700:	f000 f80c 	bl	800c71c <__swsetup_r>
 800c704:	2800      	cmp	r0, #0
 800c706:	d0cb      	beq.n	800c6a0 <__swbuf_r+0x28>
 800c708:	f04f 37ff 	mov.w	r7, #4294967295
 800c70c:	e7ea      	b.n	800c6e4 <__swbuf_r+0x6c>
 800c70e:	bf00      	nop
 800c710:	0800cafc 	.word	0x0800cafc
 800c714:	0800cb1c 	.word	0x0800cb1c
 800c718:	0800cadc 	.word	0x0800cadc

0800c71c <__swsetup_r>:
 800c71c:	4b32      	ldr	r3, [pc, #200]	; (800c7e8 <__swsetup_r+0xcc>)
 800c71e:	b570      	push	{r4, r5, r6, lr}
 800c720:	681d      	ldr	r5, [r3, #0]
 800c722:	4606      	mov	r6, r0
 800c724:	460c      	mov	r4, r1
 800c726:	b125      	cbz	r5, 800c732 <__swsetup_r+0x16>
 800c728:	69ab      	ldr	r3, [r5, #24]
 800c72a:	b913      	cbnz	r3, 800c732 <__swsetup_r+0x16>
 800c72c:	4628      	mov	r0, r5
 800c72e:	f7fb fc8b 	bl	8008048 <__sinit>
 800c732:	4b2e      	ldr	r3, [pc, #184]	; (800c7ec <__swsetup_r+0xd0>)
 800c734:	429c      	cmp	r4, r3
 800c736:	d10f      	bne.n	800c758 <__swsetup_r+0x3c>
 800c738:	686c      	ldr	r4, [r5, #4]
 800c73a:	89a3      	ldrh	r3, [r4, #12]
 800c73c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800c740:	0719      	lsls	r1, r3, #28
 800c742:	d42c      	bmi.n	800c79e <__swsetup_r+0x82>
 800c744:	06dd      	lsls	r5, r3, #27
 800c746:	d411      	bmi.n	800c76c <__swsetup_r+0x50>
 800c748:	2309      	movs	r3, #9
 800c74a:	6033      	str	r3, [r6, #0]
 800c74c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800c750:	81a3      	strh	r3, [r4, #12]
 800c752:	f04f 30ff 	mov.w	r0, #4294967295
 800c756:	e03e      	b.n	800c7d6 <__swsetup_r+0xba>
 800c758:	4b25      	ldr	r3, [pc, #148]	; (800c7f0 <__swsetup_r+0xd4>)
 800c75a:	429c      	cmp	r4, r3
 800c75c:	d101      	bne.n	800c762 <__swsetup_r+0x46>
 800c75e:	68ac      	ldr	r4, [r5, #8]
 800c760:	e7eb      	b.n	800c73a <__swsetup_r+0x1e>
 800c762:	4b24      	ldr	r3, [pc, #144]	; (800c7f4 <__swsetup_r+0xd8>)
 800c764:	429c      	cmp	r4, r3
 800c766:	bf08      	it	eq
 800c768:	68ec      	ldreq	r4, [r5, #12]
 800c76a:	e7e6      	b.n	800c73a <__swsetup_r+0x1e>
 800c76c:	0758      	lsls	r0, r3, #29
 800c76e:	d512      	bpl.n	800c796 <__swsetup_r+0x7a>
 800c770:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800c772:	b141      	cbz	r1, 800c786 <__swsetup_r+0x6a>
 800c774:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800c778:	4299      	cmp	r1, r3
 800c77a:	d002      	beq.n	800c782 <__swsetup_r+0x66>
 800c77c:	4630      	mov	r0, r6
 800c77e:	f7ff fbc3 	bl	800bf08 <_free_r>
 800c782:	2300      	movs	r3, #0
 800c784:	6363      	str	r3, [r4, #52]	; 0x34
 800c786:	89a3      	ldrh	r3, [r4, #12]
 800c788:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800c78c:	81a3      	strh	r3, [r4, #12]
 800c78e:	2300      	movs	r3, #0
 800c790:	6063      	str	r3, [r4, #4]
 800c792:	6923      	ldr	r3, [r4, #16]
 800c794:	6023      	str	r3, [r4, #0]
 800c796:	89a3      	ldrh	r3, [r4, #12]
 800c798:	f043 0308 	orr.w	r3, r3, #8
 800c79c:	81a3      	strh	r3, [r4, #12]
 800c79e:	6923      	ldr	r3, [r4, #16]
 800c7a0:	b94b      	cbnz	r3, 800c7b6 <__swsetup_r+0x9a>
 800c7a2:	89a3      	ldrh	r3, [r4, #12]
 800c7a4:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800c7a8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800c7ac:	d003      	beq.n	800c7b6 <__swsetup_r+0x9a>
 800c7ae:	4621      	mov	r1, r4
 800c7b0:	4630      	mov	r0, r6
 800c7b2:	f000 f84d 	bl	800c850 <__smakebuf_r>
 800c7b6:	89a0      	ldrh	r0, [r4, #12]
 800c7b8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800c7bc:	f010 0301 	ands.w	r3, r0, #1
 800c7c0:	d00a      	beq.n	800c7d8 <__swsetup_r+0xbc>
 800c7c2:	2300      	movs	r3, #0
 800c7c4:	60a3      	str	r3, [r4, #8]
 800c7c6:	6963      	ldr	r3, [r4, #20]
 800c7c8:	425b      	negs	r3, r3
 800c7ca:	61a3      	str	r3, [r4, #24]
 800c7cc:	6923      	ldr	r3, [r4, #16]
 800c7ce:	b943      	cbnz	r3, 800c7e2 <__swsetup_r+0xc6>
 800c7d0:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800c7d4:	d1ba      	bne.n	800c74c <__swsetup_r+0x30>
 800c7d6:	bd70      	pop	{r4, r5, r6, pc}
 800c7d8:	0781      	lsls	r1, r0, #30
 800c7da:	bf58      	it	pl
 800c7dc:	6963      	ldrpl	r3, [r4, #20]
 800c7de:	60a3      	str	r3, [r4, #8]
 800c7e0:	e7f4      	b.n	800c7cc <__swsetup_r+0xb0>
 800c7e2:	2000      	movs	r0, #0
 800c7e4:	e7f7      	b.n	800c7d6 <__swsetup_r+0xba>
 800c7e6:	bf00      	nop
 800c7e8:	20000010 	.word	0x20000010
 800c7ec:	0800cafc 	.word	0x0800cafc
 800c7f0:	0800cb1c 	.word	0x0800cb1c
 800c7f4:	0800cadc 	.word	0x0800cadc

0800c7f8 <abort>:
 800c7f8:	b508      	push	{r3, lr}
 800c7fa:	2006      	movs	r0, #6
 800c7fc:	f000 f898 	bl	800c930 <raise>
 800c800:	2001      	movs	r0, #1
 800c802:	f7f5 f887 	bl	8001914 <_exit>

0800c806 <__swhatbuf_r>:
 800c806:	b570      	push	{r4, r5, r6, lr}
 800c808:	460e      	mov	r6, r1
 800c80a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c80e:	2900      	cmp	r1, #0
 800c810:	b096      	sub	sp, #88	; 0x58
 800c812:	4614      	mov	r4, r2
 800c814:	461d      	mov	r5, r3
 800c816:	da08      	bge.n	800c82a <__swhatbuf_r+0x24>
 800c818:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800c81c:	2200      	movs	r2, #0
 800c81e:	602a      	str	r2, [r5, #0]
 800c820:	061a      	lsls	r2, r3, #24
 800c822:	d410      	bmi.n	800c846 <__swhatbuf_r+0x40>
 800c824:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800c828:	e00e      	b.n	800c848 <__swhatbuf_r+0x42>
 800c82a:	466a      	mov	r2, sp
 800c82c:	f000 f89c 	bl	800c968 <_fstat_r>
 800c830:	2800      	cmp	r0, #0
 800c832:	dbf1      	blt.n	800c818 <__swhatbuf_r+0x12>
 800c834:	9a01      	ldr	r2, [sp, #4]
 800c836:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800c83a:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800c83e:	425a      	negs	r2, r3
 800c840:	415a      	adcs	r2, r3
 800c842:	602a      	str	r2, [r5, #0]
 800c844:	e7ee      	b.n	800c824 <__swhatbuf_r+0x1e>
 800c846:	2340      	movs	r3, #64	; 0x40
 800c848:	2000      	movs	r0, #0
 800c84a:	6023      	str	r3, [r4, #0]
 800c84c:	b016      	add	sp, #88	; 0x58
 800c84e:	bd70      	pop	{r4, r5, r6, pc}

0800c850 <__smakebuf_r>:
 800c850:	898b      	ldrh	r3, [r1, #12]
 800c852:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800c854:	079d      	lsls	r5, r3, #30
 800c856:	4606      	mov	r6, r0
 800c858:	460c      	mov	r4, r1
 800c85a:	d507      	bpl.n	800c86c <__smakebuf_r+0x1c>
 800c85c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800c860:	6023      	str	r3, [r4, #0]
 800c862:	6123      	str	r3, [r4, #16]
 800c864:	2301      	movs	r3, #1
 800c866:	6163      	str	r3, [r4, #20]
 800c868:	b002      	add	sp, #8
 800c86a:	bd70      	pop	{r4, r5, r6, pc}
 800c86c:	ab01      	add	r3, sp, #4
 800c86e:	466a      	mov	r2, sp
 800c870:	f7ff ffc9 	bl	800c806 <__swhatbuf_r>
 800c874:	9900      	ldr	r1, [sp, #0]
 800c876:	4605      	mov	r5, r0
 800c878:	4630      	mov	r0, r6
 800c87a:	f7fb fce1 	bl	8008240 <_malloc_r>
 800c87e:	b948      	cbnz	r0, 800c894 <__smakebuf_r+0x44>
 800c880:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c884:	059a      	lsls	r2, r3, #22
 800c886:	d4ef      	bmi.n	800c868 <__smakebuf_r+0x18>
 800c888:	f023 0303 	bic.w	r3, r3, #3
 800c88c:	f043 0302 	orr.w	r3, r3, #2
 800c890:	81a3      	strh	r3, [r4, #12]
 800c892:	e7e3      	b.n	800c85c <__smakebuf_r+0xc>
 800c894:	4b0d      	ldr	r3, [pc, #52]	; (800c8cc <__smakebuf_r+0x7c>)
 800c896:	62b3      	str	r3, [r6, #40]	; 0x28
 800c898:	89a3      	ldrh	r3, [r4, #12]
 800c89a:	6020      	str	r0, [r4, #0]
 800c89c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c8a0:	81a3      	strh	r3, [r4, #12]
 800c8a2:	9b00      	ldr	r3, [sp, #0]
 800c8a4:	6163      	str	r3, [r4, #20]
 800c8a6:	9b01      	ldr	r3, [sp, #4]
 800c8a8:	6120      	str	r0, [r4, #16]
 800c8aa:	b15b      	cbz	r3, 800c8c4 <__smakebuf_r+0x74>
 800c8ac:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800c8b0:	4630      	mov	r0, r6
 800c8b2:	f000 f86b 	bl	800c98c <_isatty_r>
 800c8b6:	b128      	cbz	r0, 800c8c4 <__smakebuf_r+0x74>
 800c8b8:	89a3      	ldrh	r3, [r4, #12]
 800c8ba:	f023 0303 	bic.w	r3, r3, #3
 800c8be:	f043 0301 	orr.w	r3, r3, #1
 800c8c2:	81a3      	strh	r3, [r4, #12]
 800c8c4:	89a0      	ldrh	r0, [r4, #12]
 800c8c6:	4305      	orrs	r5, r0
 800c8c8:	81a5      	strh	r5, [r4, #12]
 800c8ca:	e7cd      	b.n	800c868 <__smakebuf_r+0x18>
 800c8cc:	08007fe1 	.word	0x08007fe1

0800c8d0 <_malloc_usable_size_r>:
 800c8d0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800c8d4:	1f18      	subs	r0, r3, #4
 800c8d6:	2b00      	cmp	r3, #0
 800c8d8:	bfbc      	itt	lt
 800c8da:	580b      	ldrlt	r3, [r1, r0]
 800c8dc:	18c0      	addlt	r0, r0, r3
 800c8de:	4770      	bx	lr

0800c8e0 <_raise_r>:
 800c8e0:	291f      	cmp	r1, #31
 800c8e2:	b538      	push	{r3, r4, r5, lr}
 800c8e4:	4604      	mov	r4, r0
 800c8e6:	460d      	mov	r5, r1
 800c8e8:	d904      	bls.n	800c8f4 <_raise_r+0x14>
 800c8ea:	2316      	movs	r3, #22
 800c8ec:	6003      	str	r3, [r0, #0]
 800c8ee:	f04f 30ff 	mov.w	r0, #4294967295
 800c8f2:	bd38      	pop	{r3, r4, r5, pc}
 800c8f4:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800c8f6:	b112      	cbz	r2, 800c8fe <_raise_r+0x1e>
 800c8f8:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800c8fc:	b94b      	cbnz	r3, 800c912 <_raise_r+0x32>
 800c8fe:	4620      	mov	r0, r4
 800c900:	f000 f830 	bl	800c964 <_getpid_r>
 800c904:	462a      	mov	r2, r5
 800c906:	4601      	mov	r1, r0
 800c908:	4620      	mov	r0, r4
 800c90a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800c90e:	f000 b817 	b.w	800c940 <_kill_r>
 800c912:	2b01      	cmp	r3, #1
 800c914:	d00a      	beq.n	800c92c <_raise_r+0x4c>
 800c916:	1c59      	adds	r1, r3, #1
 800c918:	d103      	bne.n	800c922 <_raise_r+0x42>
 800c91a:	2316      	movs	r3, #22
 800c91c:	6003      	str	r3, [r0, #0]
 800c91e:	2001      	movs	r0, #1
 800c920:	e7e7      	b.n	800c8f2 <_raise_r+0x12>
 800c922:	2400      	movs	r4, #0
 800c924:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800c928:	4628      	mov	r0, r5
 800c92a:	4798      	blx	r3
 800c92c:	2000      	movs	r0, #0
 800c92e:	e7e0      	b.n	800c8f2 <_raise_r+0x12>

0800c930 <raise>:
 800c930:	4b02      	ldr	r3, [pc, #8]	; (800c93c <raise+0xc>)
 800c932:	4601      	mov	r1, r0
 800c934:	6818      	ldr	r0, [r3, #0]
 800c936:	f7ff bfd3 	b.w	800c8e0 <_raise_r>
 800c93a:	bf00      	nop
 800c93c:	20000010 	.word	0x20000010

0800c940 <_kill_r>:
 800c940:	b538      	push	{r3, r4, r5, lr}
 800c942:	4d07      	ldr	r5, [pc, #28]	; (800c960 <_kill_r+0x20>)
 800c944:	2300      	movs	r3, #0
 800c946:	4604      	mov	r4, r0
 800c948:	4608      	mov	r0, r1
 800c94a:	4611      	mov	r1, r2
 800c94c:	602b      	str	r3, [r5, #0]
 800c94e:	f7f4 ffd1 	bl	80018f4 <_kill>
 800c952:	1c43      	adds	r3, r0, #1
 800c954:	d102      	bne.n	800c95c <_kill_r+0x1c>
 800c956:	682b      	ldr	r3, [r5, #0]
 800c958:	b103      	cbz	r3, 800c95c <_kill_r+0x1c>
 800c95a:	6023      	str	r3, [r4, #0]
 800c95c:	bd38      	pop	{r3, r4, r5, pc}
 800c95e:	bf00      	nop
 800c960:	20001dc0 	.word	0x20001dc0

0800c964 <_getpid_r>:
 800c964:	f7f4 bfbe 	b.w	80018e4 <_getpid>

0800c968 <_fstat_r>:
 800c968:	b538      	push	{r3, r4, r5, lr}
 800c96a:	4d07      	ldr	r5, [pc, #28]	; (800c988 <_fstat_r+0x20>)
 800c96c:	2300      	movs	r3, #0
 800c96e:	4604      	mov	r4, r0
 800c970:	4608      	mov	r0, r1
 800c972:	4611      	mov	r1, r2
 800c974:	602b      	str	r3, [r5, #0]
 800c976:	f7f5 f81c 	bl	80019b2 <_fstat>
 800c97a:	1c43      	adds	r3, r0, #1
 800c97c:	d102      	bne.n	800c984 <_fstat_r+0x1c>
 800c97e:	682b      	ldr	r3, [r5, #0]
 800c980:	b103      	cbz	r3, 800c984 <_fstat_r+0x1c>
 800c982:	6023      	str	r3, [r4, #0]
 800c984:	bd38      	pop	{r3, r4, r5, pc}
 800c986:	bf00      	nop
 800c988:	20001dc0 	.word	0x20001dc0

0800c98c <_isatty_r>:
 800c98c:	b538      	push	{r3, r4, r5, lr}
 800c98e:	4d06      	ldr	r5, [pc, #24]	; (800c9a8 <_isatty_r+0x1c>)
 800c990:	2300      	movs	r3, #0
 800c992:	4604      	mov	r4, r0
 800c994:	4608      	mov	r0, r1
 800c996:	602b      	str	r3, [r5, #0]
 800c998:	f7f5 f81b 	bl	80019d2 <_isatty>
 800c99c:	1c43      	adds	r3, r0, #1
 800c99e:	d102      	bne.n	800c9a6 <_isatty_r+0x1a>
 800c9a0:	682b      	ldr	r3, [r5, #0]
 800c9a2:	b103      	cbz	r3, 800c9a6 <_isatty_r+0x1a>
 800c9a4:	6023      	str	r3, [r4, #0]
 800c9a6:	bd38      	pop	{r3, r4, r5, pc}
 800c9a8:	20001dc0 	.word	0x20001dc0

0800c9ac <_init>:
 800c9ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c9ae:	bf00      	nop
 800c9b0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c9b2:	bc08      	pop	{r3}
 800c9b4:	469e      	mov	lr, r3
 800c9b6:	4770      	bx	lr

0800c9b8 <_fini>:
 800c9b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c9ba:	bf00      	nop
 800c9bc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c9be:	bc08      	pop	{r3}
 800c9c0:	469e      	mov	lr, r3
 800c9c2:	4770      	bx	lr
